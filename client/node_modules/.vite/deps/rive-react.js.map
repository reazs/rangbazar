{
  "version": 3,
  "sources": ["../../@rive-app/canvas/webpack:/rive/webpack/universalModuleDefinition", "../../@rive-app/canvas/webpack:/rive/npm/canvas_advanced/canvas_advanced.mjs", "../../@rive-app/canvas/webpack:/rive/src/utils/index.ts", "../../@rive-app/canvas/webpack:/rive/src/utils/registerTouchInteractions.ts", "../../@rive-app/canvas/webpack:/rive/webpack/bootstrap", "../../@rive-app/canvas/webpack:/rive/webpack/runtime/define property getters", "../../@rive-app/canvas/webpack:/rive/webpack/runtime/hasOwnProperty shorthand", "../../@rive-app/canvas/webpack:/rive/webpack/runtime/make namespace object", "../../@rive-app/canvas/webpack:/rive/src/rive.ts", "../../rive-react/dist/index.js"],
  "sourcesContent": ["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"rive\"] = factory();\n\telse\n\t\troot[\"rive\"] = factory();\n})(this, function() {\nreturn ", "\nvar Rive = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  \n  return (\nfunction(Rive) {\n  Rive = Rive || {};\n\n\nvar m;m||(m=typeof Rive !== 'undefined' ? Rive : {});var aa,ba;m.ready=new Promise(function(b,a){aa=b;ba=a});\nfunction ca(){function b(h){const g=d;c=a=0;d=new Map;g.forEach(l=>{try{l(h)}catch(k){console.error(k)}});this.La();e&&e.fb()}let a=0,c=0,d=new Map,e=null,f=null;this.requestAnimationFrame=function(h){a||(a=requestAnimationFrame(b.bind(this)));const g=++c;d.set(g,h);return g};this.cancelAnimationFrame=function(h){d.delete(h);a&&0==d.size&&(cancelAnimationFrame(a),a=0)};this.cb=function(h){f&&(document.body.remove(f),f=null);h||(f=document.createElement(\"div\"),f.style.backgroundColor=\"black\",f.style.position=\n\"fixed\",f.style.right=0,f.style.top=0,f.style.color=\"white\",f.style.padding=\"4px\",f.innerHTML=\"RIVE FPS\",h=function(g){f.innerHTML=\"RIVE FPS \"+g.toFixed(1)},document.body.appendChild(f));e=new function(){let g=0,l=0;this.fb=function(){var k=performance.now();l?(++g,k-=l,1E3<k&&(h(1E3*g/k),g=l=0)):(l=k,g=0)}}};this.$a=function(){f&&(document.body.remove(f),f=null);e=null};this.La=function(){}}\nfunction ea(b){console.assert(!0);const a=new Map;let c=-Infinity;this.push=function(d){d=d+((1<<b)-1)>>b;a.has(d)&&clearTimeout(a.get(d));a.set(d,setTimeout(function(){a.delete(d);0==a.length?c=-Infinity:d==c&&(c=Math.max(...a.keys()),console.assert(c<d))},1E3));c=Math.max(d,c);return c<<b}}\nconst fa=new function(){function b(){if(!a){var t=document.createElement(\"canvas\"),v={alpha:1,depth:0,stencil:0,antialias:0,premultipliedAlpha:1,preserveDrawingBuffer:0,preferLowPowerToHighPerformance:0,failIfMajorPerformanceCaveat:0,enableExtensionsByDefault:1,explicitSwapControl:1,renderViaOffscreenBackBuffer:1};let q=t.getContext(\"webgl2\",v);if(q)c=2;else if(q=t.getContext(\"webgl\",v))c=1;else return console.log(\"No WebGL support. Image mesh will not be drawn.\"),!1;d=Math.min(q.getParameter(q.MAX_RENDERBUFFER_SIZE),\nq.getParameter(q.MAX_TEXTURE_SIZE));function E(I,w,z){w=q.createShader(w);q.shaderSource(w,z);q.compileShader(w);z=q.getShaderInfoLog(w);if(0<z.length)throw z;q.attachShader(I,w)}t=q.createProgram();E(t,q.VERTEX_SHADER,\"attribute vec2 vertex;\\n                attribute vec2 uv;\\n                uniform vec4 mat;\\n                uniform vec2 translate;\\n                varying vec2 st;\\n                void main() {\\n                    st = uv;\\n                    gl_Position = vec4(mat2(mat) * vertex + translate, 0, 1);\\n                }\");\nE(t,q.FRAGMENT_SHADER,\"precision highp float;\\n                uniform sampler2D image;\\n                varying vec2 st;\\n                void main() {\\n                    gl_FragColor = texture2D(image, st);\\n                }\");q.bindAttribLocation(t,0,\"vertex\");q.bindAttribLocation(t,1,\"uv\");q.linkProgram(t);v=q.getProgramInfoLog(t);if(0<v.trim().length)throw v;e=q.getUniformLocation(t,\"mat\");f=q.getUniformLocation(t,\"translate\");q.useProgram(t);q.bindBuffer(q.ARRAY_BUFFER,q.createBuffer());\nq.enableVertexAttribArray(0);q.enableVertexAttribArray(1);q.bindBuffer(q.ELEMENT_ARRAY_BUFFER,q.createBuffer());q.uniform1i(q.getUniformLocation(t,\"image\"),0);q.pixelStorei(q.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!0);a=q}return!0}let a=null,c=0,d=0,e=null,f=null,h=0,g=0;this.ob=function(){b();return d};this.Ya=function(t){if(!b())return null;const v=a.createTexture();a.bindTexture(a.TEXTURE_2D,v);a.texImage2D(a.TEXTURE_2D,0,a.RGBA,a.RGBA,a.UNSIGNED_BYTE,t);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_S,a.CLAMP_TO_EDGE);\na.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_T,a.CLAMP_TO_EDGE);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MAG_FILTER,a.LINEAR);2==c?(a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,a.LINEAR_MIPMAP_LINEAR),a.generateMipmap(a.TEXTURE_2D)):a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,a.LINEAR);return v};const l=new ea(8),k=new ea(8),p=new ea(10),r=new ea(10);this.bb=function(t,v,q,E,I){if(b()){var w=l.push(t),z=k.push(v);if(a.canvas.width!=w||a.canvas.height!=z)a.canvas.width=w,a.canvas.height=z;\na.viewport(0,z-v,t,v);a.disable(a.SCISSOR_TEST);a.clearColor(0,0,0,0);a.clear(a.COLOR_BUFFER_BIT);a.enable(a.SCISSOR_TEST);q.sort((y,da)=>da.Oa-y.Oa);w=p.push(E);h!=w&&(a.bufferData(a.ARRAY_BUFFER,8*w,a.DYNAMIC_DRAW),h=w);w=0;for(var J of q)a.bufferSubData(a.ARRAY_BUFFER,w,J.Aa),w+=4*J.Aa.length;console.assert(w==4*E);for(var P of q)a.bufferSubData(a.ARRAY_BUFFER,w,P.Ra),w+=4*P.Ra.length;console.assert(w==8*E);w=r.push(I);g!=w&&(a.bufferData(a.ELEMENT_ARRAY_BUFFER,2*w,a.DYNAMIC_DRAW),g=w);J=0;for(var X of q)a.bufferSubData(a.ELEMENT_ARRAY_BUFFER,\nJ,X.indices),J+=2*X.indices.length;console.assert(J==2*I);X=0;P=!0;w=J=0;for(const y of q){y.image.va!=X&&(a.bindTexture(a.TEXTURE_2D,y.image.Va||null),X=y.image.va);y.rb?(a.scissor(y.Ea,z-y.Fa-y.Ka,y.yb,y.Ka),P=!0):P&&(a.scissor(0,z-v,t,v),P=!1);q=2/t;const da=-2/v;a.uniform4f(e,y.la[0]*q*y.ra,y.la[1]*da*y.sa,y.la[2]*q*y.ra,y.la[3]*da*y.sa);a.uniform2f(f,y.la[4]*q*y.ra+q*(y.Ea-y.pb*y.ra)-1,y.la[5]*da*y.sa+da*(y.Fa-y.qb*y.sa)+1);a.vertexAttribPointer(0,2,a.FLOAT,!1,0,w);a.vertexAttribPointer(1,2,\na.FLOAT,!1,0,w+4*E);a.drawElements(a.TRIANGLES,y.indices.length,a.UNSIGNED_SHORT,J);w+=4*y.Aa.length;J+=2*y.indices.length}console.assert(w==4*E);console.assert(J==2*I)}};this.canvas=function(){return b()&&a.canvas}};\nRive.onRuntimeInitialized=function(){function b(n){switch(n){case k.srcOver:return\"source-over\";case k.screen:return\"screen\";case k.overlay:return\"overlay\";case k.darken:return\"darken\";case k.lighten:return\"lighten\";case k.colorDodge:return\"color-dodge\";case k.colorBurn:return\"color-burn\";case k.hardLight:return\"hard-light\";case k.softLight:return\"soft-light\";case k.difference:return\"difference\";case k.exclusion:return\"exclusion\";case k.multiply:return\"multiply\";case k.hue:return\"hue\";case k.saturation:return\"saturation\";\ncase k.color:return\"color\";case k.luminosity:return\"luminosity\"}}function a(n){return\"rgba(\"+((16711680&n)>>>16)+\",\"+((65280&n)>>>8)+\",\"+((255&n)>>>0)+\",\"+((4278190080&n)>>>24)/255+\")\"}function c(){0<J.length&&(fa.bb(z.drawWidth(),z.drawHeight(),J,P,X),J=[],X=P=0,z.reset(512,512));for(const n of w){for(const u of n.da)u();n.da=[]}w.clear()}var d=Rive.RenderPaintStyle;const e=Rive.RenderPath,f=Rive.RenderPaint,h=Rive.Renderer,g=Rive.StrokeCap,l=Rive.StrokeJoin,k=Rive.BlendMode,p=d.fill,r=d.stroke,\nt=Rive.FillRule.evenOdd;let v=1;var q=Rive.RenderImage.extend(\"CanvasRenderImage\",{__construct:function(){this.__parent.__construct.call(this);this.va=v;v=v+1&2147483647||1},decode:function(n){let u=Xa;u.total++;var F=this,B=new Image;B.src=URL.createObjectURL(new Blob([n],{type:\"image/png\"}));B.onload=function(){F.Ta=B;F.Va=fa.Ya(B);F.size(B.width,B.height);u.loaded++;if(u.loaded===u.total){const D=u.ready;D&&(D(),u.ready=null)}}}}),E=e.extend(\"CanvasRenderPath\",{__construct:function(){this.__parent.__construct.call(this);\nthis.ga=new Path2D},rewind:function(){this.ga=new Path2D},addPath:function(n,u,F,B,D,G,A){var C=this.ga,R=C.addPath;n=n.ga;const K=new DOMMatrix;K.a=u;K.b=F;K.c=B;K.d=D;K.e=G;K.f=A;R.call(C,n,K)},fillRule:function(n){this.Ca=n},moveTo:function(n,u){this.ga.moveTo(n,u)},lineTo:function(n,u){this.ga.lineTo(n,u)},cubicTo:function(n,u,F,B,D,G){this.ga.bezierCurveTo(n,u,F,B,D,G)},close:function(){this.ga.closePath()}}),I=f.extend(\"CanvasRenderPaint\",{color:function(n){this.Da=a(n)},thickness:function(n){this.Wa=\nn},join:function(n){switch(n){case l.miter:this.ua=\"miter\";break;case l.round:this.ua=\"round\";break;case l.bevel:this.ua=\"bevel\"}},cap:function(n){switch(n){case g.butt:this.ta=\"butt\";break;case g.round:this.ta=\"round\";break;case g.square:this.ta=\"square\"}},style:function(n){this.Ua=n},blendMode:function(n){this.Sa=b(n)},linearGradient:function(n,u,F,B){this.oa={Pa:n,Qa:u,Ha:F,Ia:B,za:[]}},radialGradient:function(n,u,F,B){this.oa={Pa:n,Qa:u,Ha:F,Ia:B,za:[],mb:!0}},addStop:function(n,u){this.oa.za.push({color:n,\nstop:u})},completeGradient:function(){},draw:function(n,u,F){let B=this.Ua;var D=this.Da,G=this.oa;n.globalCompositeOperation=this.Sa;if(null!=G){D=G.Pa;var A=G.Qa;const R=G.Ha;var C=G.Ia;const K=G.za;G.mb?(G=R-D,C-=A,D=n.createRadialGradient(D,A,0,D,A,Math.sqrt(G*G+C*C))):D=n.createLinearGradient(D,A,R,C);for(let U=0,L=K.length;U<L;U++)A=K[U],D.addColorStop(A.stop,a(A.color));this.Da=D;this.oa=null}switch(B){case r:n.strokeStyle=D;n.lineWidth=this.Wa;n.lineCap=this.ta;n.lineJoin=this.ua;n.stroke(u);\nbreak;case p:n.fillStyle=D,n.fill(u,F)}}});const w=new Set;let z=null,J=[],P=0,X=0;var y=Rive.CanvasRenderer=h.extend(\"Renderer\",{__construct:function(n){this.__parent.__construct.call(this);this.fa=[1,0,0,1,0,0];this.Z=n.getContext(\"2d\");this.Ba=n;this.da=[]},save:function(){this.fa.push(...this.fa.slice(this.fa.length-6));this.da.push(this.Z.save.bind(this.Z))},restore:function(){const n=this.fa.length-6;if(6>n)throw\"restore() called without matching save().\";this.fa.splice(n);this.da.push(this.Z.restore.bind(this.Z))},\ntransform:function(n,u,F,B,D,G){const A=this.fa,C=A.length-6;A.splice(C,6,A[C]*n+A[C+2]*u,A[C+1]*n+A[C+3]*u,A[C]*F+A[C+2]*B,A[C+1]*F+A[C+3]*B,A[C]*D+A[C+2]*G+A[C+4],A[C+1]*D+A[C+3]*G+A[C+5]);this.da.push(this.Z.transform.bind(this.Z,n,u,F,B,D,G))},rotate:function(n){const u=Math.sin(n);n=Math.cos(n);this.transform(n,u,-u,n,0,0)},_drawPath:function(n,u){this.da.push(u.draw.bind(u,this.Z,n.ga,n.Ca===t?\"evenodd\":\"nonzero\"))},_drawImage:function(n,u,F){var B=n.Ta;if(B){var D=this.Z,G=b(u);this.da.push(function(){D.globalCompositeOperation=\nG;D.globalAlpha=F;D.drawImage(B,0,0);D.globalAlpha=1})}},_getMatrix:function(n){const u=this.fa,F=u.length-6;for(let B=0;6>B;++B)n[B]=u[F+B]},_drawImageMesh:function(n,u,F,B,D,G,A,C,R,K){var U=this.Z.canvas.width,L=this.Z.canvas.height;const pb=R-A,qb=K-C;A=Math.max(A,0);C=Math.max(C,0);R=Math.min(R,U);K=Math.min(K,L);const sa=R-A,ta=K-C;console.assert(sa<=Math.min(pb,U));console.assert(ta<=Math.min(qb,L));if(!(0>=sa||0>=ta)){R=sa<pb||ta<qb;U=K=1;var ia=Math.ceil(sa*K),ja=Math.ceil(ta*U);L=fa.ob();\nia>L&&(K*=L/ia,ia=L);ja>L&&(U*=L/ja,ja=L);z||(z=new m.DynamicRectanizer(L),z.reset(512,512));L=z.addRect(ia,ja);0>L&&(c(),w.add(this),L=z.addRect(ia,ja),console.assert(0<=L));var rb=L&65535,sb=L>>16;J.push({la:this.fa.slice(this.fa.length-6),image:n,Ea:rb,Fa:sb,pb:A,qb:C,yb:ia,Ka:ja,ra:K,sa:U,Aa:new Float32Array(B),Ra:new Float32Array(D),indices:new Uint16Array(G),rb:R,Oa:n.va<<1|(R?1:0)});P+=B.length;X+=G.length;var na=this.Z,Yb=b(u);this.da.push(function(){na.save();na.resetTransform();na.globalCompositeOperation=\nYb;na.globalAlpha=F;na.drawImage(fa.canvas(),rb,sb,ia,ja,A,C,sa,ta);na.restore()})}},_clipPath:function(n){this.da.push(this.Z.clip.bind(this.Z,n.ga,n.Ca===t?\"evenodd\":\"nonzero\"))},clear:function(){w.add(this);this.da.push(this.Z.clearRect.bind(this.Z,0,0,this.Ba.width,this.Ba.height))},flush:function(){},translate:function(n,u){this.transform(1,0,0,1,n,u)}});Rive.makeRenderer=function(n){return new y(n)};Rive.renderFactory={makeRenderPaint:function(){return new I},makeRenderPath:function(){return new E},\nmakeRenderImage:function(){return new q}};let da=Rive.load,Xa=null;Rive.load=function(n){return new Promise(function(u){let F=null;Xa={total:0,loaded:0,ready:function(){u(F)}};F=da(n);0==Xa.total&&u(F)})};d=new ca;Rive.requestAnimationFrame=d.requestAnimationFrame.bind(d);Rive.cancelAnimationFrame=d.cancelAnimationFrame.bind(d);Rive.enableFPSCounter=d.cb.bind(d);Rive.disableFPSCounter=d.$a;d.La=c;Rive.cleanup=function(){z&&z.delete()}};\nvar ha=Object.assign({},m),ka=\"object\"==typeof window,la=\"function\"==typeof importScripts,x=\"\",ma,oa;\nif(ka||la)la?x=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(x=document.currentScript.src),_scriptDir&&(x=_scriptDir),0!==x.indexOf(\"blob:\")?x=x.substr(0,x.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):x=\"\",la&&(oa=b=>{var a=new XMLHttpRequest;a.open(\"GET\",b,!1);a.responseType=\"arraybuffer\";a.send(null);return new Uint8Array(a.response)}),ma=(b,a,c)=>{var d=new XMLHttpRequest;d.open(\"GET\",b,!0);d.responseType=\"arraybuffer\";d.onload=()=>{200==d.status||0==d.status&&d.response?\na(d.response):c()};d.onerror=c;d.send(null)};var pa=m.print||console.log.bind(console),qa=m.printErr||console.warn.bind(console);Object.assign(m,ha);ha=null;var ra;m.wasmBinary&&(ra=m.wasmBinary);var noExitRuntime=m.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&ua(\"no native wasm support detected\");var va,wa=!1,xa=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\nfunction ya(b,a,c){var d=a+c;for(c=a;b[c]&&!(c>=d);)++c;if(16<c-a&&b.buffer&&xa)return xa.decode(b.subarray(a,c));for(d=\"\";a<c;){var e=b[a++];if(e&128){var f=b[a++]&63;if(192==(e&224))d+=String.fromCharCode((e&31)<<6|f);else{var h=b[a++]&63;e=224==(e&240)?(e&15)<<12|f<<6|h:(e&7)<<18|f<<12|h<<6|b[a++]&63;65536>e?d+=String.fromCharCode(e):(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023))}}else d+=String.fromCharCode(e)}return d}var za,Aa,H,Ba,Ca,Da,M,Ea,Fa;\nfunction Ga(){var b=va.buffer;za=b;m.HEAP8=Aa=new Int8Array(b);m.HEAP16=Ba=new Int16Array(b);m.HEAP32=Da=new Int32Array(b);m.HEAPU8=H=new Uint8Array(b);m.HEAPU16=Ca=new Uint16Array(b);m.HEAPU32=M=new Uint32Array(b);m.HEAPF32=Ea=new Float32Array(b);m.HEAPF64=Fa=new Float64Array(b)}var Ha,Ia=[],Ja=[],Ka=[];function La(){var b=m.preRun.shift();Ia.unshift(b)}var Ma=0,Na=null,Oa=null;\nfunction ua(b){if(m.onAbort)m.onAbort(b);b=\"Aborted(\"+b+\")\";qa(b);wa=!0;b=new WebAssembly.RuntimeError(b+\". Build with -sASSERTIONS for more info.\");ba(b);throw b;}function Pa(){return N.startsWith(\"data:application/octet-stream;base64,\")}var N;N=\"canvas_advanced.wasm\";if(!Pa()){var Qa=N;N=m.locateFile?m.locateFile(Qa,x):x+Qa}function Ra(){var b=N;try{if(b==N&&ra)return new Uint8Array(ra);if(oa)return oa(b);throw\"both async and sync fetching of the wasm failed\";}catch(a){ua(a)}}\nfunction Sa(){if(!ra&&(ka||la)){if(\"function\"==typeof fetch&&!N.startsWith(\"file://\"))return fetch(N,{credentials:\"same-origin\"}).then(function(b){if(!b.ok)throw\"failed to load wasm binary file at '\"+N+\"'\";return b.arrayBuffer()}).catch(function(){return Ra()});if(ma)return new Promise(function(b,a){ma(N,function(c){b(new Uint8Array(c))},a)})}return Promise.resolve().then(function(){return Ra()})}function Ta(b){for(;0<b.length;)b.shift()(m)}\nfunction Ua(b){if(void 0===b)return\"_unknown\";b=b.replace(/[^a-zA-Z0-9_]/g,\"$\");var a=b.charCodeAt(0);return 48<=a&&57>=a?\"_\"+b:b}function Va(b,a){b=Ua(b);return function(){return a.apply(this,arguments)}}var O=[{},{value:void 0},{value:null},{value:!0},{value:!1}],Wa=[];\nfunction Ya(b){var a=Error,c=Va(b,function(d){this.name=b;this.message=d;d=Error(d).stack;void 0!==d&&(this.stack=this.toString()+\"\\n\"+d.replace(/^Error(:[^\\n]*)?\\n/,\"\"))});c.prototype=Object.create(a.prototype);c.prototype.constructor=c;c.prototype.toString=function(){return void 0===this.message?this.name:this.name+\": \"+this.message};return c}var Za=void 0;function Q(b){throw new Za(b);}\nvar $a=b=>{b||Q(\"Cannot use deleted val. handle = \"+b);return O[b].value},S=b=>{switch(b){case void 0:return 1;case null:return 2;case !0:return 3;case !1:return 4;default:var a=Wa.length?Wa.pop():O.length;O[a]={ya:1,value:b};return a}},ab=void 0,bb=void 0;function T(b){for(var a=\"\";H[b];)a+=bb[H[b++]];return a}var cb=[];function db(){for(;cb.length;){var b=cb.pop();b.U.ka=!1;b[\"delete\"]()}}var eb=void 0,V={};\nfunction fb(b,a){for(void 0===a&&Q(\"ptr should not be undefined\");b.$;)a=b.na(a),b=b.$;return a}var gb={};function hb(b){b=ib(b);var a=T(b);jb(b);return a}function kb(b,a){var c=gb[b];void 0===c&&Q(a+\" has unknown type \"+hb(b));return c}function lb(){}var mb=!1;function nb(b){--b.count.value;0===b.count.value&&(b.aa?b.ca.ha(b.aa):b.X.V.ha(b.W))}function ob(b,a,c){if(a===c)return b;if(void 0===c.$)return null;b=ob(b,a,c.$);return null===b?null:c.ab(b)}var tb={};\nfunction ub(b,a){a=fb(b,a);return V[a]}var vb=void 0;function wb(b){throw new vb(b);}function xb(b,a){a.X&&a.W||wb(\"makeClassHandle requires ptr and ptrType\");!!a.ca!==!!a.aa&&wb(\"Both smartPtrType and smartPtr must be specified\");a.count={value:1};return yb(Object.create(b,{U:{value:a}}))}\nfunction yb(b){if(\"undefined\"===typeof FinalizationRegistry)return yb=a=>a,b;mb=new FinalizationRegistry(a=>{nb(a.U)});yb=a=>{var c=a.U;c.aa&&mb.register(a,{U:c},a);return a};lb=a=>{mb.unregister(a)};return yb(b)}var zb={};function Ab(b){for(;b.length;){var a=b.pop();b.pop()(a)}}function Bb(b){return this.fromWireType(Da[b>>2])}var Cb={},Db={};\nfunction W(b,a,c){function d(g){g=c(g);g.length!==b.length&&wb(\"Mismatched type converter count\");for(var l=0;l<b.length;++l)Y(b[l],g[l])}b.forEach(function(g){Db[g]=a});var e=Array(a.length),f=[],h=0;a.forEach((g,l)=>{gb.hasOwnProperty(g)?e[l]=gb[g]:(f.push(g),Cb.hasOwnProperty(g)||(Cb[g]=[]),Cb[g].push(()=>{e[l]=gb[g];++h;h===f.length&&d(e)}))});0===f.length&&d(e)}\nfunction Eb(b){switch(b){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\"Unknown type size: \"+b);}}\nfunction Y(b,a,c={}){if(!(\"argPackAdvance\"in a))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");var d=a.name;b||Q('type \"'+d+'\" must have a positive integer typeid pointer');if(gb.hasOwnProperty(b)){if(c.lb)return;Q(\"Cannot register type '\"+d+\"' twice\")}gb[b]=a;delete Db[b];Cb.hasOwnProperty(b)&&(a=Cb[b],delete Cb[b],a.forEach(e=>e()))}function Fb(b){Q(b.U.X.V.name+\" instance already deleted\")}function Gb(){}\nfunction Hb(b,a,c){if(void 0===b[a].Y){var d=b[a];b[a]=function(){b[a].Y.hasOwnProperty(arguments.length)||Q(\"Function '\"+c+\"' called with an invalid number of arguments (\"+arguments.length+\") - expects one of (\"+b[a].Y+\")!\");return b[a].Y[arguments.length].apply(this,arguments)};b[a].Y=[];b[a].Y[d.ja]=d}}\nfunction Ib(b,a,c){m.hasOwnProperty(b)?((void 0===c||void 0!==m[b].Y&&void 0!==m[b].Y[c])&&Q(\"Cannot register public name '\"+b+\"' twice\"),Hb(m,b,b),m.hasOwnProperty(c)&&Q(\"Cannot register multiple overloads of a function with the same number of arguments (\"+c+\")!\"),m[b].Y[c]=a):(m[b]=a,void 0!==c&&(m[b].zb=c))}function Jb(b,a,c,d,e,f,h,g){this.name=b;this.constructor=a;this.ea=c;this.ha=d;this.$=e;this.gb=f;this.na=h;this.ab=g;this.Ma=[]}\nfunction Kb(b,a,c){for(;a!==c;)a.na||Q(\"Expected null or instance of \"+c.name+\", got an instance of \"+a.name),b=a.na(b),a=a.$;return b}function Lb(b,a){if(null===a)return this.wa&&Q(\"null is not a valid \"+this.name),0;a.U||Q('Cannot pass \"'+Mb(a)+'\" as a '+this.name);a.U.W||Q(\"Cannot pass deleted object as a pointer of type \"+this.name);return Kb(a.U.W,a.U.X.V,this.V)}\nfunction Nb(b,a){if(null===a){this.wa&&Q(\"null is not a valid \"+this.name);if(this.qa){var c=this.xa();null!==b&&b.push(this.ha,c);return c}return 0}a.U||Q('Cannot pass \"'+Mb(a)+'\" as a '+this.name);a.U.W||Q(\"Cannot pass deleted object as a pointer of type \"+this.name);!this.pa&&a.U.X.pa&&Q(\"Cannot convert argument of type \"+(a.U.ca?a.U.ca.name:a.U.X.name)+\" to parameter type \"+this.name);c=Kb(a.U.W,a.U.X.V,this.V);if(this.qa)switch(void 0===a.U.aa&&Q(\"Passing raw pointer to smart pointer is illegal\"),\nthis.xb){case 0:a.U.ca===this?c=a.U.aa:Q(\"Cannot convert argument of type \"+(a.U.ca?a.U.ca.name:a.U.X.name)+\" to parameter type \"+this.name);break;case 1:c=a.U.aa;break;case 2:if(a.U.ca===this)c=a.U.aa;else{var d=a.clone();c=this.tb(c,S(function(){d[\"delete\"]()}));null!==b&&b.push(this.ha,c)}break;default:Q(\"Unsupporting sharing policy\")}return c}\nfunction Ob(b,a){if(null===a)return this.wa&&Q(\"null is not a valid \"+this.name),0;a.U||Q('Cannot pass \"'+Mb(a)+'\" as a '+this.name);a.U.W||Q(\"Cannot pass deleted object as a pointer of type \"+this.name);a.U.X.pa&&Q(\"Cannot convert argument of type \"+a.U.X.name+\" to parameter type \"+this.name);return Kb(a.U.W,a.U.X.V,this.V)}\nfunction Pb(b,a,c,d){this.name=b;this.V=a;this.wa=c;this.pa=d;this.qa=!1;this.ha=this.tb=this.xa=this.Na=this.xb=this.sb=void 0;void 0!==a.$?this.toWireType=Nb:(this.toWireType=d?Lb:Ob,this.ba=null)}function Qb(b,a,c){m.hasOwnProperty(b)||wb(\"Replacing nonexistant public symbol\");void 0!==m[b].Y&&void 0!==c?m[b].Y[c]=a:(m[b]=a,m[b].ja=c)}\nfunction Rb(b,a){var c=[];return function(){c.length=0;Object.assign(c,arguments);if(b.includes(\"j\")){var d=m[\"dynCall_\"+b];d=c&&c.length?d.apply(null,[a].concat(c)):d.call(null,a)}else d=Ha.get(a).apply(null,c);return d}}function Z(b,a){b=T(b);var c=b.includes(\"j\")?Rb(b,a):Ha.get(a);\"function\"!=typeof c&&Q(\"unknown function pointer with signature \"+b+\": \"+a);return c}var Sb=void 0;\nfunction Tb(b,a){function c(f){e[f]||gb[f]||(Db[f]?Db[f].forEach(c):(d.push(f),e[f]=!0))}var d=[],e={};a.forEach(c);throw new Sb(b+\": \"+d.map(hb).join([\", \"]));}\nfunction Ub(b,a,c,d,e){var f=a.length;2>f&&Q(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");var h=null!==a[1]&&null!==c,g=!1;for(c=1;c<a.length;++c)if(null!==a[c]&&void 0===a[c].ba){g=!0;break}var l=\"void\"!==a[0].name,k=f-2,p=Array(k),r=[],t=[];return function(){arguments.length!==k&&Q(\"function \"+b+\" called with \"+arguments.length+\" arguments, expected \"+k+\" args!\");t.length=0;r.length=h?2:1;r[0]=e;if(h){var v=a[1].toWireType(t,this);r[1]=v}for(var q=0;q<k;++q)p[q]=\na[q+2].toWireType(t,arguments[q]),r.push(p[q]);q=d.apply(null,r);if(g)Ab(t);else for(var E=h?1:2;E<a.length;E++){var I=1===E?v:p[E-2];null!==a[E].ba&&a[E].ba(I)}v=l?a[0].fromWireType(q):void 0;return v}}function Vb(b,a){for(var c=[],d=0;d<b;d++)c.push(M[a+4*d>>2]);return c}\nfunction Wb(b,a,c){b instanceof Object||Q(c+' with invalid \"this\": '+b);b instanceof a.V.constructor||Q(c+' incompatible with \"this\" of type '+b.constructor.name);b.U.W||Q(\"cannot call emscripten binding method \"+c+\" on deleted object\");return Kb(b.U.W,b.U.X.V,a.V)}function Xb(b){4<b&&0===--O[b].ya&&(O[b]=void 0,Wa.push(b))}\nfunction Zb(b,a,c){switch(a){case 0:return function(d){return this.fromWireType((c?Aa:H)[d])};case 1:return function(d){return this.fromWireType((c?Ba:Ca)[d>>1])};case 2:return function(d){return this.fromWireType((c?Da:M)[d>>2])};default:throw new TypeError(\"Unknown integer type: \"+b);}}function Mb(b){if(null===b)return\"null\";var a=typeof b;return\"object\"===a||\"array\"===a||\"function\"===a?b.toString():\"\"+b}\nfunction $b(b,a){switch(a){case 2:return function(c){return this.fromWireType(Ea[c>>2])};case 3:return function(c){return this.fromWireType(Fa[c>>3])};default:throw new TypeError(\"Unknown float type: \"+b);}}\nfunction ac(b,a,c){switch(a){case 0:return c?function(d){return Aa[d]}:function(d){return H[d]};case 1:return c?function(d){return Ba[d>>1]}:function(d){return Ca[d>>1]};case 2:return c?function(d){return Da[d>>2]}:function(d){return M[d>>2]};default:throw new TypeError(\"Unknown integer type: \"+b);}}var bc=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0;\nfunction cc(b,a){var c=b>>1;for(var d=c+a/2;!(c>=d)&&Ca[c];)++c;c<<=1;if(32<c-b&&bc)return bc.decode(H.subarray(b,c));c=\"\";for(d=0;!(d>=a/2);++d){var e=Ba[b+2*d>>1];if(0==e)break;c+=String.fromCharCode(e)}return c}function dc(b,a,c){void 0===c&&(c=2147483647);if(2>c)return 0;c-=2;var d=a;c=c<2*b.length?c/2:b.length;for(var e=0;e<c;++e)Ba[a>>1]=b.charCodeAt(e),a+=2;Ba[a>>1]=0;return a-d}function ec(b){return 2*b.length}\nfunction fc(b,a){for(var c=0,d=\"\";!(c>=a/4);){var e=Da[b+4*c>>2];if(0==e)break;++c;65536<=e?(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023)):d+=String.fromCharCode(e)}return d}function gc(b,a,c){void 0===c&&(c=2147483647);if(4>c)return 0;var d=a;c=d+c-4;for(var e=0;e<b.length;++e){var f=b.charCodeAt(e);if(55296<=f&&57343>=f){var h=b.charCodeAt(++e);f=65536+((f&1023)<<10)|h&1023}Da[a>>2]=f;a+=4;if(a+4>c)break}Da[a>>2]=0;return a-d}\nfunction hc(b){for(var a=0,c=0;c<b.length;++c){var d=b.charCodeAt(c);55296<=d&&57343>=d&&++c;a+=4}return a}var ic={};function jc(b){var a=ic[b];return void 0===a?T(b):a}var kc=[];function lc(b){var a=kc.length;kc.push(b);return a}function mc(b,a){for(var c=Array(b),d=0;d<b;++d)c[d]=kb(M[a+4*d>>2],\"parameter \"+d);return c}var nc=[],oc=[null,[],[]];Za=m.BindingError=Ya(\"BindingError\");m.count_emval_handles=function(){for(var b=0,a=5;a<O.length;++a)void 0!==O[a]&&++b;return b};\nm.get_first_emval=function(){for(var b=5;b<O.length;++b)if(void 0!==O[b])return O[b];return null};ab=m.PureVirtualError=Ya(\"PureVirtualError\");for(var pc=Array(256),qc=0;256>qc;++qc)pc[qc]=String.fromCharCode(qc);bb=pc;m.getInheritedInstanceCount=function(){return Object.keys(V).length};m.getLiveInheritedInstances=function(){var b=[],a;for(a in V)V.hasOwnProperty(a)&&b.push(V[a]);return b};m.flushPendingDeletes=db;m.setDelayFunction=function(b){eb=b;cb.length&&eb&&eb(db)};vb=m.InternalError=Ya(\"InternalError\");\nGb.prototype.isAliasOf=function(b){if(!(this instanceof Gb&&b instanceof Gb))return!1;var a=this.U.X.V,c=this.U.W,d=b.U.X.V;for(b=b.U.W;a.$;)c=a.na(c),a=a.$;for(;d.$;)b=d.na(b),d=d.$;return a===d&&c===b};Gb.prototype.clone=function(){this.U.W||Fb(this);if(this.U.ma)return this.U.count.value+=1,this;var b=yb,a=Object,c=a.create,d=Object.getPrototypeOf(this),e=this.U;b=b(c.call(a,d,{U:{value:{count:e.count,ka:e.ka,ma:e.ma,W:e.W,X:e.X,aa:e.aa,ca:e.ca}}}));b.U.count.value+=1;b.U.ka=!1;return b};\nGb.prototype[\"delete\"]=function(){this.U.W||Fb(this);this.U.ka&&!this.U.ma&&Q(\"Object already scheduled for deletion\");lb(this);nb(this.U);this.U.ma||(this.U.aa=void 0,this.U.W=void 0)};Gb.prototype.isDeleted=function(){return!this.U.W};Gb.prototype.deleteLater=function(){this.U.W||Fb(this);this.U.ka&&!this.U.ma&&Q(\"Object already scheduled for deletion\");cb.push(this);1===cb.length&&eb&&eb(db);this.U.ka=!0;return this};Pb.prototype.hb=function(b){this.Na&&(b=this.Na(b));return b};\nPb.prototype.Ga=function(b){this.ha&&this.ha(b)};Pb.prototype.argPackAdvance=8;Pb.prototype.readValueFromPointer=Bb;Pb.prototype.deleteObject=function(b){if(null!==b)b[\"delete\"]()};\nPb.prototype.fromWireType=function(b){function a(){return this.qa?xb(this.V.ea,{X:this.sb,W:c,ca:this,aa:b}):xb(this.V.ea,{X:this,W:b})}var c=this.hb(b);if(!c)return this.Ga(b),null;var d=ub(this.V,c);if(void 0!==d){if(0===d.U.count.value)return d.U.W=c,d.U.aa=b,d.clone();d=d.clone();this.Ga(b);return d}d=this.V.gb(c);d=tb[d];if(!d)return a.call(this);d=this.pa?d.Xa:d.pointerType;var e=ob(c,this.V,d.V);return null===e?a.call(this):this.qa?xb(d.V.ea,{X:d,W:e,ca:this,aa:b}):xb(d.V.ea,{X:d,W:e})};\nSb=m.UnboundTypeError=Ya(\"UnboundTypeError\");\nvar sc={G:function(b,a,c){b=T(b);a=kb(a,\"wrapper\");c=$a(c);var d=[].slice,e=a.V,f=e.ea,h=e.$.ea,g=e.$.constructor;b=Va(b,function(){e.$.Ma.forEach(function(k){if(this[k]===h[k])throw new ab(\"Pure virtual function \"+k+\" must be implemented in JavaScript\");}.bind(this));Object.defineProperty(this,\"__parent\",{value:f});this.__construct.apply(this,d.call(arguments))});f.__construct=function(){this===f&&Q(\"Pass correct 'this' to __construct\");var k=g.implement.apply(void 0,[this].concat(d.call(arguments)));\nlb(k);var p=k.U;k.notifyOnDestruction();p.ma=!0;Object.defineProperties(this,{U:{value:p}});yb(this);k=p.W;k=fb(e,k);V.hasOwnProperty(k)?Q(\"Tried to register registered instance: \"+k):V[k]=this};f.__destruct=function(){this===f&&Q(\"Pass correct 'this' to __destruct\");lb(this);var k=this.U.W;k=fb(e,k);V.hasOwnProperty(k)?delete V[k]:Q(\"Tried to unregister unregistered instance: \"+k)};b.prototype=Object.create(f);for(var l in c)b.prototype[l]=c[l];return S(b)},J:function(b){var a=zb[b];delete zb[b];\nvar c=a.xa,d=a.ha,e=a.Ja,f=e.map(h=>h.kb).concat(e.map(h=>h.vb));W([b],f,h=>{var g={};e.forEach((l,k)=>{var p=h[k],r=l.ib,t=l.jb,v=h[k+e.length],q=l.ub,E=l.wb;g[l.eb]={read:I=>p.fromWireType(r(t,I)),write:(I,w)=>{var z=[];q(E,I,v.toWireType(z,w));Ab(z)}}});return[{name:a.name,fromWireType:function(l){var k={},p;for(p in g)k[p]=g[p].read(l);d(l);return k},toWireType:function(l,k){for(var p in g)if(!(p in k))throw new TypeError('Missing field:  \"'+p+'\"');var r=c();for(p in g)g[p].write(r,k[p]);null!==\nl&&l.push(d,r);return r},argPackAdvance:8,readValueFromPointer:Bb,ba:d}]})},z:function(){},E:function(b,a,c,d,e){var f=Eb(c);a=T(a);Y(b,{name:a,fromWireType:function(h){return!!h},toWireType:function(h,g){return g?d:e},argPackAdvance:8,readValueFromPointer:function(h){if(1===c)var g=Aa;else if(2===c)g=Ba;else if(4===c)g=Da;else throw new TypeError(\"Unknown boolean type size: \"+a);return this.fromWireType(g[h>>f])},ba:null})},e:function(b,a,c,d,e,f,h,g,l,k,p,r,t){p=T(p);f=Z(e,f);g&&(g=Z(h,g));k&&(k=\nZ(l,k));t=Z(r,t);var v=Ua(p);Ib(v,function(){Tb(\"Cannot construct \"+p+\" due to unbound types\",[d])});W([b,a,c],d?[d]:[],function(q){q=q[0];if(d){var E=q.V;var I=E.ea}else I=Gb.prototype;q=Va(v,function(){if(Object.getPrototypeOf(this)!==w)throw new Za(\"Use 'new' to construct \"+p);if(void 0===z.ia)throw new Za(p+\" has no accessible constructor\");var P=z.ia[arguments.length];if(void 0===P)throw new Za(\"Tried to invoke ctor of \"+p+\" with invalid number of parameters (\"+arguments.length+\") - expected (\"+\nObject.keys(z.ia).toString()+\") parameters instead!\");return P.apply(this,arguments)});var w=Object.create(I,{constructor:{value:q}});q.prototype=w;var z=new Jb(p,q,w,t,E,f,g,k);E=new Pb(p,z,!0,!1);I=new Pb(p+\"*\",z,!1,!1);var J=new Pb(p+\" const*\",z,!1,!0);tb[b]={pointerType:I,Xa:J};Qb(v,q);return[E,I,J]})},k:function(b,a,c,d,e,f,h){var g=Vb(c,d);a=T(a);f=Z(e,f);W([],[b],function(l){function k(){Tb(\"Cannot call \"+p+\" due to unbound types\",g)}l=l[0];var p=l.name+\".\"+a;a.startsWith(\"@@\")&&(a=Symbol[a.substring(2)]);\nvar r=l.V.constructor;void 0===r[a]?(k.ja=c-1,r[a]=k):(Hb(r,a,p),r[a].Y[c-1]=k);W([],g,function(t){t=Ub(p,[t[0],null].concat(t.slice(1)),null,f,h);void 0===r[a].Y?(t.ja=c-1,r[a]=t):r[a].Y[c-1]=t;return[]});return[]})},s:function(b,a,c,d,e,f,h,g){a=T(a);f=Z(e,f);W([],[b],function(l){l=l[0];var k=l.name+\".\"+a,p={get:function(){Tb(\"Cannot access \"+k+\" due to unbound types\",[c])},enumerable:!0,configurable:!0};p.set=g?()=>{Tb(\"Cannot access \"+k+\" due to unbound types\",[c])}:()=>{Q(k+\" is a read-only property\")};\nObject.defineProperty(l.V.constructor,a,p);W([],[c],function(r){r=r[0];var t={get:function(){return r.fromWireType(f(d))},enumerable:!0};g&&(g=Z(h,g),t.set=v=>{var q=[];g(d,r.toWireType(q,v));Ab(q)});Object.defineProperty(l.V.constructor,a,t);return[]});return[]})},o:function(b,a,c,d,e,f){0<a||ua();var h=Vb(a,c);e=Z(d,e);W([],[b],function(g){g=g[0];var l=\"constructor \"+g.name;void 0===g.V.ia&&(g.V.ia=[]);if(void 0!==g.V.ia[a-1])throw new Za(\"Cannot register multiple constructors with identical number of parameters (\"+\n(a-1)+\") for class '\"+g.name+\"'! Overload resolution is currently only performed using the parameter count, not actual type info!\");g.V.ia[a-1]=()=>{Tb(\"Cannot construct \"+g.name+\" due to unbound types\",h)};W([],h,function(k){k.splice(1,0,null);g.V.ia[a-1]=Ub(l,k,null,e,f);return[]});return[]})},a:function(b,a,c,d,e,f,h,g){var l=Vb(c,d);a=T(a);f=Z(e,f);W([],[b],function(k){function p(){Tb(\"Cannot call \"+r+\" due to unbound types\",l)}k=k[0];var r=k.name+\".\"+a;a.startsWith(\"@@\")&&(a=Symbol[a.substring(2)]);\ng&&k.V.Ma.push(a);var t=k.V.ea,v=t[a];void 0===v||void 0===v.Y&&v.className!==k.name&&v.ja===c-2?(p.ja=c-2,p.className=k.name,t[a]=p):(Hb(t,a,r),t[a].Y[c-2]=p);W([],l,function(q){q=Ub(r,q,k,f,h);void 0===t[a].Y?(q.ja=c-2,t[a]=q):t[a].Y[c-2]=q;return[]});return[]})},d:function(b,a,c,d,e,f,h,g,l,k){a=T(a);e=Z(d,e);W([],[b],function(p){p=p[0];var r=p.name+\".\"+a,t={get:function(){Tb(\"Cannot access \"+r+\" due to unbound types\",[c,h])},enumerable:!0,configurable:!0};t.set=l?()=>{Tb(\"Cannot access \"+r+\" due to unbound types\",\n[c,h])}:()=>{Q(r+\" is a read-only property\")};Object.defineProperty(p.V.ea,a,t);W([],l?[c,h]:[c],function(v){var q=v[0],E={get:function(){var w=Wb(this,p,r+\" getter\");return q.fromWireType(e(f,w))},enumerable:!0};if(l){l=Z(g,l);var I=v[1];E.set=function(w){var z=Wb(this,p,r+\" setter\"),J=[];l(k,z,I.toWireType(J,w));Ab(J)}}Object.defineProperty(p.V.ea,a,E);return[]});return[]})},D:function(b,a){a=T(a);Y(b,{name:a,fromWireType:function(c){var d=$a(c);Xb(c);return d},toWireType:function(c,d){return S(d)},\nargPackAdvance:8,readValueFromPointer:Bb,ba:null})},l:function(b,a,c,d){function e(){}c=Eb(c);a=T(a);e.values={};Y(b,{name:a,constructor:e,fromWireType:function(f){return this.constructor.values[f]},toWireType:function(f,h){return h.value},argPackAdvance:8,readValueFromPointer:Zb(a,c,d),ba:null});Ib(a,e)},c:function(b,a,c){var d=kb(b,\"enum\");a=T(a);b=d.constructor;d=Object.create(d.constructor.prototype,{value:{value:c},constructor:{value:Va(d.name+\"_\"+a,function(){})}});b.values[c]=d;b[a]=d},u:function(b,\na,c){c=Eb(c);a=T(a);Y(b,{name:a,fromWireType:function(d){return d},toWireType:function(d,e){return e},argPackAdvance:8,readValueFromPointer:$b(a,c),ba:null})},q:function(b,a,c,d,e,f){var h=Vb(a,c);b=T(b);e=Z(d,e);Ib(b,function(){Tb(\"Cannot call \"+b+\" due to unbound types\",h)},a-1);W([],h,function(g){Qb(b,Ub(b,[g[0],null].concat(g.slice(1)),null,e,f),a-1);return[]})},j:function(b,a,c,d,e){a=T(a);-1===e&&(e=4294967295);e=Eb(c);var f=g=>g;if(0===d){var h=32-8*c;f=g=>g<<h>>>h}c=a.includes(\"unsigned\")?\nfunction(g,l){return l>>>0}:function(g,l){return l};Y(b,{name:a,fromWireType:f,toWireType:c,argPackAdvance:8,readValueFromPointer:ac(a,e,0!==d),ba:null})},g:function(b,a,c){function d(f){f>>=2;var h=M;return new e(za,h[f+1],h[f])}var e=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][a];c=T(c);Y(b,{name:c,fromWireType:d,argPackAdvance:8,readValueFromPointer:d},{lb:!0})},v:function(b,a){a=T(a);var c=\"std::string\"===a;Y(b,{name:a,fromWireType:function(d){var e=\nM[d>>2],f=d+4;if(c)for(var h=f,g=0;g<=e;++g){var l=f+g;if(g==e||0==H[l]){h=h?ya(H,h,l-h):\"\";if(void 0===k)var k=h;else k+=String.fromCharCode(0),k+=h;h=l+1}}else{k=Array(e);for(g=0;g<e;++g)k[g]=String.fromCharCode(H[f+g]);k=k.join(\"\")}jb(d);return k},toWireType:function(d,e){e instanceof ArrayBuffer&&(e=new Uint8Array(e));var f,h=\"string\"==typeof e;h||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array||Q(\"Cannot pass non-string to std::string\");if(c&&h){var g=0;for(f=\n0;f<e.length;++f){var l=e.charCodeAt(f);127>=l?g++:2047>=l?g+=2:55296<=l&&57343>=l?(g+=4,++f):g+=3}f=g}else f=e.length;g=rc(4+f+1);l=g+4;M[g>>2]=f;if(c&&h){if(h=l,l=f+1,f=H,0<l){l=h+l-1;for(var k=0;k<e.length;++k){var p=e.charCodeAt(k);if(55296<=p&&57343>=p){var r=e.charCodeAt(++k);p=65536+((p&1023)<<10)|r&1023}if(127>=p){if(h>=l)break;f[h++]=p}else{if(2047>=p){if(h+1>=l)break;f[h++]=192|p>>6}else{if(65535>=p){if(h+2>=l)break;f[h++]=224|p>>12}else{if(h+3>=l)break;f[h++]=240|p>>18;f[h++]=128|p>>12&\n63}f[h++]=128|p>>6&63}f[h++]=128|p&63}}f[h]=0}}else if(h)for(h=0;h<f;++h)k=e.charCodeAt(h),255<k&&(jb(l),Q(\"String has UTF-16 code units that do not fit in 8 bits\")),H[l+h]=k;else for(h=0;h<f;++h)H[l+h]=e[h];null!==d&&d.push(jb,g);return g},argPackAdvance:8,readValueFromPointer:Bb,ba:function(d){jb(d)}})},t:function(b,a,c){c=T(c);if(2===a){var d=cc;var e=dc;var f=ec;var h=()=>Ca;var g=1}else 4===a&&(d=fc,e=gc,f=hc,h=()=>M,g=2);Y(b,{name:c,fromWireType:function(l){for(var k=M[l>>2],p=h(),r,t=l+4,v=\n0;v<=k;++v){var q=l+4+v*a;if(v==k||0==p[q>>g])t=d(t,q-t),void 0===r?r=t:(r+=String.fromCharCode(0),r+=t),t=q+a}jb(l);return r},toWireType:function(l,k){\"string\"!=typeof k&&Q(\"Cannot pass non-string to C++ string type \"+c);var p=f(k),r=rc(4+p+a);M[r>>2]=p>>g;e(k,r+4,p+a);null!==l&&l.push(jb,r);return r},argPackAdvance:8,readValueFromPointer:Bb,ba:function(l){jb(l)}})},L:function(b,a,c,d,e,f){zb[b]={name:T(a),xa:Z(c,d),ha:Z(e,f),Ja:[]}},K:function(b,a,c,d,e,f,h,g,l,k){zb[b].Ja.push({eb:T(a),kb:c,ib:Z(d,\ne),jb:f,vb:h,ub:Z(g,l),wb:k})},F:function(b,a){a=T(a);Y(b,{nb:!0,name:a,argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},r:function(b,a,c){b=$a(b);a=kb(a,\"emval::as\");var d=[],e=S(d);M[c>>2]=e;return a.toWireType(d,b)},w:function(b,a,c,d,e){b=kc[b];a=$a(a);c=jc(c);var f=[];M[d>>2]=S(f);return b(a,c,f,e)},i:function(b,a,c,d){b=kc[b];a=$a(a);c=jc(c);b(a,c,null,d)},f:Xb,h:function(b,a){var c=mc(b,a),d=c[0];a=d.name+\"_$\"+c.slice(1).map(function(h){return h.name}).join(\"_\")+\"$\";var e=\nnc[a];if(void 0!==e)return e;var f=Array(b-1);e=lc((h,g,l,k)=>{for(var p=0,r=0;r<b-1;++r)f[r]=c[r+1].readValueFromPointer(k+p),p+=c[r+1].argPackAdvance;h=h[g].apply(h,f);for(r=0;r<b-1;++r)c[r+1].Za&&c[r+1].Za(f[r]);if(!d.nb)return d.toWireType(l,h)});return nc[a]=e},p:function(b){b=jc(b);return S(m[b])},I:function(b,a){b=$a(b);a=$a(a);return S(b[a])},m:function(b){4<b&&(O[b].ya+=1)},H:function(b){return S(jc(b))},n:function(b){var a=$a(b);Ab(a);Xb(b)},x:function(b,a){b=kb(b,\"_emval_take_value\");b=\nb.readValueFromPointer(a);return S(b)},b:function(){ua(\"\")},A:function(b){var a=H.length;b>>>=0;if(2147483648<b)return!1;for(var c=1;4>=c;c*=2){var d=a*(1+.2/c);d=Math.min(d,b+100663296);var e=Math;d=Math.max(b,d);e=e.min.call(e,2147483648,d+(65536-d%65536)%65536);a:{try{va.grow(e-za.byteLength+65535>>>16);Ga();var f=1;break a}catch(h){}f=void 0}if(f)return!0}return!1},C:function(){return 52},y:function(){return 70},B:function(b,a,c,d){for(var e=0,f=0;f<c;f++){var h=M[a>>2],g=M[a+4>>2];a+=8;for(var l=\n0;l<g;l++){var k=H[h+l],p=oc[b];0===k||10===k?((1===b?pa:qa)(ya(p,0)),p.length=0):p.push(k)}e+=g}M[d>>2]=e;return 0}};\n(function(){function b(e){m.asm=e.exports;va=m.asm.M;Ga();Ha=m.asm.S;Ja.unshift(m.asm.N);Ma--;m.monitorRunDependencies&&m.monitorRunDependencies(Ma);0==Ma&&(null!==Na&&(clearInterval(Na),Na=null),Oa&&(e=Oa,Oa=null,e()))}function a(e){b(e.instance)}function c(e){return Sa().then(function(f){return WebAssembly.instantiate(f,d)}).then(function(f){return f}).then(e,function(f){qa(\"failed to asynchronously prepare wasm: \"+f);ua(f)})}var d={a:sc};Ma++;m.monitorRunDependencies&&m.monitorRunDependencies(Ma);\nif(m.instantiateWasm)try{return m.instantiateWasm(d,b)}catch(e){qa(\"Module.instantiateWasm callback failed with error: \"+e),ba(e)}(function(){return ra||\"function\"!=typeof WebAssembly.instantiateStreaming||Pa()||N.startsWith(\"file://\")||\"function\"!=typeof fetch?c(a):fetch(N,{credentials:\"same-origin\"}).then(function(e){return WebAssembly.instantiateStreaming(e,d).then(a,function(f){qa(\"wasm streaming compile failed: \"+f);qa(\"falling back to ArrayBuffer instantiation\");return c(a)})})})().catch(ba);\nreturn{}})();m.___wasm_call_ctors=function(){return(m.___wasm_call_ctors=m.asm.N).apply(null,arguments)};var jb=m._free=function(){return(jb=m._free=m.asm.O).apply(null,arguments)},rc=m._malloc=function(){return(rc=m._malloc=m.asm.P).apply(null,arguments)},ib=m.___getTypeName=function(){return(ib=m.___getTypeName=m.asm.Q).apply(null,arguments)};m.__embind_initialize_bindings=function(){return(m.__embind_initialize_bindings=m.asm.R).apply(null,arguments)};\nm.dynCall_jiji=function(){return(m.dynCall_jiji=m.asm.T).apply(null,arguments)};var tc;Oa=function uc(){tc||vc();tc||(Oa=uc)};\nfunction vc(){function b(){if(!tc&&(tc=!0,m.calledRun=!0,!wa)){Ta(Ja);aa(m);if(m.onRuntimeInitialized)m.onRuntimeInitialized();if(m.postRun)for(\"function\"==typeof m.postRun&&(m.postRun=[m.postRun]);m.postRun.length;){var a=m.postRun.shift();Ka.unshift(a)}Ta(Ka)}}if(!(0<Ma)){if(m.preRun)for(\"function\"==typeof m.preRun&&(m.preRun=[m.preRun]);m.preRun.length;)La();Ta(Ia);0<Ma||(m.setStatus?(m.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){m.setStatus(\"\")},1);b()},1)):b())}}\nif(m.preInit)for(\"function\"==typeof m.preInit&&(m.preInit=[m.preInit]);0<m.preInit.length;)m.preInit.pop()();vc();\n\n\n  return Rive.ready\n}\n);\n})();\nexport default Rive;", "export { registerTouchInteractions } from \"./registerTouchInteractions\";\n", "import * as rc from \"../rive_advanced.mjs\";\n\nexport interface TouchInteractionsParams {\n  canvas: HTMLCanvasElement | OffscreenCanvas;\n  artboard: rc.Artboard;\n  stateMachines: rc.StateMachineInstance[];\n  renderer: rc.Renderer;\n  rive: rc.RiveCanvas;\n  fit: rc.Fit;\n  alignment: rc.Alignment;\n}\n\ninterface ClientCoordinates {\n  clientX: number;\n  clientY: number;\n}\n\n/**\n * Returns the clientX and clientY properties from touch or mouse events. Also\n * calls preventDefault() on the event if it is a touchstart or touchmove to prevent\n * scrolling the page on mobile devices\n * @param event - Either a TouchEvent or a MouseEvent\n * @returns - Coordinates of the clientX and clientY properties from the touch/mouse event\n */\nconst getClientCoordinates = (\n  event: MouseEvent | TouchEvent\n): ClientCoordinates => {\n  if (\n    [\"touchstart\", \"touchmove\"].indexOf(event.type) > -1 &&\n    (event as TouchEvent).touches?.length\n  ) {\n    event.preventDefault();\n    return {\n      clientX: (event as TouchEvent).touches[0].clientX,\n      clientY: (event as TouchEvent).touches[0].clientY,\n    };\n  } else if (\n    event.type === \"touchend\" &&\n    (event as TouchEvent).changedTouches?.length\n  ) {\n    return {\n      clientX: (event as TouchEvent).changedTouches[0].clientX,\n      clientY: (event as TouchEvent).changedTouches[0].clientY,\n    };\n  } else {\n    return {\n      clientX: (event as MouseEvent).clientX,\n      clientY: (event as MouseEvent).clientY,\n    };\n  }\n};\n\n/**\n * Registers mouse move/up/down callback handlers on the canvas to send meaningful coordinates to\n * the state machine pointer move/up/down functions based on cursor interaction\n */\nexport const registerTouchInteractions = ({\n  canvas,\n  artboard,\n  stateMachines = [],\n  renderer,\n  rive,\n  fit,\n  alignment,\n}: TouchInteractionsParams) => {\n  if (\n    !canvas ||\n    !stateMachines.length ||\n    !renderer ||\n    !rive ||\n    !artboard ||\n    typeof window === \"undefined\"\n  ) {\n    return null;\n  }\n\n  const processEventCallback = (event: MouseEvent | TouchEvent) => {\n    const boundingRect = (\n      event.currentTarget as HTMLCanvasElement\n    ).getBoundingClientRect();\n\n    const { clientX, clientY } = getClientCoordinates(event);\n    if (!clientX && !clientY) {\n      return;\n    }\n    const canvasX = clientX - boundingRect.left;\n    const canvasY = clientY - boundingRect.top;\n    const forwardMatrix = rive.computeAlignment(\n      fit,\n      alignment,\n      {\n        minX: 0,\n        minY: 0,\n        maxX: boundingRect.width,\n        maxY: boundingRect.height,\n      },\n      artboard.bounds\n    );\n    const invertedMatrix = new rive.Mat2D();\n    forwardMatrix.invert(invertedMatrix);\n    const canvasCoordinatesVector = new rive.Vec2D(canvasX, canvasY);\n    const transformedVector = rive.mapXY(\n      invertedMatrix,\n      canvasCoordinatesVector\n    );\n    const transformedX = transformedVector.x();\n    const transformedY = transformedVector.y();\n\n    transformedVector.delete();\n    invertedMatrix.delete();\n    canvasCoordinatesVector.delete();\n    forwardMatrix.delete();\n\n    switch (event.type) {\n      // Pointer moving/hovering on the canvas\n      case \"touchmove\":\n      case \"mouseover\":\n      case \"mouseout\":\n      case \"mousemove\": {\n        for (const stateMachine of stateMachines) {\n          stateMachine.pointerMove(transformedX, transformedY);\n        }\n        break;\n      }\n      // Pointer click initiated but not released yet on the canvas\n      case \"touchstart\":\n      case \"mousedown\": {\n        for (const stateMachine of stateMachines) {\n          stateMachine.pointerDown(transformedX, transformedY);\n        }\n        break;\n      }\n      // Pointer click released on the canvas\n      case \"touchend\":\n      case \"mouseup\": {\n        for (const stateMachine of stateMachines) {\n          stateMachine.pointerUp(transformedX, transformedY);\n        }\n        break;\n      }\n      default:\n    }\n  };\n  const callback = processEventCallback.bind(this);\n  canvas.addEventListener(\"mouseover\", callback);\n  canvas.addEventListener(\"mouseout\", callback);\n  canvas.addEventListener(\"mousemove\", callback);\n  canvas.addEventListener(\"mousedown\", callback);\n  canvas.addEventListener(\"mouseup\", callback);\n  canvas.addEventListener(\"touchmove\", callback);\n  canvas.addEventListener(\"touchstart\", callback);\n  canvas.addEventListener(\"touchend\", callback);\n  return () => {\n    canvas.removeEventListener(\"mouseover\", callback);\n    canvas.removeEventListener(\"mouseout\", callback);\n    canvas.removeEventListener(\"mousemove\", callback);\n    canvas.removeEventListener(\"mousedown\", callback);\n    canvas.removeEventListener(\"mouseup\", callback);\n    canvas.removeEventListener(\"touchmove\", callback);\n    canvas.removeEventListener(\"touchstart\", callback);\n    canvas.removeEventListener(\"touchend\", callback);\n  };\n};\n", "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n", "// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};", "__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))", "// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};", "import * as rc from \"./rive_advanced.mjs\";\nimport * as packageData from \"package.json\";\nimport { registerTouchInteractions } from \"./utils\";\n\n/**\n * Generic type for a parameterless void callback\n */\nexport type VoidCallback = () => void;\n\n/**\n * Type for artboard bounds\n */\nexport type Bounds = rc.AABB;\n\n// #region layout\n\n// Fit options for the canvas\nexport enum Fit {\n  Cover = \"cover\",\n  Contain = \"contain\",\n  Fill = \"fill\",\n  FitWidth = \"fitWidth\",\n  FitHeight = \"fitHeight\",\n  None = \"none\",\n  ScaleDown = \"scaleDown\",\n}\n\n// Alignment options for the canvas\nexport enum Alignment {\n  Center = \"center\",\n  TopLeft = \"topLeft\",\n  TopCenter = \"topCenter\",\n  TopRight = \"topRight\",\n  CenterLeft = \"centerLeft\",\n  CenterRight = \"centerRight\",\n  BottomLeft = \"bottomLeft\",\n  BottomCenter = \"bottomCenter\",\n  BottomRight = \"bottomRight\",\n}\n\n// Interface for the Layout static method contructor\nexport interface LayoutParameters {\n  fit?: Fit;\n  alignment?: Alignment;\n  minX?: number;\n  minY?: number;\n  maxX?: number;\n  maxY?: number;\n}\n\n// Alignment options for Rive animations in a HTML canvas\nexport class Layout {\n  // Runtime fit and alignment are accessed every frame, so we cache their\n  // values to save cycles\n  private cachedRuntimeFit: rc.Fit;\n  private cachedRuntimeAlignment: rc.Alignment;\n\n  public readonly fit: Fit;\n  public readonly alignment: Alignment;\n  public readonly minX: number;\n  public readonly minY: number;\n  public readonly maxX: number;\n  public readonly maxY: number;\n\n  constructor(params?: LayoutParameters) {\n    this.fit = params?.fit ?? Fit.Contain;\n    this.alignment = params?.alignment ?? Alignment.Center;\n    this.minX = params?.minX ?? 0;\n    this.minY = params?.minY ?? 0;\n    this.maxX = params?.maxX ?? 0;\n    this.maxY = params?.maxY ?? 0;\n  }\n\n  // Alternative constructor to build a Layout from an interface/object\n  static new({\n    fit,\n    alignment,\n    minX,\n    minY,\n    maxX,\n    maxY,\n  }: LayoutParameters): Layout {\n    console.warn(\n      \"This function is deprecated: please use `new Layout({})` instead\"\n    );\n    return new Layout({ fit, alignment, minX, minY, maxX, maxY });\n  }\n\n  /**\n   * Makes a copy of the layout, replacing any specified parameters\n   */\n  public copyWith({\n    fit,\n    alignment,\n    minX,\n    minY,\n    maxX,\n    maxY,\n  }: LayoutParameters): Layout {\n    return new Layout({\n      fit: fit ?? this.fit,\n      alignment: alignment ?? this.alignment,\n      minX: minX ?? this.minX,\n      minY: minY ?? this.minY,\n      maxX: maxX ?? this.maxX,\n      maxY: maxY ?? this.maxY,\n    });\n  }\n\n  // Returns fit for the Wasm runtime format\n  public runtimeFit(rive: rc.RiveCanvas): rc.Fit {\n    if (this.cachedRuntimeFit) return this.cachedRuntimeFit;\n\n    let fit;\n    if (this.fit === Fit.Cover) fit = rive.Fit.cover;\n    else if (this.fit === Fit.Contain) fit = rive.Fit.contain;\n    else if (this.fit === Fit.Fill) fit = rive.Fit.fill;\n    else if (this.fit === Fit.FitWidth) fit = rive.Fit.fitWidth;\n    else if (this.fit === Fit.FitHeight) fit = rive.Fit.fitHeight;\n    else if (this.fit === Fit.ScaleDown) fit = rive.Fit.scaleDown;\n    else fit = rive.Fit.none;\n\n    this.cachedRuntimeFit = fit;\n    return fit;\n  }\n\n  // Returns alignment for the Wasm runtime format\n  public runtimeAlignment(rive: rc.RiveCanvas): rc.Alignment {\n    if (this.cachedRuntimeAlignment) return this.cachedRuntimeAlignment;\n\n    let alignment;\n    if (this.alignment === Alignment.TopLeft)\n      alignment = rive.Alignment.topLeft;\n    else if (this.alignment === Alignment.TopCenter)\n      alignment = rive.Alignment.topCenter;\n    else if (this.alignment === Alignment.TopRight)\n      alignment = rive.Alignment.topRight;\n    else if (this.alignment === Alignment.CenterLeft)\n      alignment = rive.Alignment.centerLeft;\n    else if (this.alignment === Alignment.CenterRight)\n      alignment = rive.Alignment.centerRight;\n    else if (this.alignment === Alignment.BottomLeft)\n      alignment = rive.Alignment.bottomLeft;\n    else if (this.alignment === Alignment.BottomCenter)\n      alignment = rive.Alignment.bottomCenter;\n    else if (this.alignment === Alignment.BottomRight)\n      alignment = rive.Alignment.bottomRight;\n    else alignment = rive.Alignment.center;\n\n    this.cachedRuntimeAlignment = alignment;\n    return alignment;\n  }\n}\n\n// #endregion\n\n// #region runtime\n\n// Callback type when looking for a runtime instance\nexport type RuntimeCallback = (rive: rc.RiveCanvas) => void;\n\n// Runtime singleton; use getInstance to provide a callback that returns the\n// Rive runtime\nexport class RuntimeLoader {\n  // Singleton helpers\n  private static runtime: rc.RiveCanvas;\n  // Flag to indicate that loading has started/completed\n  private static isLoading = false;\n  // List of callbacks for the runtime that come in while loading\n  private static callBackQueue: RuntimeCallback[] = [];\n  // Instance of the Rive runtime\n  private static rive: rc.RiveCanvas;\n  // Path to the Wasm file; default path works for testing only;\n  // if embedded wasm is used then this is never used.\n  private static wasmURL = `https://unpkg.com/${packageData.name}@${packageData.version}/rive.wasm`;\n\n  // Class is never instantiated\n  private constructor() {}\n\n  // Loads the runtime\n  private static loadRuntime(): void {\n    rc.default({\n      // Loads Wasm bundle\n      locateFile: () => RuntimeLoader.wasmURL,\n    }).then((rive: rc.RiveCanvas) => {\n      RuntimeLoader.runtime = rive;\n      // Fire all the callbacks\n      while (RuntimeLoader.callBackQueue.length > 0) {\n        RuntimeLoader.callBackQueue.shift()?.(RuntimeLoader.runtime);\n      }\n    });\n  }\n\n  // Provides a runtime instance via a callback\n  public static getInstance(callback: RuntimeCallback): void {\n    // If it's not loading, start loading runtime\n    if (!RuntimeLoader.isLoading) {\n      RuntimeLoader.isLoading = true;\n      RuntimeLoader.loadRuntime();\n    }\n    if (!RuntimeLoader.runtime) {\n      RuntimeLoader.callBackQueue.push(callback);\n    } else {\n      callback(RuntimeLoader.runtime);\n    }\n  }\n\n  // Provides a runtime instance via a promise\n  public static awaitInstance(): Promise<rc.RiveCanvas> {\n    return new Promise<rc.RiveCanvas>((resolve) =>\n      RuntimeLoader.getInstance((rive: rc.RiveCanvas): void => resolve(rive))\n    );\n  }\n\n  // Manually sets the wasm url\n  public static setWasmUrl(url: string): void {\n    RuntimeLoader.wasmURL = url;\n  }\n}\n\n// #endregion\n\n// #region animations\n\n// Wraps animations and instances from the runtime and keeps track of playback\n// state\nclass Animation {\n  public loopCount = 0;\n  public readonly instance: rc.LinearAnimationInstance;\n\n  // Time to which the animation should move to on the next render\n  public scrubTo: number | null = null;\n\n  /**\n   * Constructs a new animation\n   * @constructor\n   * @param {any} animation: runtime animation object\n   * @param {any} instance: runtime animation instance object\n   */\n  constructor(\n    private animation: rc.LinearAnimation,\n    private artboard: rc.Artboard,\n    runtime: rc.RiveCanvas,\n    public playing: boolean\n  ) {\n    this.instance = new runtime.LinearAnimationInstance(animation, artboard);\n  }\n\n  // Returns the animation's name\n  public get name(): string {\n    return this.animation.name;\n  }\n\n  // Returns the animation's current time\n  public get time(): number {\n    return this.instance.time;\n  }\n\n  // Sets the animation's current time\n  public set time(value: number) {\n    this.instance.time = value;\n  }\n\n  // Returns the animation's loop type\n  public get loopValue(): number {\n    return this.animation.loopValue;\n  }\n\n  /**\n   * Advances the animation by the give time. If the animation needs scrubbing,\n   * time is ignored and the stored scrub value is used.\n   * @param time the time to advance the animation by if no scrubbing required\n   */\n  public advance(time: number) {\n    if (this.scrubTo === null) {\n      this.instance.advance(time);\n    } else {\n      this.instance.time = 0;\n      this.instance.advance(this.scrubTo);\n      this.scrubTo = null;\n    }\n  }\n\n  /**\n   * Apply interpolated keyframe values to the artboard. This should be called after calling\n   * .advance() on an animation instance so that new values are applied to properties.\n   *\n   * Note: This does not advance the artboard, which updates all objects on the artboard\n   * @param mix - Mix value for the animation from 0 to 1\n   */\n  public apply(mix: number) {\n    this.instance.apply(mix);\n  }\n\n  public get needsScrub(): boolean {\n    return this.scrubTo !== null;\n  }\n\n  /**\n   * Deletes the backing Wasm animation instance; once this is called, this\n   * animation is no more.\n   */\n  public cleanup() {\n    this.instance.delete();\n  }\n}\n\n// #endregion\n\n// #region state machines\n\nexport enum StateMachineInputType {\n  Number = 56,\n  Trigger = 58,\n  Boolean = 59,\n}\n\n/**\n * An input for a state machine\n */\nexport class StateMachineInput {\n  constructor(\n    public readonly type: StateMachineInputType,\n    private runtimeInput: rc.SMIInput\n  ) {}\n\n  /**\n   * Returns the name of the input\n   */\n  public get name(): string {\n    return this.runtimeInput.name;\n  }\n\n  /**\n   * Returns the current value of the input\n   */\n  public get value(): number | boolean {\n    return this.runtimeInput.value;\n  }\n\n  /**\n   * Sets the value of the input\n   */\n  public set value(value: number | boolean) {\n    this.runtimeInput.value = value;\n  }\n\n  /**\n   * Fires a trigger; does nothing on Number or Boolean input types\n   */\n  public fire(): void {\n    if (this.type === StateMachineInputType.Trigger) {\n      this.runtimeInput.fire();\n    }\n  }\n}\n\nclass StateMachine {\n  /**\n   * Caches the inputs from the runtime\n   */\n  public readonly inputs: StateMachineInput[] = [];\n\n  /**\n   * Runtime state machine instance\n   */\n  public readonly instance: rc.StateMachineInstance;\n\n  /**\n   * @constructor\n   * @param stateMachine runtime state machine object\n   * @param instance runtime state machine instance object\n   */\n  constructor(\n    private stateMachine: rc.StateMachine,\n    runtime: rc.RiveCanvas,\n    public playing: boolean,\n    private artboard: rc.Artboard\n  ) {\n    this.instance = new runtime.StateMachineInstance(stateMachine, artboard);\n    this.initInputs(runtime);\n  }\n\n  public get name(): string {\n    return this.stateMachine.name;\n  }\n\n  /**\n   * Returns a list of state names that have changed on this frame\n   */\n  public get statesChanged(): string[] {\n    const names: string[] = [];\n    for (let i = 0; i < this.instance.stateChangedCount(); i++) {\n      names.push(this.instance.stateChangedNameByIndex(i));\n    }\n    return names;\n  }\n\n  /**\n   * Advances the state machine instance by a given time.\n   * @param time - the time to advance the animation by in seconds\n   */\n  public advance(time: number) {\n    this.instance.advance(time);\n  }\n\n  /**\n   * Fetches references to the state machine's inputs and caches them\n   * @param runtime an instance of the runtime; needed for the SMIInput types\n   */\n  private initInputs(runtime: rc.RiveCanvas): void {\n    // Fetch the inputs from the runtime if we don't have them\n    for (let i = 0; i < this.instance.inputCount(); i++) {\n      const input = this.instance.input(i);\n      this.inputs.push(this.mapRuntimeInput(input, runtime));\n    }\n  }\n\n  /**\n   * Maps a runtime input to it's appropriate type\n   * @param input\n   */\n  private mapRuntimeInput(\n    input: rc.SMIInput,\n    runtime: rc.RiveCanvas\n  ): StateMachineInput {\n    if (input.type === runtime.SMIInput.bool) {\n      return new StateMachineInput(\n        StateMachineInputType.Boolean,\n        input.asBool()\n      );\n    } else if (input.type === runtime.SMIInput.number) {\n      return new StateMachineInput(\n        StateMachineInputType.Number,\n        input.asNumber()\n      );\n    } else if (input.type === runtime.SMIInput.trigger) {\n      return new StateMachineInput(\n        StateMachineInputType.Trigger,\n        input.asTrigger()\n      );\n    }\n  }\n\n  /**\n   * Deletes the backing Wasm state machine instance; once this is called, this\n   * state machine is no more.\n   */\n  public cleanup() {\n    this.instance.delete();\n  }\n}\n\n// #endregion\n\n// #region animator\n\n/**\n * Manages animation\n */\nclass Animator {\n  /**\n   * Constructs a new animator\n   * @constructor\n   * @param runtime Rive runtime; needed to instance animations & state machines\n   * @param artboard the artboard that holds all animations and state machines\n   * @param animations optional list of animations\n   * @param stateMachines optional list of state machines\n   */\n  constructor(\n    private runtime: rc.RiveCanvas,\n    private artboard: rc.Artboard,\n    private eventManager: EventManager,\n    public readonly animations: Animation[] = [],\n    public readonly stateMachines: StateMachine[] = []\n  ) {}\n\n  /**\n   * Adds animations and state machines by their names. If names are shared\n   * between animations & state machines, then the first one found will be\n   * created. Best not to use the same names for these in your Rive file.\n   * @param animatable the name(s) of animations and state machines to add\n   * @returns a list of names of the playing animations and state machines\n   */\n  public add(\n    animatables: string | string[],\n    playing: boolean,\n    fireEvent = true\n  ): string[] {\n    animatables = mapToStringArray(animatables);\n    // If animatables is empty, play or pause everything\n    if (animatables.length === 0) {\n      this.animations.forEach((a) => (a.playing = playing));\n      this.stateMachines.forEach((m) => (m.playing = playing));\n    } else {\n      // Play/pause already instanced items, or create new instances\n      const instancedAnimationNames = this.animations.map((a) => a.name);\n      const instancedMachineNames = this.stateMachines.map((m) => m.name);\n      for (const i in animatables) {\n        const aIndex = instancedAnimationNames.indexOf(animatables[i]);\n        const mIndex = instancedMachineNames.indexOf(animatables[i]);\n        if (aIndex >= 0 || mIndex >= 0) {\n          if (aIndex >= 0) {\n            // Animation is instanced, play/pause it\n            this.animations[aIndex].playing = playing;\n          } else {\n            // State machine is instanced, play/pause it\n            this.stateMachines[mIndex].playing = playing;\n          }\n        } else {\n          // Try to create a new animation instance\n          const anim = this.artboard.animationByName(animatables[i]);\n          if (anim) {\n            const newAnimation = new Animation(\n              anim,\n              this.artboard,\n              this.runtime,\n              playing\n            );\n            // Display the first frame of the specified animation\n            newAnimation.advance(0);\n            newAnimation.apply(1.0);\n            this.animations.push(newAnimation);\n          } else {\n            // Try to create a new state machine instance\n            const sm = this.artboard.stateMachineByName(animatables[i]);\n            if (sm) {\n              const newStateMachine = new StateMachine(\n                sm,\n                this.runtime,\n                playing,\n                this.artboard\n              );\n              this.stateMachines.push(newStateMachine);\n            }\n          }\n        }\n      }\n    }\n    // Fire play/paused events for animations\n    if (fireEvent) {\n      if (playing) {\n        this.eventManager.fire({\n          type: EventType.Play,\n          data: this.playing,\n        });\n      } else {\n        this.eventManager.fire({\n          type: EventType.Pause,\n          data: this.paused,\n        });\n      }\n    }\n\n    return playing ? this.playing : this.paused;\n  }\n\n  /**\n   * Play the named animations/state machines\n   * @param animatables the names of the animations/machines to play; plays all if empty\n   * @returns a list of the playing items\n   */\n  public play(animatables: string | string[]): string[] {\n    return this.add(animatables, true);\n  }\n\n  /**\n   * Pauses named animations and state machines, or everything if nothing is\n   * specified\n   * @param animatables names of the animations and state machines to pause\n   * @returns a list of names of the animations and state machines paused\n   */\n  public pause(animatables: string[]): string[] {\n    return this.add(animatables, false);\n  }\n\n  /**\n   * Set time of named animations\n   * @param animations names of the animations to scrub\n   * @param value time scrub value, a floating point number to which the playhead is jumped\n   * @returns a list of names of the animations that were scrubbed\n   */\n  public scrub(animatables: string[], value: number): string[] {\n    const forScrubbing = this.animations.filter((a) =>\n      animatables.includes(a.name)\n    );\n    forScrubbing.forEach((a) => (a.scrubTo = value));\n    return forScrubbing.map((a) => a.name);\n  }\n\n  /**\n   * Returns a list of names of all animations and state machines currently\n   * playing\n   */\n  public get playing(): string[] {\n    return this.animations\n      .filter((a) => a.playing)\n      .map((a) => a.name)\n      .concat(this.stateMachines.filter((m) => m.playing).map((m) => m.name));\n  }\n\n  /**\n   * Returns a list of names of all animations and state machines currently\n   * paused\n   */\n  public get paused(): string[] {\n    return this.animations\n      .filter((a) => !a.playing)\n      .map((a) => a.name)\n      .concat(this.stateMachines.filter((m) => !m.playing).map((m) => m.name));\n  }\n\n  /**\n   * Stops and removes all named animations and state machines\n   * @param animatables animations and state machines to remove\n   * @returns a list of names of removed items\n   */\n  public stop(animatables?: string[] | string): string[] {\n    animatables = mapToStringArray(animatables);\n\n    // If nothing's specified, wipe them out, all of them\n    let removedNames: string[] = [];\n    // Stop everything\n    if (animatables.length === 0) {\n      removedNames = this.animations\n        .map((a) => a.name)\n        .concat(this.stateMachines.map((m) => m.name));\n      // Clean up before emptying the arrays\n      this.animations.forEach((a) => a.cleanup());\n      this.stateMachines.forEach((m) => m.cleanup());\n      // Empty out the arrays\n      this.animations.splice(0, this.animations.length);\n      this.stateMachines.splice(0, this.stateMachines.length);\n    } else {\n      // Remove only the named animations/state machines\n      const animationsToRemove = this.animations.filter((a) =>\n        animatables.includes(a.name)\n      );\n\n      animationsToRemove.forEach((a) => {\n        a.cleanup();\n        this.animations.splice(this.animations.indexOf(a), 1);\n      });\n      const machinesToRemove = this.stateMachines.filter((m) =>\n        animatables.includes(m.name)\n      );\n      machinesToRemove.forEach((m) => {\n        m.cleanup();\n        this.stateMachines.splice(this.stateMachines.indexOf(m), 1);\n      });\n      removedNames = animationsToRemove\n        .map((a) => a.name)\n        .concat(machinesToRemove.map((m) => m.name));\n    }\n\n    this.eventManager.fire({\n      type: EventType.Stop,\n      data: removedNames,\n    });\n\n    // Return the list of animations removed\n    return removedNames;\n  }\n\n  /**\n   * Returns true if at least one animation is active\n   */\n  public get isPlaying(): boolean {\n    return (\n      this.animations.reduce((acc, curr) => acc || curr.playing, false) ||\n      this.stateMachines.reduce((acc, curr) => acc || curr.playing, false)\n    );\n  }\n\n  /**\n   * Returns true if all animations are paused and there's at least one animation\n   */\n  public get isPaused(): boolean {\n    return (\n      !this.isPlaying &&\n      (this.animations.length > 0 || this.stateMachines.length > 0)\n    );\n  }\n\n  /**\n   * Returns true if there are no playing or paused animations/state machines\n   */\n  public get isStopped(): boolean {\n    return this.animations.length === 0 && this.stateMachines.length === 0;\n  }\n\n  /**\n   * If there are no animations or state machines, add the first one found\n   * @returns the name of the animation or state machine instanced\n   */\n  public atLeastOne(playing: boolean, fireEvent = true): string {\n    let instancedName: string;\n    if (this.animations.length === 0 && this.stateMachines.length === 0) {\n      if (this.artboard.animationCount() > 0) {\n        // Add the first animation\n        this.add(\n          [(instancedName = this.artboard.animationByIndex(0).name)],\n          playing,\n          fireEvent\n        );\n      } else if (this.artboard.stateMachineCount() > 0) {\n        // Add the first state machine\n        this.add(\n          [(instancedName = this.artboard.stateMachineByIndex(0).name)],\n          playing,\n          fireEvent\n        );\n      }\n    }\n    return instancedName;\n  }\n\n  /**\n   * Checks if any animations have looped and if so, fire the appropriate event\n   */\n  public handleLooping() {\n    for (const animation of this.animations.filter((a) => a.playing)) {\n      // Emit if the animation looped\n      if (animation.loopValue === 0 && animation.loopCount) {\n        animation.loopCount = 0;\n        // This is a one-shot; if it has ended, delete the instance\n        this.stop(animation.name);\n      } else if (animation.loopValue === 1 && animation.loopCount) {\n        this.eventManager.fire({\n          type: EventType.Loop,\n          data: { animation: animation.name, type: LoopType.Loop },\n        });\n        animation.loopCount = 0;\n      }\n      // Wasm indicates a loop at each time the animation\n      // changes direction, so a full loop/lap occurs every\n      // two loop counts\n      else if (animation.loopValue === 2 && animation.loopCount > 1) {\n        this.eventManager.fire({\n          type: EventType.Loop,\n          data: { animation: animation.name, type: LoopType.PingPong },\n        });\n        animation.loopCount = 0;\n      }\n    }\n  }\n\n  /**\n   * Checks if states have changed in state machines and fires a statechange\n   * event\n   */\n  public handleStateChanges() {\n    const statesChanged: string[] = [];\n    for (const stateMachine of this.stateMachines.filter((sm) => sm.playing)) {\n      statesChanged.push(...stateMachine.statesChanged);\n    }\n    if (statesChanged.length > 0) {\n      this.eventManager.fire({\n        type: EventType.StateChange,\n        data: statesChanged,\n      });\n    }\n  }\n}\n\n// #endregion\n\n// #region events\n\n/**\n * Supported event types triggered in Rive\n */\nexport enum EventType {\n  Load = \"load\",\n  LoadError = \"loaderror\",\n  Play = \"play\",\n  Pause = \"pause\",\n  Stop = \"stop\",\n  Loop = \"loop\",\n  Draw = \"draw\",\n  StateChange = \"statechange\",\n}\n\n// Event fired by Rive\nexport interface Event {\n  type: EventType;\n  data?: string | string[] | LoopEvent;\n}\n\n/**\n * Looping types: one-shot, loop, and ping-pong\n */\nexport enum LoopType {\n  OneShot = \"oneshot\", // has value 0 in runtime\n  Loop = \"loop\", // has value 1 in runtime\n  PingPong = \"pingpong\", // has value 2 in runtime\n}\n\n/**\n * Loop events are returned through onloop callbacks\n */\nexport interface LoopEvent {\n  animation: string;\n  type: LoopType;\n}\n\n/**\n * Loop events are returned through onloop callbacks\n */\nexport type EventCallback = (event: Event) => void;\n\n/**\n * Event listeners registered with the event manager\n */\nexport interface EventListener {\n  type: EventType;\n  callback: EventCallback;\n}\n\n/**\n * FPS Reporting through callbacks sent to the WASM runtime\n */\nexport type FPSCallback = (fps: number) => void;\n\n// Manages Rive events and listeners\nclass EventManager {\n  constructor(private listeners: EventListener[] = []) {}\n\n  // Gets listeners of specified type\n  private getListeners(type: EventType): EventListener[] {\n    return this.listeners.filter((e) => e.type === type);\n  }\n\n  // Adds a listener\n  public add(listener: EventListener): void {\n    if (!this.listeners.includes(listener)) {\n      this.listeners.push(listener);\n    }\n  }\n\n  /**\n   * Removes a listener\n   * @param listener the listener with the callback to be removed\n   */\n  public remove(listener: EventListener): void {\n    // We can't simply look for the listener as it'll be a different instance to\n    // one originally subscribed. Find all the listeners of the right type and\n    // then check their callbacks which should match.\n    for (let i = 0; i < this.listeners.length; i++) {\n      const currentListener = this.listeners[i];\n      if (currentListener.type === listener.type) {\n        if (currentListener.callback === listener.callback) {\n          this.listeners.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Clears all listeners of specified type, or every listener if no type is\n   * specified\n   * @param type the type of listeners to clear, or all listeners if not\n   * specified\n   */\n  public removeAll(type?: EventType) {\n    if (!type) {\n      this.listeners.splice(0, this.listeners.length);\n    } else {\n      this.listeners\n        .filter((l) => l.type === type)\n        .forEach((l) => this.remove(l));\n    }\n  }\n\n  // Fires an event\n  public fire(event: Event): void {\n    const eventListeners = this.getListeners(event.type);\n    eventListeners.forEach((listener) => listener.callback(event));\n  }\n}\n\n// #endregion\n\n// #region Manages a queue of tasks\n\n// A task in the queue; will fire the action when the queue is processed; will\n// also optionally fire an event.\nexport interface Task {\n  action?: VoidCallback;\n  event?: Event;\n}\n\n// Manages a queue of tasks\nclass TaskQueueManager {\n  private queue: Task[] = [];\n\n  constructor(private eventManager: EventManager) {}\n\n  // Adds a task top the queue\n  public add(task: Task): void {\n    this.queue.push(task);\n  }\n\n  // Processes all tasks in the queue\n  public process(): void {\n    while (this.queue.length > 0) {\n      const task = this.queue.shift();\n      if (task?.action) {\n        task.action();\n      }\n      if (task?.event) {\n        this.eventManager.fire(task.event);\n      }\n    }\n  }\n}\n\n// #endregion\n\n// #region Rive\n\n// Interface for the Rive static method contructor\nexport interface RiveParameters {\n  canvas: HTMLCanvasElement | OffscreenCanvas; // canvas is required\n  src?: string; // one of src or buffer is required\n  buffer?: ArrayBuffer; // one of src or buffer is required\n  artboard?: string;\n  animations?: string | string[];\n  stateMachines?: string | string[];\n  layout?: Layout;\n  autoplay?: boolean;\n  useOffscreenRenderer?: boolean;\n  /**\n   * Turn off Rive Listeners. This means state machines that have Listeners\n   * will not be invoked, and also, no event listeners pertaining to Listeners\n   * will be attached to the <canvas> element\n   */\n  shouldDisableRiveListeners?: boolean;\n  onLoad?: EventCallback;\n  onLoadError?: EventCallback;\n  onPlay?: EventCallback;\n  onPause?: EventCallback;\n  onStop?: EventCallback;\n  onLoop?: EventCallback;\n  onStateChange?: EventCallback;\n  /**\n   * @deprecated Use `onLoad()` instead\n   */\n  onload?: EventCallback;\n  /**\n   * @deprecated Use `onLoadError()` instead\n   */\n  onloaderror?: EventCallback;\n  /**\n   * @deprecated Use `onPoad()` instead\n   */\n  onplay?: EventCallback;\n  /**\n   * @deprecated Use `onPause()` instead\n   */\n  onpause?: EventCallback;\n  /**\n   * @deprecated Use `onStop()` instead\n   */\n  onstop?: EventCallback;\n  /**\n   * @deprecated Use `onLoop()` instead\n   */\n  onloop?: EventCallback;\n  /**\n   * @deprecated Use `onStateChange()` instead\n   */\n  onstatechange?: EventCallback;\n}\n\n// Interface to Rive.load function\nexport interface RiveLoadParameters {\n  src?: string;\n  buffer?: ArrayBuffer;\n  autoplay?: boolean;\n  artboard?: string;\n  animations?: string | string[];\n  stateMachines?: string | string[];\n  useOffscreenRenderer?: boolean;\n  shouldDisableRiveListeners?: boolean;\n}\n\n// Interface ot Rive.reset function\nexport interface RiveResetParameters {\n  artboard?: string;\n  animations?: string | string[];\n  stateMachines?: string | string[];\n  autoplay?: boolean;\n}\n\nexport class Rive {\n  // Canvas in which to render the artboard\n  private readonly canvas: HTMLCanvasElement | OffscreenCanvas;\n\n  // A url to a Rive file; may be undefined if a buffer is specified\n  private src: string;\n\n  // Raw Rive file data; may be undefined if a src is specified\n  private buffer: ArrayBuffer;\n\n  // The layout for rendering in the canvas\n  private _layout: Layout;\n\n  // Flag to indicate if the layout has changed; used by the renderer to know\n  // when to align\n  private _updateLayout = true;\n\n  // The runtime renderer\n  private renderer: rc.Renderer;\n\n  /**\n   * Flag to active/deactivate renderer\n   */\n  private isRendererActive = true;\n\n  // Tracks if a Rive file is loaded\n  private loaded = false;\n\n  /**\n   * Tracks if a Rive file is loaded; we need this in addition to loaded as some\n   * commands (e.g. contents) can be called as soon as the file is loaded.\n   * However, playback commands need to be queued and run in order once initial\n   * animations and autoplay has been sorted out. This applies to play, pause,\n   * and start.\n   */\n  private readyForPlaying = false;\n\n  // Wasm runtime\n  private runtime: rc.RiveCanvas;\n\n  // Runtime artboard\n  private artboard: rc.Artboard | null = null;\n\n  // place to clear up event listeners\n  private eventCleanup: VoidCallback | null = null;\n\n  // Runtime file\n  private file: rc.File;\n\n  // Holds event listeners\n  private eventManager: EventManager;\n\n  // Manages the loading task queue\n  private taskQueue: TaskQueueManager;\n\n  // Animator: manages animations and state machines\n  private animator: Animator;\n\n  // Error message for missing source or buffer\n  private static readonly missingErrorMessage: string =\n    \"Rive source file or data buffer required\";\n\n  private shouldDisableRiveListeners = false;\n\n  // Durations to generate a frame for the last second. Used for performance profiling.\n  public durations: number[] = [];\n  public frameTimes: number[] = [];\n  public frameCount = 0;\n\n  constructor(params: RiveParameters) {\n    this.canvas = params.canvas;\n    this.src = params.src;\n    this.buffer = params.buffer;\n    this.layout = params.layout ?? new Layout();\n    this.shouldDisableRiveListeners = !!params.shouldDisableRiveListeners;\n\n    // New event management system\n    this.eventManager = new EventManager();\n    if (params.onLoad) this.on(EventType.Load, params.onLoad);\n    if (params.onLoadError) this.on(EventType.LoadError, params.onLoadError);\n    if (params.onPlay) this.on(EventType.Play, params.onPlay);\n    if (params.onPause) this.on(EventType.Pause, params.onPause);\n    if (params.onStop) this.on(EventType.Stop, params.onStop);\n    if (params.onLoop) this.on(EventType.Loop, params.onLoop);\n    if (params.onStateChange)\n      this.on(EventType.StateChange, params.onStateChange);\n\n    /**\n     * @deprecated Use camelCase'd versions instead.\n     */\n    if (params.onload && !params.onLoad) this.on(EventType.Load, params.onload);\n    if (params.onloaderror && !params.onLoadError)\n      this.on(EventType.LoadError, params.onloaderror);\n    if (params.onplay && !params.onPlay) this.on(EventType.Play, params.onplay);\n    if (params.onpause && !params.onPause)\n      this.on(EventType.Pause, params.onpause);\n    if (params.onstop && !params.onStop) this.on(EventType.Stop, params.onstop);\n    if (params.onloop && !params.onLoop) this.on(EventType.Loop, params.onloop);\n    if (params.onstatechange && !params.onStateChange)\n      this.on(EventType.StateChange, params.onstatechange);\n\n    // Hook up the task queue\n    this.taskQueue = new TaskQueueManager(this.eventManager);\n\n    this.init({\n      src: this.src,\n      buffer: this.buffer,\n      autoplay: params.autoplay,\n      animations: params.animations,\n      stateMachines: params.stateMachines,\n      artboard: params.artboard,\n      useOffscreenRenderer: params.useOffscreenRenderer,\n    });\n  }\n\n  // Alternative constructor to build a Rive instance from an interface/object\n  public static new(params: RiveParameters): Rive {\n    console.warn(\n      \"This function is deprecated: please use `new Rive({})` instead\"\n    );\n    return new Rive(params);\n  }\n\n  // Initializes the Rive object either from constructor or load()\n  private init({\n    src,\n    buffer,\n    animations,\n    stateMachines,\n    artboard,\n    autoplay = false,\n    useOffscreenRenderer = false,\n  }: RiveLoadParameters): void {\n    this.src = src;\n    this.buffer = buffer;\n\n    // If no source file url specified, it's a bust\n    if (!this.src && !this.buffer) {\n      throw new Error(Rive.missingErrorMessage);\n    }\n\n    // List of animations that should be initialized.\n    const startingAnimationNames = mapToStringArray(animations);\n\n    // List of state machines that should be initialized\n    const startingStateMachineNames = mapToStringArray(stateMachines);\n\n    // Ensure loaded is marked as false if loading new file\n    this.loaded = false;\n    this.readyForPlaying = false;\n\n    // Ensure the runtime is loaded\n    RuntimeLoader.awaitInstance()\n      .then((runtime) => {\n        this.runtime = runtime;\n\n        // Get the canvas where you want to render the animation and create a renderer\n        this.renderer = this.runtime.makeRenderer(\n          this.canvas,\n          useOffscreenRenderer\n        );\n\n        // Initial size adjustment based on devicePixelRatio if no width/height are\n        // specified explicitly\n        if (!(this.canvas.width || this.canvas.height)) {\n          this.resizeDrawingSurfaceToCanvas();\n        }\n\n        // Load Rive data from a source uri or a data buffer\n        this.initData(\n          artboard,\n          startingAnimationNames,\n          startingStateMachineNames,\n          autoplay\n        )\n          .then(() => this.setupRiveListeners())\n          .catch((e) => {\n            console.error(e);\n          });\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n  }\n\n  private setupRiveListeners(): void {\n    if (!this.shouldDisableRiveListeners) {\n      const activeStateMachines = (this.animator.stateMachines || [])\n        .filter((sm) => sm.playing && this.runtime.hasListeners(sm.instance))\n        .map((sm) => sm.instance);\n      this.eventCleanup = registerTouchInteractions({\n        canvas: this.canvas,\n        artboard: this.artboard,\n        stateMachines: activeStateMachines,\n        renderer: this.renderer,\n        rive: this.runtime,\n        fit: this._layout.runtimeFit(this.runtime),\n        alignment: this._layout.runtimeAlignment(this.runtime),\n      });\n    }\n  }\n\n  // Initializes runtime with Rive data and preps for playing\n  private async initData(\n    artboardName: string,\n    animationNames: string[],\n    stateMachineNames: string[],\n    autoplay: boolean\n  ): Promise<void> {\n    // Load the buffer from the src if provided\n    if (this.src) {\n      this.buffer = await loadRiveFile(this.src);\n    }\n    // Load the Rive file\n    this.file = await this.runtime.load(new Uint8Array(this.buffer));\n\n    if (this.file) {\n      // Initialize and draw frame\n      this.initArtboard(\n        artboardName,\n        animationNames,\n        stateMachineNames,\n        autoplay\n      );\n\n      // Everything's set up, emit a load event\n      this.loaded = true;\n      this.eventManager.fire({\n        type: EventType.Load,\n        data: this.src ?? \"buffer\",\n      });\n\n      // Flag ready for playback commands and clear the task queue; this order\n      // is important or it may infinitely recurse\n      this.readyForPlaying = true;\n      this.taskQueue.process();\n\n      this.drawFrame();\n\n      return Promise.resolve();\n    } else {\n      const msg = \"Problem loading file; may be corrupt!\";\n      console.warn(msg);\n      this.eventManager.fire({ type: EventType.LoadError, data: msg });\n      return Promise.reject(msg);\n    }\n  }\n\n  // Initialize for playback\n  private initArtboard(\n    artboardName: string,\n    animationNames: string[],\n    stateMachineNames: string[],\n    autoplay: boolean\n  ): void {\n    // Fetch the artboard\n    const rootArtboard = artboardName\n      ? this.file.artboardByName(artboardName)\n      : this.file.defaultArtboard();\n\n    // Check we have a working artboard\n    if (!rootArtboard) {\n      const msg = \"Invalid artboard name or no default artboard\";\n      console.warn(msg);\n      this.eventManager.fire({ type: EventType.LoadError, data: msg });\n      return;\n    }\n\n    this.artboard = rootArtboard;\n\n    // Check that the artboard has at least 1 animation\n    if (this.artboard.animationCount() < 1) {\n      const msg = \"Artboard has no animations\";\n      this.eventManager.fire({ type: EventType.LoadError, data: msg });\n      throw msg;\n    }\n\n    // Initialize the animator\n    this.animator = new Animator(\n      this.runtime,\n      this.artboard,\n      this.eventManager\n    );\n\n    // Initialize the animations; as loaded hasn't happened yet, we need to\n    // suppress firing the play/pause events until the load event has fired. To\n    // do this we tell the animator to suppress firing events, and add event\n    // firing to the task queue.\n    let instanceNames: string[];\n    if (animationNames.length > 0 || stateMachineNames.length > 0) {\n      instanceNames = animationNames.concat(stateMachineNames);\n      this.animator.add(instanceNames, autoplay, false);\n    } else {\n      instanceNames = [this.animator.atLeastOne(autoplay, false)];\n    }\n    // Queue up firing the playback events\n    this.taskQueue.add({\n      event: {\n        type: autoplay ? EventType.Play : EventType.Pause,\n        data: instanceNames,\n      },\n    });\n  }\n\n  // Draws the current artboard frame\n  public drawFrame() {\n    this.startRendering();\n  }\n\n  // Tracks the last timestamp at which the animation was rendered. Used only in\n  // draw().\n  private lastRenderTime: number;\n\n  // Tracks the current animation frame request\n  private frameRequestId: number | null;\n\n  /**\n   * Used be draw to track when a second of active rendering time has passed.\n   * Used for debugging purposes\n   */\n  private renderSecondTimer = 0;\n\n  /**\n   * Draw rendering loop; renders animation frames at the correct time interval.\n   * @param time the time at which to render a frame\n   */\n  private draw(time: number, onSecond?: VoidCallback): void {\n    const before = performance.now();\n\n    // Clear the frameRequestId, as we're now rendering a fresh frame\n    this.frameRequestId = null;\n\n    // On the first pass, make sure lastTime has a valid value\n    if (!this.lastRenderTime) {\n      this.lastRenderTime = time;\n    }\n\n    // Handle the onSecond callback\n    this.renderSecondTimer += time - this.lastRenderTime;\n    if (this.renderSecondTimer > 5000) {\n      this.renderSecondTimer = 0;\n      onSecond?.();\n    }\n\n    // Calculate the elapsed time between frames in seconds\n    const elapsedTime = (time - this.lastRenderTime) / 1000;\n    this.lastRenderTime = time;\n\n    // - Advance non-paused animations by the elapsed number of seconds\n    // - Advance any animations that require scrubbing\n    // - Advance to the first frame even when autoplay is false\n    const activeAnimations = this.animator.animations\n      .filter((a) => a.playing || a.needsScrub)\n      // The scrubbed animations must be applied first to prevent weird artifacts\n      // if the playing animations conflict with the scrubbed animating attribuates.\n      .sort((first) => (first.needsScrub ? -1 : 1));\n    for (const animation of activeAnimations) {\n      animation.advance(elapsedTime);\n      if (animation.instance.didLoop) {\n        animation.loopCount += 1;\n      }\n      animation.apply(1.0);\n    }\n\n    // - Advance non-paused state machines by the elapsed number of seconds\n    // - Advance to the first frame even when autoplay is false\n    const activeStateMachines = this.animator.stateMachines.filter(\n      (a) => a.playing\n    );\n    for (const stateMachine of activeStateMachines) {\n      stateMachine.advance(elapsedTime);\n      // stateMachine.instance.apply(this.artboard);\n    }\n\n    // Once the animations have been applied to the artboard, advance it\n    // by the elapsed time.\n    this.artboard.advance(elapsedTime);\n\n    const { renderer } = this;\n    // Canvas must be wiped to prevent artifacts\n    renderer.clear();\n    renderer.save();\n\n    // Update the renderer alignment if necessary\n    this.alignRenderer();\n\n    this.artboard.draw(renderer);\n\n    renderer.restore();\n    renderer.flush();\n\n    // Check for any animations that looped\n    this.animator.handleLooping();\n\n    // Check for any state machines that had a state change\n    this.animator.handleStateChanges();\n\n    // Add duration to create frame to durations array\n    this.frameCount++;\n    const after = performance.now();\n    this.frameTimes.push(after);\n    this.durations.push(after - before);\n    while (this.frameTimes[0] <= after - 1000) {\n      this.frameTimes.shift();\n      this.durations.shift();\n    }\n\n    // Calling requestAnimationFrame will rerun draw() at the correct rate:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_animations\n    if (this.animator.isPlaying) {\n      // Request a new rendering frame\n      this.startRendering();\n    } else if (this.animator.isPaused) {\n      // Reset the end time so on playback it starts at the correct frame\n      this.lastRenderTime = 0;\n    } else if (this.animator.isStopped) {\n      // Reset animation instances, artboard and time\n      // TODO: implement this properly when we have instancing\n      // this.initArtboard();\n      // this.drawFrame();\n      this.lastRenderTime = 0;\n    }\n  }\n\n  /**\n   * Align the renderer\n   */\n  private alignRenderer(): void {\n    const { renderer, runtime, _layout, artboard } = this;\n    // Align things up safe in the knowledge we can restore if changed\n    renderer.align(\n      _layout.runtimeFit(runtime),\n      _layout.runtimeAlignment(runtime),\n      {\n        minX: _layout.minX,\n        minY: _layout.minY,\n        maxX: _layout.maxX,\n        maxY: _layout.maxY,\n      },\n      artboard.bounds\n    );\n  }\n\n  public get fps() {\n    return this.durations.length;\n  }\n\n  public get frameTime() {\n    if (this.durations.length === 0) {\n      return 0;\n    }\n    return (\n      this.durations.reduce((a, b) => a + b, 0) / this.durations.length\n    ).toFixed(4);\n  }\n\n  /**\n   * Cleans up all Wasm-generated objects that need to be manually destroyed:\n   * artboard instances, animation instances, state machine instances,\n   * renderer instance, file and runtime.\n   *\n   * Once this is called, you will need to initialise a new instance of the\n   * Rive class\n   */\n  public cleanup() {\n    // Stop the renderer if it hasn't already been stopped.\n    this.stopRendering();\n    // Clean up any artboard, animation or state machine instances.\n    this.cleanupInstances();\n    // Delete the renderer\n    this.renderer?.delete();\n    this.renderer = null;\n    // Delete the rive file\n    this.file?.delete();\n    this.file = null;\n  }\n\n  /**\n   * Cleans up any Wasm-generated objects that need to be manually destroyed:\n   * artboard instances, animation instances, state machine instances.\n   *\n   * Once this is called, things will need to be reinitialized or bad things\n   * might happen.\n   */\n  public cleanupInstances() {\n    if (this.eventCleanup !== null) {\n      this.eventCleanup();\n    }\n    // Delete all animation and state machine instances\n    this.stop();\n    if (this.artboard) {\n      this.artboard.delete();\n      this.artboard = null;\n    }\n  }\n\n  // Plays specified animations; if none specified, it unpauses everything.\n  public play(animationNames?: string | string[], autoplay?: true): void {\n    animationNames = mapToStringArray(animationNames);\n\n    // If the file's not loaded, queue up the play\n    if (!this.readyForPlaying) {\n      this.taskQueue.add({\n        action: () => this.play(animationNames, autoplay),\n      });\n      return;\n    }\n    this.animator.play(animationNames);\n    if (this.eventCleanup) {\n      this.eventCleanup();\n    }\n    this.setupRiveListeners();\n    this.startRendering();\n  }\n\n  // Pauses specified animations; if none specified, pauses all.\n  public pause(animationNames?: string | string[]): void {\n    animationNames = mapToStringArray(animationNames);\n\n    // If the file's not loaded, early out, nothing to pause\n    if (!this.readyForPlaying) {\n      this.taskQueue.add({\n        action: () => this.pause(animationNames),\n      });\n      return;\n    }\n    this.animator.pause(animationNames);\n  }\n\n  public scrub(animationNames?: string | string[], value?: number): void {\n    animationNames = mapToStringArray(animationNames);\n\n    // If the file's not loaded, early out, nothing to pause\n    if (!this.readyForPlaying) {\n      this.taskQueue.add({\n        action: () => this.scrub(animationNames, value),\n      });\n      return;\n    }\n\n    // Scrub the animation time; we draw a single frame here so that if\n    // nothing's currently playing, the scrubbed animation is still rendered/\n    this.animator.scrub(animationNames, value || 0);\n    this.drawFrame();\n  }\n\n  // Stops specified animations; if none specifies, stops them all.\n  public stop(animationNames?: string | string[] | undefined): void {\n    animationNames = mapToStringArray(animationNames);\n    // If the file's not loaded, early out, nothing to pause\n    if (!this.readyForPlaying) {\n      this.taskQueue.add({\n        action: () => this.stop(animationNames),\n      });\n      return;\n    }\n    this.animator.stop(animationNames);\n    if (this.eventCleanup) {\n      this.eventCleanup();\n    }\n  }\n\n  /**\n   * Resets the animation\n   * @param artboard the name of the artboard, or default if none given\n   * @param animations the names of animations for playback\n   * @param stateMachines the names of state machines for playback\n   * @param autoplay whether to autoplay when reset, defaults to false\n   *\n   */\n  public reset(params?: RiveResetParameters): void {\n    // Get the current artboard, animations, state machines, and playback states\n    const artBoardName = params?.artboard;\n    const animationNames = mapToStringArray(params?.animations);\n    const stateMachineNames = mapToStringArray(params?.stateMachines);\n    const autoplay = params?.autoplay ?? false;\n\n    // Stop everything and clean up\n    this.cleanupInstances();\n\n    // Reinitialize an artboard instance with the state\n    this.initArtboard(\n      artBoardName,\n      animationNames,\n      stateMachineNames,\n      autoplay\n    );\n    this.taskQueue.process();\n  }\n\n  // Loads a new Rive file, keeping listeners in place\n  public load(params: RiveLoadParameters): void {\n    // Stop all animations\n    this.stop();\n    // Reinitialize\n    this.init(params);\n  }\n\n  // Sets a new layout\n  public set layout(layout: Layout) {\n    this._layout = layout;\n    // If the maxX or maxY are 0, then set them to the canvas width and height\n    if (!layout.maxX || !layout.maxY) {\n      this.resizeToCanvas();\n    }\n    if (this.loaded && !this.animator.isPlaying) {\n      this.drawFrame();\n    }\n  }\n\n  /**\n   * Returns the current layout. Note that layout should be treated as\n   * immutable. If you want to change the layout, create a new one use the\n   * layout setter\n   */\n  public get layout() {\n    return this._layout;\n  }\n\n  /**\n   * Sets the layout bounds to the current canvas size; this is typically called\n   * when the canvas is resized\n   */\n  public resizeToCanvas() {\n    this._layout = this.layout.copyWith({\n      minX: 0,\n      minY: 0,\n      maxX: this.canvas.width,\n      maxY: this.canvas.height,\n    });\n  }\n\n  /**\n   * Accounts for devicePixelRatio as a multiplier to render the size of the canvas drawing surface.\n   * Uses the size of the backing canvas to set new width/height attributes. Need to re-render\n   * and resize the layout to match the new drawing surface afterwards.\n   * Useful function for consumers to include in a window resize listener\n   */\n  public resizeDrawingSurfaceToCanvas() {\n    if (this.canvas instanceof HTMLCanvasElement && !!window) {\n      const { width, height } = this.canvas.getBoundingClientRect();\n      const dpr = window.devicePixelRatio || 1;\n      this.canvas.width = dpr * width;\n      this.canvas.height = dpr * height;\n      this.startRendering();\n      this.resizeToCanvas();\n    }\n  }\n\n  // Returns the animation source, which may be undefined\n  public get source(): string {\n    return this.src;\n  }\n\n  /**\n   * Returns the name of the active artboard\n   */\n  public get activeArtboard(): string {\n    return this.artboard ? this.artboard.name : \"\";\n  }\n\n  // Returns a list of animation names on the chosen artboard\n  public get animationNames(): string[] {\n    // If the file's not loaded, we got nothing to return\n    if (!this.loaded) {\n      return [];\n    }\n    const animationNames: string[] = [];\n    for (let i = 0; i < this.artboard.animationCount(); i++) {\n      animationNames.push(this.artboard.animationByIndex(i).name);\n    }\n    return animationNames;\n  }\n\n  /**\n   * Returns a list of state machine names from the current artboard\n   */\n  public get stateMachineNames(): string[] {\n    // If the file's not loaded, we got nothing to return\n    if (!this.loaded) {\n      return [];\n    }\n    const stateMachineNames: string[] = [];\n    for (let i = 0; i < this.artboard.stateMachineCount(); i++) {\n      stateMachineNames.push(this.artboard.stateMachineByIndex(i).name);\n    }\n    return stateMachineNames;\n  }\n\n  /**\n   * Returns the inputs for the specified instanced state machine, or an empty\n   * list if the name is invalid or the state machine is not instanced\n   * @param name the state machine name\n   * @returns the inputs for the named state machine\n   */\n  public stateMachineInputs(name: string): StateMachineInput[] {\n    // If the file's not loaded, early out, nothing to pause\n    if (!this.loaded) {\n      return;\n    }\n    const stateMachine = this.animator.stateMachines.find(\n      (m) => m.name === name\n    );\n    return stateMachine?.inputs;\n  }\n\n  // Returns a list of playing machine names\n  public get playingStateMachineNames(): string[] {\n    // If the file's not loaded, we got nothing to return\n    if (!this.loaded) {\n      return [];\n    }\n    return this.animator.stateMachines\n      .filter((m) => m.playing)\n      .map((m) => m.name);\n  }\n\n  // Returns a list of playing animation names\n  public get playingAnimationNames(): string[] {\n    // If the file's not loaded, we got nothing to return\n    if (!this.loaded) {\n      return [];\n    }\n    return this.animator.animations.filter((a) => a.playing).map((a) => a.name);\n  }\n\n  // Returns a list of paused animation names\n  public get pausedAnimationNames(): string[] {\n    // If the file's not loaded, we got nothing to return\n    if (!this.loaded) {\n      return [];\n    }\n    return this.animator.animations\n      .filter((a) => !a.playing)\n      .map((a) => a.name);\n  }\n\n  /**\n   *  Returns a list of paused machine names\n   * @returns a list of state machine names that are paused\n   */\n  public get pausedStateMachineNames(): string[] {\n    // If the file's not loaded, we got nothing to return\n    if (!this.loaded) {\n      return [];\n    }\n    return this.animator.stateMachines\n      .filter((m) => !m.playing)\n      .map((m) => m.name);\n  }\n\n  /**\n   * @returns true if any animation is playing\n   */\n  public get isPlaying(): boolean {\n    return this.animator.isPlaying;\n  }\n\n  /**\n   * @returns true if all instanced animations are paused\n   */\n  public get isPaused(): boolean {\n    return this.animator.isPaused;\n  }\n\n  /**\n   * @returns true if no animations are playing or paused\n   */\n  public get isStopped(): boolean {\n    return this.animator.isStopped;\n  }\n\n  /**\n   * @returns the bounds of the current artboard, or undefined if the artboard\n   * isn't loaded yet.\n   */\n  public get bounds(): Bounds {\n    return this.artboard ? this.artboard.bounds : undefined;\n  }\n\n  /**\n   * Subscribe to Rive-generated events\n   * @param type the type of event to subscribe to\n   * @param callback callback to fire when the event occurs\n   */\n  public on(type: EventType, callback: EventCallback) {\n    this.eventManager.add({\n      type: type,\n      callback: callback,\n    });\n  }\n\n  /**\n   * Unsubscribes from a Rive-generated event\n   * @param callback the callback to unsubscribe from\n   */\n  public unsubscribe(type: EventType, callback: EventCallback) {\n    this.eventManager.remove({\n      type: type,\n      callback: callback,\n    });\n  }\n\n  /**\n   * Unsubscribes all listeners from an event type, or everything if no type is\n   * given\n   * @param type the type of event to unsubscribe from, or all types if\n   * undefined\n   */\n  public unsubscribeAll(type?: EventType) {\n    this.eventManager.removeAll(type);\n  }\n\n  /**\n   * Stops the rendering loop; this is different from pausing in that it doesn't\n   * change the state of any animation. It stops rendering from occurring. This\n   * is designed for situations such as when Rive isn't visible.\n   *\n   * The only way to start rendering again is to call `startRendering`.\n   * Animations that are marked as playing will start from the position that\n   * they would have been at if rendering had not been stopped.\n   */\n  public stopRendering() {\n    if (this.loaded && this.frameRequestId) {\n      if (this.runtime.cancelAnimationFrame) {\n        this.runtime.cancelAnimationFrame(this.frameRequestId);\n      } else {\n        cancelAnimationFrame(this.frameRequestId);\n      }\n      this.frameRequestId = null;\n    }\n  }\n\n  /**\n   * Starts the rendering loop if it has been previously stopped. If the\n   * renderer is already active, then this will have zero effect.\n   */\n  public startRendering() {\n    if (this.loaded && this.artboard && !this.frameRequestId) {\n      if (this.runtime.requestAnimationFrame) {\n        this.frameRequestId = this.runtime.requestAnimationFrame(\n          this.draw.bind(this)\n        );\n      } else {\n        this.frameRequestId = requestAnimationFrame(this.draw.bind(this));\n      }\n    }\n  }\n\n  /**\n   * Enables frames-per-second (FPS) reporting for the runtime\n   * If no callback is provided, Rive will append a fixed-position div at the top-right corner of\n   * the page with the FPS reading\n   * @param fpsCallback - Callback from the runtime during the RAF loop that supplies the FPS value\n   */\n  public enableFPSCounter(fpsCallback?: FPSCallback) {\n    this.runtime.enableFPSCounter(fpsCallback);\n  }\n\n  /**\n   * Disables frames-per-second (FPS) reporting for the runtime\n   */\n  public disableFPSCounter() {\n    this.runtime.disableFPSCounter();\n  }\n\n  /**\n   * Returns the contents of a Rive file: the artboards, animations, and state machines\n   */\n  public get contents(): RiveFileContents {\n    if (!this.loaded) {\n      return undefined;\n    }\n    const riveContents: RiveFileContents = {\n      artboards: [],\n    };\n    for (let i = 0; i < this.file.artboardCount(); i++) {\n      const artboard = this.file.artboardByIndex(i);\n      const artboardContents: ArtboardContents = {\n        name: artboard.name,\n        animations: [],\n        stateMachines: [],\n      };\n      for (let j = 0; j < artboard.animationCount(); j++) {\n        const animation = artboard.animationByIndex(j);\n        artboardContents.animations.push(animation.name);\n      }\n      for (let k = 0; k < artboard.stateMachineCount(); k++) {\n        const stateMachine = artboard.stateMachineByIndex(k);\n        const name = stateMachine.name;\n        const instance = new this.runtime.StateMachineInstance(\n          stateMachine,\n          artboard\n        );\n        const inputContents: StateMachineInputContents[] = [];\n        for (let l = 0; l < instance.inputCount(); l++) {\n          const input = instance.input(l);\n          inputContents.push({ name: input.name, type: input.type });\n        }\n        artboardContents.stateMachines.push({\n          name: name,\n          inputs: inputContents,\n        });\n      }\n      riveContents.artboards.push(artboardContents);\n    }\n    return riveContents;\n  }\n}\n\n/**\n * Contents of a state machine input\n */\ninterface StateMachineInputContents {\n  name: string;\n  type: StateMachineInputType;\n  initialValue?: boolean | number;\n}\n\n/**\n * Contents of a state machine\n */\ninterface StateMachineContents {\n  name: string;\n  inputs: StateMachineInputContents[];\n}\n\n/**\n * Contents of an artboard\n */\ninterface ArtboardContents {\n  animations: string[];\n  stateMachines: StateMachineContents[];\n  name: string;\n}\n\n/**\n * contents of a Rive file\n */\ninterface RiveFileContents {\n  artboards?: ArtboardContents[];\n}\n\n// Loads Rive data from a URI via fetch.\nconst loadRiveFile = async (src: string): Promise<ArrayBuffer> => {\n  const req = new Request(src);\n  const res = await fetch(req);\n  const buffer = await res.arrayBuffer();\n  return buffer;\n};\n\n// #endregion\n\n// #region utility functions\n\n/*\n * Utility function to ensure an object is a string array\n */\nconst mapToStringArray = (obj?: string[] | string | undefined): string[] => {\n  if (typeof obj === \"string\") {\n    return [obj];\n  } else if (obj instanceof Array) {\n    return obj;\n  }\n  // If obj is undefined, return empty array\n  return [];\n};\n\n// #endregion\n\n// #region testing utilities\n\n// Exports to only be used for tests\nexport const Testing = {\n  EventManager: EventManager,\n  TaskQueueManager: TaskQueueManager,\n};\n\n// #endregion\n", "Object.defineProperty(exports,\"__esModule\",{value:!0});var e=require(\"react\"),n=require(\"@rive-app/canvas\");function t(e){return e&&\"object\"==typeof e&&\"default\"in e?e:{default:e}}var r=t(e),i=function(){return i=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var i in n=arguments[t])Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);return e},i.apply(this,arguments)};function a(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)n.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(t[r[i]]=e[r[i]])}return t}function o(){var e=\"undefined\"!=typeof window&&\"number\"==typeof window.devicePixelRatio?window.devicePixelRatio:1;return Math.min(Math.max(1,e),3)}var s=function(){function e(){}return e.prototype.observe=function(){},e.prototype.unobserve=function(){},e.prototype.disconnect=function(){},e}();var u=globalThis.ResizeObserver||s,c=void 0!==globalThis.ResizeObserver,f=!c;function d(n,t){void 0===t&&(t=!0);var r=e.useState({width:0,height:0}),i=r[0],a=r[1];e.useEffect(function(){if(\"undefined\"!=typeof window&&t){var e=function(){a({width:window.innerWidth,height:window.innerHeight})};return f&&(e(),window.addEventListener(\"resize\",e)),function(){return window.removeEventListener(\"resize\",e)}}},[]);var o,s,d,l=e.useRef(new u((o=function(e){c&&a({width:e[e.length-1].contentRect.width,height:e[e.length-1].contentRect.height})},s=0,d=0,function(){for(var e=this,n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];clearTimeout(d),d=window.setTimeout(function(){return o.apply(e,n)},s)})));return e.useEffect(function(){var e=l.current;if(t){var r=n.current;return n.current&&c&&e.observe(n.current),function(){e.disconnect(),r&&c&&e.unobserve(r)}}e.disconnect()},[n,l]),i}var l={useDevicePixelRatio:!0,fitCanvasToArtboardHeight:!1,useOffscreenRenderer:!0,shouldResizeCanvasToContainer:!0};function v(e){return Object.assign({},l,e)}function h(n){var t=n.riveLoaded,r=void 0!==t&&t,i=n.canvasRef,a=n.containerRef,s=n.options,u=void 0===s?{}:s,c=n.onCanvasHasResized,f=n.artboardBounds,l=v(u),h=e.useState({height:0,width:0}),p=h[0],w=p.height,R=p.width,g=h[1],b=e.useState({height:0,width:0}),y=b[0],m=y.height,C=y.width,O=b[1],x=e.useState(!0),E=x[0],P=x[1],T=l.fitCanvasToArtboardHeight,L=l.shouldResizeCanvasToContainer,z=l.useDevicePixelRatio,j=d(a,L),M=function(){var n=o(),t=e.useState(n),r=t[0],i=t[1];return e.useEffect(function(){if(\"undefined\"!=typeof window&&\"matchMedia\"in window){var e=function(){var e=o();i(e)},n=window.matchMedia(\"screen and (resolution: \".concat(r,\"dppx)\"));return n.hasOwnProperty(\"addEventListener\")?n.addEventListener(\"change\",e):n.addListener(e),function(){n.hasOwnProperty(\"removeEventListener\")?n.removeEventListener(\"change\",e):n.removeListener(e)}}},[r]),r}(),S=null!=f?f:{},H=S.maxX,k=S.maxY,D=e.useCallback(function(){var e,n,t,r,i=null!==(n=null===(e=a.current)||void 0===e?void 0:e.clientWidth)&&void 0!==n?n:0,o=null!==(r=null===(t=a.current)||void 0===t?void 0:t.clientHeight)&&void 0!==r?r:0;return T&&f?{width:i,height:i*(f.maxY/f.maxX)}:{width:i,height:o}},[a,T,H,k]);e.useEffect(function(){if(L&&a.current&&r){var e=D(),n=e.width,t=e.height,o=!1;if(i.current){var s=n!==R||t!==w;if(l.fitCanvasToArtboardHeight&&s&&(a.current.style.height=t+\"px\",o=!0),l.useDevicePixelRatio){if(s||(n*M!==C||t*M!==m)){var u=M*n,f=M*t;i.current.width=u,i.current.height=f,i.current.style.width=n+\"px\",i.current.style.height=t+\"px\",O({width:u,height:f}),o=!0}}else s&&(i.current.width=n,i.current.height=t,O({width:n,height:t}),o=!0);g({width:n,height:t})}c&&(E||o)&&c&&c(),E&&P(!1)}},[i,a,j,M,D,E,P,m,C,w,R,c,L,T,z,r])}function p(e){var n=e.setContainerRef,t=e.setCanvasRef,o=e.className,s=void 0===o?\"\":o,u=e.style,c=e.children,f=a(e,[\"setContainerRef\",\"setCanvasRef\",\"className\",\"style\",\"children\"]),d=i({width:\"100%\",height:\"100%\"},u);return r.default.createElement(\"div\",i({ref:n,className:s},!s&&{style:d}),r.default.createElement(\"canvas\",i({ref:t,style:{verticalAlign:\"top\",width:0,height:0}},f),c))}function w(t,a){void 0===a&&(a={});var o=e.useRef(null),s=e.useRef(null),u=e.useState(null),c=u[0],f=u[1],d=Boolean(t),l=v(a),w=e.useCallback(function(){c&&(c.startRendering(),c.resizeToCanvas())},[c]);h({riveLoaded:!!c,canvasRef:o,containerRef:s,options:l,onCanvasHasResized:w,artboardBounds:null==c?void 0:c.bounds});var R=e.useCallback(function(e){if(e&&t&&d){var r=l.useOffscreenRenderer,a=new n.Rive(i(i({useOffscreenRenderer:r},t),{canvas:e}));a.on(n.EventType.Load,function(){o.current?f(a):a.cleanup()})}else null===e&&o.current&&(o.current.height=0,o.current.width=0);o.current=e},[d]),g=e.useCallback(function(e){s.current=e},[]);e.useEffect(function(){var e=new IntersectionObserver(function(e){e[0].isIntersecting?c&&c.startRendering():c&&c.stopRendering()});return o.current&&e.observe(o.current),function(){e.disconnect()}},[c]),e.useEffect(function(){return function(){c&&(c.cleanup(),f(null))}},[c]);var b=null==t?void 0:t.animations;e.useEffect(function(){c&&b&&(c.isPlaying?(c.stop(c.animationNames),c.play(b)):c.isPaused&&(c.stop(c.animationNames),c.pause(b)))},[b,c]);var y=e.useCallback(function(e){return r.default.createElement(p,i({setContainerRef:g,setCanvasRef:R},e))},[R,g]);return{canvas:o.current,container:s.current,setCanvasRef:R,setContainerRef:g,rive:c,RiveComponent:y}}exports.default=function(e){var n=e.src,t=e.artboard,o=e.animations,s=e.stateMachines,u=e.layout,c=e.useOffscreenRenderer,f=void 0===c||c,d=e.shouldDisableRiveListeners,l=void 0!==d&&d,v=e.shouldResizeCanvasToContainer,h=void 0===v||v,p=e.children,R=a(e,[\"src\",\"artboard\",\"animations\",\"stateMachines\",\"layout\",\"useOffscreenRenderer\",\"shouldDisableRiveListeners\",\"shouldResizeCanvasToContainer\",\"children\"]),g=w({src:n,artboard:t,animations:o,layout:u,stateMachines:s,autoplay:!0,shouldDisableRiveListeners:l},{useOffscreenRenderer:f,shouldResizeCanvasToContainer:h}).RiveComponent;return r.default.createElement(g,i({},R),p)},exports.useResizeCanvas=h,exports.useRive=w,exports.useStateMachineInput=function(t,r,i,a){var o=e.useState(null),s=o[0],u=o[1];return e.useEffect(function(){function e(){if(t&&r&&i||u(null),t&&r&&i){var e=t.stateMachineInputs(r);if(e){var n=e.find(function(e){return e.name===i});void 0!==a&&n&&(n.value=a),u(n||null)}}else u(null)}e(),t&&t.on(n.EventType.Play,function(){e()})},[t]),s},Object.keys(n).forEach(function(e){\"default\"===e||exports.hasOwnProperty(e)||Object.defineProperty(exports,e,{enumerable:!0,get:function(){return n[e]}})});\n"],
  "mappings": "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",
  "names": ["Rive", "_a", "_b", "module", "exports", "Fit", "Alignment", "Layout", "RuntimeLoader", "Animation", "StateMachineInputType", "StateMachineInput", "StateMachine", "Animator", "EventType", "LoopType", "EventManager", "TaskQueueManager", "e", "n", "t", "r", "i", "a", "o", "s", "d", "l", "u", "c", "f", "h", "p", "w", "v"]
}
