(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["rive"] = factory();
	else
		root["rive"] = factory();
})(this, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ([
/* 0 */,
/* 1 */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });

var Rive = (() => {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  
  return (
function(Rive) {
  Rive = Rive || {};


var h;h||(h=typeof Rive !== 'undefined' ? Rive : {});var aa,ba;h.ready=new Promise(function(a,b){aa=a;ba=b});
function ca(){function a(g){const k=d;c=b=0;d=new Map;k.forEach(n=>{try{n(g)}catch(q){console.error(q)}});this.ae();e&&e.re()}let b=0,c=0,d=new Map,e=null,f=null;this.requestAnimationFrame=function(g){b||(b=requestAnimationFrame(a.bind(this)));const k=++c;d.set(k,g);return k};this.cancelAnimationFrame=function(g){d.delete(g);b&&0==d.size&&(cancelAnimationFrame(b),b=0)};this.pe=function(g){f&&(document.body.remove(f),f=null);g||(f=document.createElement("div"),f.style.backgroundColor="black",f.style.position=
"fixed",f.style.right=0,f.style.top=0,f.style.color="white",f.style.padding="4px",f.innerHTML="RIVE FPS",g=function(k){f.innerHTML="RIVE FPS "+k.toFixed(1)},document.body.appendChild(f));e=new function(){let k=0,n=0;this.re=function(){var q=performance.now();n?(++k,q-=n,1E3<q&&(g(1E3*k/q),k=n=0)):(n=q,k=0)}}};this.ae=function(){}}
function da(){console.assert(!0);const a=new Map;let b=-Infinity;this.push=function(c){c=c+255>>8;a.has(c)&&clearTimeout(a.get(c));a.set(c,setTimeout(function(){a.delete(c);0==a.length?b=-Infinity:c==b&&(b=Math.max(...a.keys()),console.assert(b<c))},1E3));b=Math.max(c,b);return b<<8}}
h.onRuntimeInitialized=function(){function a(l){this.hd=l;this.ee=l.getContext("2d");this.ie=e;this.od=[];this.yd=0;this.clear=function(){console.assert(0==this.yd);this.od=[];f.delete(this)};this.save=function(){++this.yd;this.od.push(e.save.bind(e))};this.restore=function(){0<this.yd&&(this.od.push(e.restore.bind(e)),--this.yd)};this.transform=function(p){this.od.push(e.transform.bind(e,p))};this.align=function(p,u,x,C){this.od.push(e.align.bind(e,p,u,x,C))};this.flush=function(){console.assert(0==
this.yd);f.add(this);d&&c()}}function b(l){var p={alpha:1,depth:0,stencil:8,antialias:0,premultipliedAlpha:1,preserveDrawingBuffer:0,preferLowPowerToHighPerformance:0,failIfMajorPerformanceCaveat:0,enableExtensionsByDefault:1,explicitSwapControl:0,renderViaOffscreenBackBuffer:0},u=l.getContext("webgl2",p);u||(u=l.getContext("webgl",p));var x=u,C=ea(fa),G={Me:C,attributes:p,version:p.Ne,Md:x};x.canvas&&(x.canvas.Le=G);fa[C]=G;("undefined"==typeof p.oe||p.oe)&&ha(G);m=fa[C];h.ke=t=m&&m.Md;p=g(l.width,
l.height);p.ge=C;p.hd=l;p.Vd=l.width;p.Ud=l.height;p.fe=u;return p}function c(){if(e){var l=e.he,p=0,u=0,x=0,C=Array(f.size),G=0;for(var D of f)D.vd=Math.min(D.hd.width,l),D.ud=Math.min(D.hd.height,l),D.Nd=D.ud*D.vd,p=Math.max(p,D.vd),u=Math.max(u,D.ud),x+=D.Nd,C[G++]=D;f.clear();if(!(0>=x)){p=1<<(0>=p?0:32-Math.clz32(p-1));for(u=1<<(0>=u?0:32-Math.clz32(u-1));u*p<x;)p<=u?p*=2:u*=2;p=Math.min(p,l);p=Math.min(u,l);C.sort((Y,bb)=>bb.Nd-Y.Nd);x=new h.DynamicRectanizer(l);for(D=0;D<C.length;){x.reset(p,
u);for(G=D;G<C.length;++G){var I=C[G],E=x.addRect(I.vd,I.ud);if(0>E){console.assert(G>D);break}I.Cd=E&65535;I.Dd=E>>16}I=n.push(x.drawWidth());E=q.push(x.drawHeight());console.assert(I>=x.drawWidth());console.assert(E>=x.drawHeight());console.assert(I<=l);console.assert(E<=l);e.hd.width!=I&&(e.hd.width=I);e.hd.height!=E&&(e.hd.height=E);e.clear();for(I=D;I<G;++I){E=C[I];e.saveClipRect(E.Cd,E.Dd,E.Cd+E.vd,E.Dd+E.ud);let Y=new h.Mat2D;Y.xx=E.vd/E.hd.width;Y.yy=E.ud/E.hd.height;Y.xy=Y.yx=0;Y.tx=E.Cd;
Y.ty=E.Dd;e.transform(Y);for(const bb of E.od)bb();e.restoreClipRect();E.od=[]}for(e.flush();D<G;++D)I=C[D],E=I.ee,E.globalCompositeOperation="copy",E.drawImage(e.hd,I.Cd,I.Dd,I.vd,I.ud,0,0,I.hd.width,I.hd.height);D=G}}}}const d=navigator.userAgent.match(/firefox|fxios/i);let e=null;const f=new Set,g=h.makeRenderer;h.makeRenderer=function(l,p){return p?(e||(e=b(document.createElement("canvas")),p=e.fe,e.he=Math.min(p.getParameter(p.MAX_RENDERBUFFER_SIZE),p.getParameter(p.MAX_TEXTURE_SIZE))),new a(l)):
b(l)};const k=h.Artboard.prototype.draw;h.Artboard.prototype.draw=function(l){l.od?l.od.push(k.bind(this,l.ie)):k.call(this,l)};const n=new da,q=new da,r=new ca;Rive.requestAnimationFrame=r.requestAnimationFrame.bind(r);Rive.cancelAnimationFrame=r.cancelAnimationFrame.bind(r);Rive.enableFPSCounter=r.pe.bind(r);r.ae=c;let v=Rive.load;Rive.load=function(l){return Promise.resolve(v(l))};const z=h.WebGLRenderer.prototype.clear;h.WebGLRenderer.prototype.clear=function(){m=fa[this.ge];h.ke=t=m&&m.Md;const l=
this.hd;if(this.Vd!=l.width||this.Ud!=l.height)this.resize(l.width,l.height),this.Vd=l.width,this.Ud=l.height;z.call(this)}};var ia=Object.assign({},h),ja="./this.program",ka="object"==typeof window,la="function"==typeof importScripts,w="",ma,na;
if(ka||la)la?w=self.location.href:"undefined"!=typeof document&&document.currentScript&&(w=document.currentScript.src),_scriptDir&&(w=_scriptDir),0!==w.indexOf("blob:")?w=w.substr(0,w.replace(/[?#].*/,"").lastIndexOf("/")+1):w="",la&&(na=a=>{var b=new XMLHttpRequest;b.open("GET",a,!1);b.responseType="arraybuffer";b.send(null);return new Uint8Array(b.response)}),ma=(a,b,c)=>{var d=new XMLHttpRequest;d.open("GET",a,!0);d.responseType="arraybuffer";d.onload=()=>{200==d.status||0==d.status&&d.response?
b(d.response):c()};d.onerror=c;d.send(null)};var oa=h.print||console.log.bind(console),pa=h.printErr||console.warn.bind(console);Object.assign(h,ia);ia=null;h.thisProgram&&(ja=h.thisProgram);var qa;h.wasmBinary&&(qa=h.wasmBinary);var noExitRuntime=h.noExitRuntime||!0;"object"!=typeof WebAssembly&&ra("no native wasm support detected");var sa,ta=!1,ua="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;
function va(a,b,c){var d=b+c;for(c=b;a[c]&&!(c>=d);)++c;if(16<c-b&&a.buffer&&ua)return ua.decode(a.subarray(b,c));for(d="";b<c;){var e=a[b++];if(e&128){var f=a[b++]&63;if(192==(e&224))d+=String.fromCharCode((e&31)<<6|f);else{var g=a[b++]&63;e=224==(e&240)?(e&15)<<12|f<<6|g:(e&7)<<18|f<<12|g<<6|a[b++]&63;65536>e?d+=String.fromCharCode(e):(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023))}}else d+=String.fromCharCode(e)}return d}function wa(a,b){return a?va(y,a,b):""}
function xa(a,b,c,d){if(!(0<d))return 0;var e=c;d=c+d-1;for(var f=0;f<a.length;++f){var g=a.charCodeAt(f);if(55296<=g&&57343>=g){var k=a.charCodeAt(++f);g=65536+((g&1023)<<10)|k&1023}if(127>=g){if(c>=d)break;b[c++]=g}else{if(2047>=g){if(c+1>=d)break;b[c++]=192|g>>6}else{if(65535>=g){if(c+2>=d)break;b[c++]=224|g>>12}else{if(c+3>=d)break;b[c++]=240|g>>18;b[c++]=128|g>>12&63}b[c++]=128|g>>6&63}b[c++]=128|g&63}}b[c]=0;return c-e}
function ya(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);127>=d?b++:2047>=d?b+=2:55296<=d&&57343>=d?(b+=4,++c):b+=3}return b}var za,Aa,y,Ba,Ca,A,B,F,Da;function Ea(){var a=sa.buffer;za=a;h.HEAP8=Aa=new Int8Array(a);h.HEAP16=Ba=new Int16Array(a);h.HEAP32=A=new Int32Array(a);h.HEAPU8=y=new Uint8Array(a);h.HEAPU16=Ca=new Uint16Array(a);h.HEAPU32=B=new Uint32Array(a);h.HEAPF32=F=new Float32Array(a);h.HEAPF64=Da=new Float64Array(a)}var Fa,Ga=[],Ha=[],Ia=[];
function Ja(){var a=h.preRun.shift();Ga.unshift(a)}var Ka=0,La=null,Ma=null;function ra(a){if(h.onAbort)h.onAbort(a);a="Aborted("+a+")";pa(a);ta=!0;a=new WebAssembly.RuntimeError(a+". Build with -sASSERTIONS for more info.");ba(a);throw a;}function Na(){return H.startsWith("data:application/octet-stream;base64,")}var H;H="webgl_advanced.wasm";if(!Na()){var Oa=H;H=h.locateFile?h.locateFile(Oa,w):w+Oa}
function Pa(){var a=H;try{if(a==H&&qa)return new Uint8Array(qa);if(na)return na(a);throw"both async and sync fetching of the wasm failed";}catch(b){ra(b)}}
function Qa(){if(!qa&&(ka||la)){if("function"==typeof fetch&&!H.startsWith("file://"))return fetch(H,{credentials:"same-origin"}).then(function(a){if(!a.ok)throw"failed to load wasm binary file at '"+H+"'";return a.arrayBuffer()}).catch(function(){return Pa()});if(ma)return new Promise(function(a,b){ma(H,function(c){a(new Uint8Array(c))},b)})}return Promise.resolve().then(function(){return Pa()})}function Ra(a){for(;0<a.length;)a.shift()(h)}var Sa={};
function Ta(a){for(;a.length;){var b=a.pop();a.pop()(b)}}function Ua(a){return this.fromWireType(A[a>>2])}var Va={},Wa={},Xa={};function Ya(a){if(void 0===a)return"_unknown";a=a.replace(/[^a-zA-Z0-9_]/g,"$");var b=a.charCodeAt(0);return 48<=b&&57>=b?"_"+a:a}function Za(a,b){a=Ya(a);return function(){return b.apply(this,arguments)}}
function $a(a){var b=Error,c=Za(a,function(d){this.name=a;this.message=d;d=Error(d).stack;void 0!==d&&(this.stack=this.toString()+"\n"+d.replace(/^Error(:[^\n]*)?\n/,""))});c.prototype=Object.create(b.prototype);c.prototype.constructor=c;c.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message};return c}var ab=void 0;function cb(a){throw new ab(a);}
function J(a,b,c){function d(k){k=c(k);k.length!==a.length&&cb("Mismatched type converter count");for(var n=0;n<a.length;++n)K(a[n],k[n])}a.forEach(function(k){Xa[k]=b});var e=Array(b.length),f=[],g=0;b.forEach((k,n)=>{Wa.hasOwnProperty(k)?e[n]=Wa[k]:(f.push(k),Va.hasOwnProperty(k)||(Va[k]=[]),Va[k].push(()=>{e[n]=Wa[k];++g;g===f.length&&d(e)}))});0===f.length&&d(e)}
function db(a){switch(a){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+a);}}var eb=void 0;function L(a){for(var b="";y[a];)b+=eb[y[a++]];return b}var fb=void 0;function M(a){throw new fb(a);}
function K(a,b,c={}){if(!("argPackAdvance"in b))throw new TypeError("registerType registeredInstance requires argPackAdvance");var d=b.name;a||M('type "'+d+'" must have a positive integer typeid pointer');if(Wa.hasOwnProperty(a)){if(c.xe)return;M("Cannot register type '"+d+"' twice")}Wa[a]=b;delete Xa[a];Va.hasOwnProperty(a)&&(b=Va[a],delete Va[a],b.forEach(e=>e()))}function gb(a){M(a.cd.fd.dd.name+" instance already deleted")}var hb=!1;function ib(){}
function jb(a){--a.count.value;0===a.count.value&&(a.jd?a.ld.pd(a.jd):a.fd.dd.pd(a.ed))}function kb(a,b,c){if(b===c)return a;if(void 0===c.md)return null;a=kb(a,b,c.md);return null===a?null:c.ne(a)}var lb={},mb=[];function nb(){for(;mb.length;){var a=mb.pop();a.cd.xd=!1;a["delete"]()}}var ob=void 0,pb={};function qb(a,b){for(void 0===b&&M("ptr should not be undefined");a.md;)b=a.Bd(b),a=a.md;return pb[b]}
function rb(a,b){b.fd&&b.ed||cb("makeClassHandle requires ptr and ptrType");!!b.ld!==!!b.jd&&cb("Both smartPtrType and smartPtr must be specified");b.count={value:1};return sb(Object.create(a,{cd:{value:b}}))}function sb(a){if("undefined"===typeof FinalizationRegistry)return sb=b=>b,a;hb=new FinalizationRegistry(b=>{jb(b.cd)});sb=b=>{var c=b.cd;c.jd&&hb.register(b,{cd:c},b);return b};ib=b=>{hb.unregister(b)};return sb(a)}function tb(){}
function ub(a,b,c){if(void 0===a[b].gd){var d=a[b];a[b]=function(){a[b].gd.hasOwnProperty(arguments.length)||M("Function '"+c+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+a[b].gd+")!");return a[b].gd[arguments.length].apply(this,arguments)};a[b].gd=[];a[b].gd[d.Ed]=d}}
function vb(a,b,c){h.hasOwnProperty(a)?((void 0===c||void 0!==h[a].gd&&void 0!==h[a].gd[c])&&M("Cannot register public name '"+a+"' twice"),ub(h,a,a),h.hasOwnProperty(c)&&M("Cannot register multiple overloads of a function with the same number of arguments ("+c+")!"),h[a].gd[c]=b):(h[a]=b,void 0!==c&&(h[a].Pe=c))}function wb(a,b,c,d,e,f,g,k){this.name=a;this.constructor=b;this.qd=c;this.pd=d;this.md=e;this.se=f;this.Bd=g;this.ne=k;this.Be=[]}
function xb(a,b,c){for(;b!==c;)b.Bd||M("Expected null or instance of "+c.name+", got an instance of "+b.name),a=b.Bd(a),b=b.md;return a}function yb(a,b){if(null===b)return this.Pd&&M("null is not a valid "+this.name),0;b.cd||M('Cannot pass "'+zb(b)+'" as a '+this.name);b.cd.ed||M("Cannot pass deleted object as a pointer of type "+this.name);return xb(b.cd.ed,b.cd.fd.dd,this.dd)}
function Ab(a,b){if(null===b){this.Pd&&M("null is not a valid "+this.name);if(this.Gd){var c=this.Qd();null!==a&&a.push(this.pd,c);return c}return 0}b.cd||M('Cannot pass "'+zb(b)+'" as a '+this.name);b.cd.ed||M("Cannot pass deleted object as a pointer of type "+this.name);!this.Fd&&b.cd.fd.Fd&&M("Cannot convert argument of type "+(b.cd.ld?b.cd.ld.name:b.cd.fd.name)+" to parameter type "+this.name);c=xb(b.cd.ed,b.cd.fd.dd,this.dd);if(this.Gd)switch(void 0===b.cd.jd&&M("Passing raw pointer to smart pointer is illegal"),
this.Ge){case 0:b.cd.ld===this?c=b.cd.jd:M("Cannot convert argument of type "+(b.cd.ld?b.cd.ld.name:b.cd.fd.name)+" to parameter type "+this.name);break;case 1:c=b.cd.jd;break;case 2:if(b.cd.ld===this)c=b.cd.jd;else{var d=b.clone();c=this.Ce(c,Bb(function(){d["delete"]()}));null!==a&&a.push(this.pd,c)}break;default:M("Unsupporting sharing policy")}return c}
function Cb(a,b){if(null===b)return this.Pd&&M("null is not a valid "+this.name),0;b.cd||M('Cannot pass "'+zb(b)+'" as a '+this.name);b.cd.ed||M("Cannot pass deleted object as a pointer of type "+this.name);b.cd.fd.Fd&&M("Cannot convert argument of type "+b.cd.fd.name+" to parameter type "+this.name);return xb(b.cd.ed,b.cd.fd.dd,this.dd)}
function N(a,b,c,d){this.name=a;this.dd=b;this.Pd=c;this.Fd=d;this.Gd=!1;this.pd=this.Ce=this.Qd=this.be=this.Ge=this.Ae=void 0;void 0!==b.md?this.toWireType=Ab:(this.toWireType=d?yb:Cb,this.kd=null)}function Db(a,b,c){h.hasOwnProperty(a)||cb("Replacing nonexistant public symbol");void 0!==h[a].gd&&void 0!==c?h[a].gd[c]=b:(h[a]=b,h[a].Ed=c)}function O(a){return Fa.get(a)}
function Eb(a,b){var c=[];return function(){c.length=0;Object.assign(c,arguments);if(a.includes("j")){var d=h["dynCall_"+a];d=c&&c.length?d.apply(null,[b].concat(c)):d.call(null,b)}else d=O(b).apply(null,c);return d}}function P(a,b){a=L(a);var c=a.includes("j")?Eb(a,b):O(b);"function"!=typeof c&&M("unknown function pointer with signature "+a+": "+b);return c}var Fb=void 0;function Gb(a){a=Hb(a);var b=L(a);Ib(a);return b}
function Jb(a,b){function c(f){e[f]||Wa[f]||(Xa[f]?Xa[f].forEach(c):(d.push(f),e[f]=!0))}var d=[],e={};b.forEach(c);throw new Fb(a+": "+d.map(Gb).join([", "]));}function Kb(a,b,c){a instanceof Object||M(c+' with invalid "this": '+a);a instanceof b.dd.constructor||M(c+' incompatible with "this" of type '+a.constructor.name);a.cd.ed||M("cannot call emscripten binding method "+c+" on deleted object");return xb(a.cd.ed,a.cd.fd.dd,b.dd)}
function Lb(a,b){for(var c=[],d=0;d<a;d++)c.push(B[b+4*d>>2]);return c}
function Mb(a,b,c,d,e){var f=b.length;2>f&&M("argTypes array size mismatch! Must at least get return value and 'this' types!");var g=null!==b[1]&&null!==c,k=!1;for(c=1;c<b.length;++c)if(null!==b[c]&&void 0===b[c].kd){k=!0;break}var n="void"!==b[0].name,q=f-2,r=Array(q),v=[],z=[];return function(){arguments.length!==q&&M("function "+a+" called with "+arguments.length+" arguments, expected "+q+" args!");z.length=0;v.length=g?2:1;v[0]=e;if(g){var l=b[1].toWireType(z,this);v[1]=l}for(var p=0;p<q;++p)r[p]=
b[p+2].toWireType(z,arguments[p]),v.push(r[p]);p=d.apply(null,v);if(k)Ta(z);else for(var u=g?1:2;u<b.length;u++){var x=1===u?l:r[u-2];null!==b[u].kd&&b[u].kd(x)}l=n?b[0].fromWireType(p):void 0;return l}}var Nb=[],Q=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Ob(a){4<a&&0===--Q[a].Rd&&(Q[a]=void 0,Nb.push(a))}
var Pb=a=>{a||M("Cannot use deleted val. handle = "+a);return Q[a].value},Bb=a=>{switch(a){case void 0:return 1;case null:return 2;case !0:return 3;case !1:return 4;default:var b=Nb.length?Nb.pop():Q.length;Q[b]={Rd:1,value:a};return b}};
function Qb(a,b,c){switch(b){case 0:return function(d){return this.fromWireType((c?Aa:y)[d])};case 1:return function(d){return this.fromWireType((c?Ba:Ca)[d>>1])};case 2:return function(d){return this.fromWireType((c?A:B)[d>>2])};default:throw new TypeError("Unknown integer type: "+a);}}function Rb(a,b){var c=Wa[a];void 0===c&&M(b+" has unknown type "+Gb(a));return c}function zb(a){if(null===a)return"null";var b=typeof a;return"object"===b||"array"===b||"function"===b?a.toString():""+a}
function Sb(a,b){switch(b){case 2:return function(c){return this.fromWireType(F[c>>2])};case 3:return function(c){return this.fromWireType(Da[c>>3])};default:throw new TypeError("Unknown float type: "+a);}}
function Tb(a,b,c){switch(b){case 0:return c?function(d){return Aa[d]}:function(d){return y[d]};case 1:return c?function(d){return Ba[d>>1]}:function(d){return Ca[d>>1]};case 2:return c?function(d){return A[d>>2]}:function(d){return B[d>>2]};default:throw new TypeError("Unknown integer type: "+a);}}var Ub="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0;
function Vb(a,b){var c=a>>1;for(var d=c+b/2;!(c>=d)&&Ca[c];)++c;c<<=1;if(32<c-a&&Ub)return Ub.decode(y.subarray(a,c));c="";for(d=0;!(d>=b/2);++d){var e=Ba[a+2*d>>1];if(0==e)break;c+=String.fromCharCode(e)}return c}function Wb(a,b,c){void 0===c&&(c=2147483647);if(2>c)return 0;c-=2;var d=b;c=c<2*a.length?c/2:a.length;for(var e=0;e<c;++e)Ba[b>>1]=a.charCodeAt(e),b+=2;Ba[b>>1]=0;return b-d}function Xb(a){return 2*a.length}
function Yb(a,b){for(var c=0,d="";!(c>=b/4);){var e=A[a+4*c>>2];if(0==e)break;++c;65536<=e?(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023)):d+=String.fromCharCode(e)}return d}function Zb(a,b,c){void 0===c&&(c=2147483647);if(4>c)return 0;var d=b;c=d+c-4;for(var e=0;e<a.length;++e){var f=a.charCodeAt(e);if(55296<=f&&57343>=f){var g=a.charCodeAt(++e);f=65536+((f&1023)<<10)|g&1023}A[b>>2]=f;b+=4;if(b+4>c)break}A[b>>2]=0;return b-d}
function $b(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&++c;b+=4}return b}var ac={};function bc(a){var b=ac[a];return void 0===b?L(a):b}var cc=[];function dc(a){var b=cc.length;cc.push(a);return b}function ec(a,b){for(var c=Array(a),d=0;d<a;++d)c[d]=Rb(B[b+4*d>>2],"parameter "+d);return c}var fc=[];
function gc(a){var b=a.getExtension("ANGLE_instanced_arrays");b&&(a.vertexAttribDivisor=function(c,d){b.vertexAttribDivisorANGLE(c,d)},a.drawArraysInstanced=function(c,d,e,f){b.drawArraysInstancedANGLE(c,d,e,f)},a.drawElementsInstanced=function(c,d,e,f,g){b.drawElementsInstancedANGLE(c,d,e,f,g)})}
function hc(a){var b=a.getExtension("OES_vertex_array_object");b&&(a.createVertexArray=function(){return b.createVertexArrayOES()},a.deleteVertexArray=function(c){b.deleteVertexArrayOES(c)},a.bindVertexArray=function(c){b.bindVertexArrayOES(c)},a.isVertexArray=function(c){return b.isVertexArrayOES(c)})}function ic(a){var b=a.getExtension("WEBGL_draw_buffers");b&&(a.drawBuffers=function(c,d){b.drawBuffersWEBGL(c,d)})}
var jc=1,kc=[],R=[],lc=[],mc=[],nc=[],S=[],oc=[],fa=[],pc=[],qc=[],rc={},sc={},tc=4;function T(a){uc||(uc=a)}function ea(a){for(var b=jc++,c=a.length;c<b;c++)a[c]=null;return b}
function ha(a){a||(a=m);if(!a.ye){a.ye=!0;var b=a.Md;gc(b);hc(b);ic(b);b.Xd=b.getExtension("WEBGL_draw_instanced_base_vertex_base_instance");b.$d=b.getExtension("WEBGL_multi_draw_instanced_base_vertex_base_instance");2<=a.version&&(b.Yd=b.getExtension("EXT_disjoint_timer_query_webgl2"));if(2>a.version||!b.Yd)b.Yd=b.getExtension("EXT_disjoint_timer_query");b.Oe=b.getExtension("WEBGL_multi_draw");(b.getSupportedExtensions()||[]).forEach(function(c){c.includes("lose_context")||c.includes("debug")||b.getExtension(c)})}}
var uc,m,vc=[];function wc(a,b,c,d){for(var e=0;e<a;e++){var f=t[c](),g=f&&ea(d);f?(f.name=g,d[g]=f):T(1282);A[b+4*e>>2]=g}}
function xc(a,b){if(b){var c=void 0;switch(a){case 36346:c=1;break;case 36344:return;case 34814:case 36345:c=0;break;case 34466:var d=t.getParameter(34467);c=d?d.length:0;break;case 33309:if(2>m.version){T(1282);return}c=2*(t.getSupportedExtensions()||[]).length;break;case 33307:case 33308:if(2>m.version){T(1280);return}c=33307==a?3:0}if(void 0===c)switch(d=t.getParameter(a),typeof d){case "number":c=d;break;case "boolean":c=d?1:0;break;case "string":T(1280);return;case "object":if(null===d)switch(a){case 34964:case 35725:case 34965:case 36006:case 36007:case 32873:case 34229:case 36662:case 36663:case 35053:case 35055:case 36010:case 35097:case 35869:case 32874:case 36389:case 35983:case 35368:case 34068:c=
0;break;default:T(1280);return}else{if(d instanceof Float32Array||d instanceof Uint32Array||d instanceof Int32Array||d instanceof Array){for(a=0;a<d.length;++a)A[b+4*a>>2]=d[a];return}try{c=d.name|0}catch(e){T(1280);pa("GL_INVALID_ENUM in glGet0v: Unknown object returned from WebGL getParameter("+a+")! (error: "+e+")");return}}break;default:T(1280);pa("GL_INVALID_ENUM in glGet0v: Native code calling glGet0v("+a+") and it returns "+d+" of type "+typeof d+"!");return}A[b>>2]=c}else T(1281)}
function yc(a){var b=ya(a)+1,c=zc(b);xa(a,y,c,b);return c}function Ac(a){return"]"==a.slice(-1)&&a.lastIndexOf("[")}function Bc(a){a-=5120;return 0==a?Aa:1==a?y:2==a?Ba:4==a?A:6==a?F:5==a||28922==a||28520==a||30779==a||30782==a?B:Ca}function Cc(a,b,c,d,e){a=Bc(a);var f=31-Math.clz32(a.BYTES_PER_ELEMENT),g=tc;return a.subarray(e>>f,e+d*(c*({5:3,6:4,8:2,29502:3,29504:4,26917:2,26918:2,29846:3,29847:4}[b-6402]||1)*(1<<f)+g-1&-g)>>f)}
function U(a){var b=t.le;if(b){var c=b.Ad[a];"number"==typeof c&&(b.Ad[a]=c=t.getUniformLocation(b,b.ce[a]+(0<c?"["+c+"]":"")));return c}T(1282)}var Dc=[],Ec=[],Fc={};
function Gc(){if(!Hc){var a={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:ja||"./this.program"},b;for(b in Fc)void 0===Fc[b]?delete a[b]:a[b]=Fc[b];var c=[];for(b in a)c.push(b+"="+a[b]);Hc=c}return Hc}var Hc,Ic=[null,[],[]];function Jc(a){return 0===a%4&&(0!==a%100||0===a%400)}
var Kc=[31,29,31,30,31,30,31,31,30,31,30,31],Lc=[31,28,31,30,31,30,31,31,30,31,30,31];function Mc(a){var b=Array(ya(a)+1);xa(a,b,0,b.length);return b}
function Nc(a,b,c,d){function e(l,p,u){for(l="number"==typeof l?l.toString():l||"";l.length<p;)l=u[0]+l;return l}function f(l,p){return e(l,p,"0")}function g(l,p){function u(C){return 0>C?-1:0<C?1:0}var x;0===(x=u(l.getFullYear()-p.getFullYear()))&&0===(x=u(l.getMonth()-p.getMonth()))&&(x=u(l.getDate()-p.getDate()));return x}function k(l){switch(l.getDay()){case 0:return new Date(l.getFullYear()-1,11,29);case 1:return l;case 2:return new Date(l.getFullYear(),0,3);case 3:return new Date(l.getFullYear(),
0,2);case 4:return new Date(l.getFullYear(),0,1);case 5:return new Date(l.getFullYear()-1,11,31);case 6:return new Date(l.getFullYear()-1,11,30)}}function n(l){var p=l.sd;for(l=new Date((new Date(l.td+1900,0,1)).getTime());0<p;){var u=l.getMonth(),x=(Jc(l.getFullYear())?Kc:Lc)[u];if(p>x-l.getDate())p-=x-l.getDate()+1,l.setDate(1),11>u?l.setMonth(u+1):(l.setMonth(0),l.setFullYear(l.getFullYear()+1));else{l.setDate(l.getDate()+p);break}}u=new Date(l.getFullYear()+1,0,4);p=k(new Date(l.getFullYear(),
0,4));u=k(u);return 0>=g(p,l)?0>=g(u,l)?l.getFullYear()+1:l.getFullYear():l.getFullYear()-1}var q=A[d+40>>2];d={Je:A[d>>2],Ie:A[d+4>>2],Kd:A[d+8>>2],Sd:A[d+12>>2],Ld:A[d+16>>2],td:A[d+20>>2],nd:A[d+24>>2],sd:A[d+28>>2],Qe:A[d+32>>2],He:A[d+36>>2],Ke:q?wa(q):""};c=wa(c);q={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y",
"%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var r in q)c=c.replace(new RegExp(r,"g"),q[r]);var v="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),z="January February March April May June July August September October November December".split(" ");q={"%a":function(l){return v[l.nd].substring(0,3)},"%A":function(l){return v[l.nd]},"%b":function(l){return z[l.Ld].substring(0,3)},
"%B":function(l){return z[l.Ld]},"%C":function(l){return f((l.td+1900)/100|0,2)},"%d":function(l){return f(l.Sd,2)},"%e":function(l){return e(l.Sd,2," ")},"%g":function(l){return n(l).toString().substring(2)},"%G":function(l){return n(l)},"%H":function(l){return f(l.Kd,2)},"%I":function(l){l=l.Kd;0==l?l=12:12<l&&(l-=12);return f(l,2)},"%j":function(l){for(var p=0,u=0;u<=l.Ld-1;p+=(Jc(l.td+1900)?Kc:Lc)[u++]);return f(l.Sd+p,3)},"%m":function(l){return f(l.Ld+1,2)},"%M":function(l){return f(l.Ie,2)},
"%n":function(){return"\n"},"%p":function(l){return 0<=l.Kd&&12>l.Kd?"AM":"PM"},"%S":function(l){return f(l.Je,2)},"%t":function(){return"\t"},"%u":function(l){return l.nd||7},"%U":function(l){return f(Math.floor((l.sd+7-l.nd)/7),2)},"%V":function(l){var p=Math.floor((l.sd+7-(l.nd+6)%7)/7);2>=(l.nd+371-l.sd-2)%7&&p++;if(p)53==p&&(u=(l.nd+371-l.sd)%7,4==u||3==u&&Jc(l.td)||(p=1));else{p=52;var u=(l.nd+7-l.sd-1)%7;(4==u||5==u&&Jc(l.td%400-1))&&p++}return f(p,2)},"%w":function(l){return l.nd},"%W":function(l){return f(Math.floor((l.sd+
7-(l.nd+6)%7)/7),2)},"%y":function(l){return(l.td+1900).toString().substring(2)},"%Y":function(l){return l.td+1900},"%z":function(l){l=l.He;var p=0<=l;l=Math.abs(l)/60;return(p?"+":"-")+String("0000"+(l/60*100+l%60)).slice(-4)},"%Z":function(l){return l.Ke},"%%":function(){return"%"}};c=c.replace(/%%/g,"\x00\x00");for(r in q)c.includes(r)&&(c=c.replace(new RegExp(r,"g"),q[r](d)));c=c.replace(/\0\0/g,"%");r=Mc(c);if(r.length>b)return 0;Aa.set(r,a);return r.length-1}ab=h.InternalError=$a("InternalError");
for(var Oc=Array(256),Pc=0;256>Pc;++Pc)Oc[Pc]=String.fromCharCode(Pc);eb=Oc;fb=h.BindingError=$a("BindingError");tb.prototype.isAliasOf=function(a){if(!(this instanceof tb&&a instanceof tb))return!1;var b=this.cd.fd.dd,c=this.cd.ed,d=a.cd.fd.dd;for(a=a.cd.ed;b.md;)c=b.Bd(c),b=b.md;for(;d.md;)a=d.Bd(a),d=d.md;return b===d&&c===a};
tb.prototype.clone=function(){this.cd.ed||gb(this);if(this.cd.zd)return this.cd.count.value+=1,this;var a=sb,b=Object,c=b.create,d=Object.getPrototypeOf(this),e=this.cd;a=a(c.call(b,d,{cd:{value:{count:e.count,xd:e.xd,zd:e.zd,ed:e.ed,fd:e.fd,jd:e.jd,ld:e.ld}}}));a.cd.count.value+=1;a.cd.xd=!1;return a};tb.prototype["delete"]=function(){this.cd.ed||gb(this);this.cd.xd&&!this.cd.zd&&M("Object already scheduled for deletion");ib(this);jb(this.cd);this.cd.zd||(this.cd.jd=void 0,this.cd.ed=void 0)};
tb.prototype.isDeleted=function(){return!this.cd.ed};tb.prototype.deleteLater=function(){this.cd.ed||gb(this);this.cd.xd&&!this.cd.zd&&M("Object already scheduled for deletion");mb.push(this);1===mb.length&&ob&&ob(nb);this.cd.xd=!0;return this};h.getInheritedInstanceCount=function(){return Object.keys(pb).length};h.getLiveInheritedInstances=function(){var a=[],b;for(b in pb)pb.hasOwnProperty(b)&&a.push(pb[b]);return a};h.flushPendingDeletes=nb;h.setDelayFunction=function(a){ob=a;mb.length&&ob&&ob(nb)};
N.prototype.te=function(a){this.be&&(a=this.be(a));return a};N.prototype.Wd=function(a){this.pd&&this.pd(a)};N.prototype.argPackAdvance=8;N.prototype.readValueFromPointer=Ua;N.prototype.deleteObject=function(a){if(null!==a)a["delete"]()};
N.prototype.fromWireType=function(a){function b(){return this.Gd?rb(this.dd.qd,{fd:this.Ae,ed:c,ld:this,jd:a}):rb(this.dd.qd,{fd:this,ed:a})}var c=this.te(a);if(!c)return this.Wd(a),null;var d=qb(this.dd,c);if(void 0!==d){if(0===d.cd.count.value)return d.cd.ed=c,d.cd.jd=a,d.clone();d=d.clone();this.Wd(a);return d}d=this.dd.se(c);d=lb[d];if(!d)return b.call(this);d=this.Fd?d.je:d.pointerType;var e=kb(c,this.dd,d.dd);return null===e?b.call(this):this.Gd?rb(d.dd.qd,{fd:d,ed:e,ld:this,jd:a}):rb(d.dd.qd,
{fd:d,ed:e})};Fb=h.UnboundTypeError=$a("UnboundTypeError");h.count_emval_handles=function(){for(var a=0,b=5;b<Q.length;++b)void 0!==Q[b]&&++a;return a};h.get_first_emval=function(){for(var a=5;a<Q.length;++a)if(void 0!==Q[a])return Q[a];return null};for(var t,V=0;32>V;++V)vc.push(Array(V));var Qc=new Float32Array(288);for(V=0;288>V;++V)Dc[V]=Qc.subarray(0,V+1);var Rc=new Int32Array(288);for(V=0;288>V;++V)Ec[V]=Rc.subarray(0,V+1);
var ed={ic:function(a){var b=Sa[a];delete Sa[a];var c=b.Qd,d=b.pd,e=b.Zd,f=e.map(g=>g.we).concat(e.map(g=>g.Ee));J([a],f,g=>{var k={};e.forEach((n,q)=>{var r=g[q],v=n.ue,z=n.ve,l=g[q+e.length],p=n.De,u=n.Fe;k[n.qe]={read:x=>r.fromWireType(v(z,x)),write:(x,C)=>{var G=[];p(u,x,l.toWireType(G,C));Ta(G)}}});return[{name:b.name,fromWireType:function(n){var q={},r;for(r in k)q[r]=k[r].read(n);d(n);return q},toWireType:function(n,q){for(var r in k)if(!(r in q))throw new TypeError('Missing field:  "'+r+'"');
var v=c();for(r in k)k[r].write(v,q[r]);null!==n&&n.push(d,v);return v},argPackAdvance:8,readValueFromPointer:Ua,kd:d}]})},_a:function(){},pb:function(a,b,c,d,e){var f=db(c);b=L(b);K(a,{name:b,fromWireType:function(g){return!!g},toWireType:function(g,k){return k?d:e},argPackAdvance:8,readValueFromPointer:function(g){if(1===c)var k=Aa;else if(2===c)k=Ba;else if(4===c)k=A;else throw new TypeError("Unknown boolean type size: "+b);return this.fromWireType(k[g>>f])},kd:null})},g:function(a,b,c,d,e,f,g,
k,n,q,r,v,z){r=L(r);f=P(e,f);k&&(k=P(g,k));q&&(q=P(n,q));z=P(v,z);var l=Ya(r);vb(l,function(){Jb("Cannot construct "+r+" due to unbound types",[d])});J([a,b,c],d?[d]:[],function(p){p=p[0];if(d){var u=p.dd;var x=u.qd}else x=tb.prototype;p=Za(l,function(){if(Object.getPrototypeOf(this)!==C)throw new fb("Use 'new' to construct "+r);if(void 0===G.rd)throw new fb(r+" has no accessible constructor");var I=G.rd[arguments.length];if(void 0===I)throw new fb("Tried to invoke ctor of "+r+" with invalid number of parameters ("+
arguments.length+") - expected ("+Object.keys(G.rd).toString()+") parameters instead!");return I.apply(this,arguments)});var C=Object.create(x,{constructor:{value:p}});p.prototype=C;var G=new wb(r,p,C,z,u,f,k,q);u=new N(r,G,!0,!1);x=new N(r+"*",G,!1,!1);var D=new N(r+" const*",G,!1,!0);lb[a]={pointerType:x,je:D};Db(l,p);return[u,x,D]})},t:function(a,b,c,d,e,f,g,k){b=L(b);f=P(e,f);J([],[a],function(n){n=n[0];var q=n.name+"."+b,r={get:function(){Jb("Cannot access "+q+" due to unbound types",[c])},enumerable:!0,
configurable:!0};r.set=k?()=>{Jb("Cannot access "+q+" due to unbound types",[c])}:()=>{M(q+" is a read-only property")};Object.defineProperty(n.dd.constructor,b,r);J([],[c],function(v){v=v[0];var z={get:function(){return v.fromWireType(f(d))},enumerable:!0};k&&(k=P(g,k),z.set=l=>{var p=[];k(d,v.toWireType(p,l));Ta(p)});Object.defineProperty(n.dd.constructor,b,z);return[]});return[]})},o:function(a,b,c,d,e,f){0<b||ra();var g=Lb(b,c);e=P(d,e);J([],[a],function(k){k=k[0];var n="constructor "+k.name;
void 0===k.dd.rd&&(k.dd.rd=[]);if(void 0!==k.dd.rd[b-1])throw new fb("Cannot register multiple constructors with identical number of parameters ("+(b-1)+") for class '"+k.name+"'! Overload resolution is currently only performed using the parameter count, not actual type info!");k.dd.rd[b-1]=()=>{Jb("Cannot construct "+k.name+" due to unbound types",g)};J([],g,function(q){q.splice(1,0,null);k.dd.rd[b-1]=Mb(n,q,null,e,f);return[]});return[]})},c:function(a,b,c,d,e,f,g,k){var n=Lb(c,d);b=L(b);f=P(e,
f);J([],[a],function(q){function r(){Jb("Cannot call "+v+" due to unbound types",n)}q=q[0];var v=q.name+"."+b;b.startsWith("@@")&&(b=Symbol[b.substring(2)]);k&&q.dd.Be.push(b);var z=q.dd.qd,l=z[b];void 0===l||void 0===l.gd&&l.className!==q.name&&l.Ed===c-2?(r.Ed=c-2,r.className=q.name,z[b]=r):(ub(z,b,v),z[b].gd[c-2]=r);J([],n,function(p){p=Mb(v,p,q,f,g);void 0===z[b].gd?(p.Ed=c-2,z[b]=p):z[b].gd[c-2]=p;return[]});return[]})},f:function(a,b,c,d,e,f,g,k,n,q){b=L(b);e=P(d,e);J([],[a],function(r){r=r[0];
var v=r.name+"."+b,z={get:function(){Jb("Cannot access "+v+" due to unbound types",[c,g])},enumerable:!0,configurable:!0};z.set=n?()=>{Jb("Cannot access "+v+" due to unbound types",[c,g])}:()=>{M(v+" is a read-only property")};Object.defineProperty(r.dd.qd,b,z);J([],n?[c,g]:[c],function(l){var p=l[0],u={get:function(){var C=Kb(this,r,v+" getter");return p.fromWireType(e(f,C))},enumerable:!0};if(n){n=P(k,n);var x=l[1];u.set=function(C){var G=Kb(this,r,v+" setter"),D=[];n(q,G,x.toWireType(D,C));Ta(D)}}Object.defineProperty(r.dd.qd,
b,u);return[]});return[]})},ob:function(a,b){b=L(b);K(a,{name:b,fromWireType:function(c){var d=Pb(c);Ob(c);return d},toWireType:function(c,d){return Bb(d)},argPackAdvance:8,readValueFromPointer:Ua,kd:null})},w:function(a,b,c,d){function e(){}c=db(c);b=L(b);e.values={};K(a,{name:b,constructor:e,fromWireType:function(f){return this.constructor.values[f]},toWireType:function(f,g){return g.value},argPackAdvance:8,readValueFromPointer:Qb(b,c,d),kd:null});vb(b,e)},j:function(a,b,c){var d=Rb(a,"enum");b=
L(b);a=d.constructor;d=Object.create(d.constructor.prototype,{value:{value:c},constructor:{value:Za(d.name+"_"+b,function(){})}});a.values[c]=d;a[b]=d},z:function(a,b,c){c=db(c);b=L(b);K(a,{name:b,fromWireType:function(d){return d},toWireType:function(d,e){return e},argPackAdvance:8,readValueFromPointer:Sb(b,c),kd:null})},p:function(a,b,c,d,e,f){var g=Lb(b,c);a=L(a);e=P(d,e);vb(a,function(){Jb("Cannot call "+a+" due to unbound types",g)},b-1);J([],g,function(k){Db(a,Mb(a,[k[0],null].concat(k.slice(1)),
null,e,f),b-1);return[]})},m:function(a,b,c,d,e){b=L(b);-1===e&&(e=4294967295);e=db(c);var f=k=>k;if(0===d){var g=32-8*c;f=k=>k<<g>>>g}c=b.includes("unsigned")?function(k,n){return n>>>0}:function(k,n){return n};K(a,{name:b,fromWireType:f,toWireType:c,argPackAdvance:8,readValueFromPointer:Tb(b,e,0!==d),kd:null})},i:function(a,b,c){function d(f){f>>=2;var g=B;return new e(za,g[f+1],g[f])}var e=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][b];c=L(c);
K(a,{name:c,fromWireType:d,argPackAdvance:8,readValueFromPointer:d},{xe:!0})},A:function(a,b){b=L(b);var c="std::string"===b;K(a,{name:b,fromWireType:function(d){var e=B[d>>2],f=d+4;if(c)for(var g=f,k=0;k<=e;++k){var n=f+k;if(k==e||0==y[n]){g=wa(g,n-g);if(void 0===q)var q=g;else q+=String.fromCharCode(0),q+=g;g=n+1}}else{q=Array(e);for(k=0;k<e;++k)q[k]=String.fromCharCode(y[f+k]);q=q.join("")}Ib(d);return q},toWireType:function(d,e){e instanceof ArrayBuffer&&(e=new Uint8Array(e));var f,g="string"==
typeof e;g||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array||M("Cannot pass non-string to std::string");c&&g?f=ya(e):f=e.length;var k=zc(4+f+1),n=k+4;B[k>>2]=f;if(c&&g)xa(e,y,n,f+1);else if(g)for(g=0;g<f;++g){var q=e.charCodeAt(g);255<q&&(Ib(n),M("String has UTF-16 code units that do not fit in 8 bits"));y[n+g]=q}else for(g=0;g<f;++g)y[n+g]=e[g];null!==d&&d.push(Ib,k);return k},argPackAdvance:8,readValueFromPointer:Ua,kd:function(d){Ib(d)}})},v:function(a,b,c){c=L(c);
if(2===b){var d=Vb;var e=Wb;var f=Xb;var g=()=>Ca;var k=1}else 4===b&&(d=Yb,e=Zb,f=$b,g=()=>B,k=2);K(a,{name:c,fromWireType:function(n){for(var q=B[n>>2],r=g(),v,z=n+4,l=0;l<=q;++l){var p=n+4+l*b;if(l==q||0==r[p>>k])z=d(z,p-z),void 0===v?v=z:(v+=String.fromCharCode(0),v+=z),z=p+b}Ib(n);return v},toWireType:function(n,q){"string"!=typeof q&&M("Cannot pass non-string to C++ string type "+c);var r=f(q),v=zc(4+r+b);B[v>>2]=r>>k;e(q,v+4,r+b);null!==n&&n.push(Ib,v);return v},argPackAdvance:8,readValueFromPointer:Ua,
kd:function(n){Ib(n)}})},Ec:function(a,b,c,d,e,f){Sa[a]={name:L(b),Qd:P(c,d),pd:P(e,f),Zd:[]}},tc:function(a,b,c,d,e,f,g,k,n,q){Sa[a].Zd.push({qe:L(b),we:c,ue:P(d,e),ve:f,Ee:g,De:P(k,n),Fe:q})},qb:function(a,b){b=L(b);K(a,{ze:!0,name:b,argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},kb:function(){return!0},eb:function(){throw Infinity;},Db:function(a,b,c){a=Pb(a);b=Rb(b,"emval::as");var d=[],e=Bb(d);B[c>>2]=e;return b.toWireType(d,a)},db:function(a,b,c,d){a=cc[a];b=Pb(b);c=bc(c);
a(b,c,null,d)},s:Ob,$a:function(a,b){var c=ec(a,b),d=c[0];b=d.name+"_$"+c.slice(1).map(function(g){return g.name}).join("_")+"$";var e=fc[b];if(void 0!==e)return e;var f=Array(a-1);e=dc((g,k,n,q)=>{for(var r=0,v=0;v<a-1;++v)f[v]=c[v+1].readValueFromPointer(q+r),r+=c[v+1].argPackAdvance;g=g[k].apply(g,f);for(v=0;v<a-1;++v)c[v+1].me&&c[v+1].me(f[v]);if(!d.ze)return d.toWireType(n,g)});return fc[b]=e},Zb:function(a,b){a=Pb(a);b=Pb(b);return Bb(a[b])},Ya:function(a){4<a&&(Q[a].Rd+=1)},Ob:function(a){return Bb(bc(a))},
sb:function(a){var b=Pb(a);Ta(b);Ob(a)},mb:function(a,b){a=Rb(a,"_emval_take_value");a=a.readValueFromPointer(b);return Bb(a)},a:function(){ra("")},jb:()=>performance.now(),Sa:function(a){t.activeTexture(a)},Ra:function(a,b){t.attachShader(R[a],S[b])},Qa:function(a,b,c){t.bindAttribLocation(R[a],b,wa(c))},Pa:function(a,b){35051==a?t.Od=b:35052==a&&(t.wd=b);t.bindBuffer(a,kc[b])},Tb:function(a,b){t.bindFramebuffer(a,lc[b])},Sb:function(a,b){t.bindRenderbuffer(a,mc[b])},zb:function(a,b){t.bindSampler(a,
pc[b])},Oa:function(a,b){t.bindTexture(a,nc[b])},lc:function(a){t.bindVertexArray(oc[a])},hc:function(a){t.bindVertexArray(oc[a])},Na:function(a,b,c,d){t.blendColor(a,b,c,d)},Ma:function(a){t.blendEquation(a)},La:function(a,b){t.blendFunc(a,b)},Fb:function(a,b,c,d,e,f,g,k,n,q){t.blitFramebuffer(a,b,c,d,e,f,g,k,n,q)},Ka:function(a,b,c,d){2<=m.version?c&&b?t.bufferData(a,y,d,c,b):t.bufferData(a,b,d):t.bufferData(a,c?y.subarray(c,c+b):b,d)},Ja:function(a,b,c,d){2<=m.version?c&&t.bufferSubData(a,b,y,
d,c):t.bufferSubData(a,b,y.subarray(d,d+c))},Rb:function(a){return t.checkFramebufferStatus(a)},Ia:function(a){t.clear(a)},Ha:function(a,b,c,d){t.clearColor(a,b,c,d)},Ga:function(a){t.clearStencil(a)},Va:function(a,b,c,d){return t.clientWaitSync(qc[a],b,(c>>>0)+4294967296*d)},Fa:function(a,b,c,d){t.colorMask(!!a,!!b,!!c,!!d)},Ea:function(a){t.compileShader(S[a])},Da:function(a,b,c,d,e,f,g,k){2<=m.version?t.wd||!g?t.compressedTexImage2D(a,b,c,d,e,f,g,k):t.compressedTexImage2D(a,b,c,d,e,f,y,k,g):t.compressedTexImage2D(a,
b,c,d,e,f,k?y.subarray(k,k+g):null)},Ca:function(a,b,c,d,e,f,g,k,n){2<=m.version?t.wd||!k?t.compressedTexSubImage2D(a,b,c,d,e,f,g,k,n):t.compressedTexSubImage2D(a,b,c,d,e,f,g,y,n,k):t.compressedTexSubImage2D(a,b,c,d,e,f,g,n?y.subarray(n,n+k):null)},Ba:function(a,b,c,d,e,f,g,k){t.copyTexSubImage2D(a,b,c,d,e,f,g,k)},Aa:function(){var a=ea(R),b=t.createProgram();b.name=a;b.Jd=b.Hd=b.Id=0;b.Td=1;R[a]=b;return a},za:function(a){var b=ea(S);S[b]=t.createShader(a);return b},ya:function(a){t.cullFace(a)},
xa:function(a,b){for(var c=0;c<a;c++){var d=A[b+4*c>>2],e=kc[d];e&&(t.deleteBuffer(e),e.name=0,kc[d]=null,d==t.Od&&(t.Od=0),d==t.wd&&(t.wd=0))}},Qb:function(a,b){for(var c=0;c<a;++c){var d=A[b+4*c>>2],e=lc[d];e&&(t.deleteFramebuffer(e),e.name=0,lc[d]=null)}},wa:function(a){if(a){var b=R[a];b?(t.deleteProgram(b),b.name=0,R[a]=null):T(1281)}},Pb:function(a,b){for(var c=0;c<a;c++){var d=A[b+4*c>>2],e=mc[d];e&&(t.deleteRenderbuffer(e),e.name=0,mc[d]=null)}},yb:function(a,b){for(var c=0;c<a;c++){var d=
A[b+4*c>>2],e=pc[d];e&&(t.deleteSampler(e),e.name=0,pc[d]=null)}},va:function(a){if(a){var b=S[a];b?(t.deleteShader(b),S[a]=null):T(1281)}},Cb:function(a){if(a){var b=qc[a];b?(t.deleteSync(b),b.name=0,qc[a]=null):T(1281)}},ua:function(a,b){for(var c=0;c<a;c++){var d=A[b+4*c>>2],e=nc[d];e&&(t.deleteTexture(e),e.name=0,nc[d]=null)}},kc:function(a,b){for(var c=0;c<a;c++){var d=A[b+4*c>>2];t.deleteVertexArray(oc[d]);oc[d]=null}},gc:function(a,b){for(var c=0;c<a;c++){var d=A[b+4*c>>2];t.deleteVertexArray(oc[d]);
oc[d]=null}},ta:function(a){t.depthMask(!!a)},sa:function(a){t.disable(a)},ra:function(a){t.disableVertexAttribArray(a)},qa:function(a,b,c){t.drawArrays(a,b,c)},ec:function(a,b,c,d){t.drawArraysInstanced(a,b,c,d)},cc:function(a,b,c,d,e){t.Xd.drawArraysInstancedBaseInstanceWEBGL(a,b,c,d,e)},ac:function(a,b){for(var c=vc[a],d=0;d<a;d++)c[d]=A[b+4*d>>2];t.drawBuffers(c)},pa:function(a,b,c,d){t.drawElements(a,b,c,d)},dc:function(a,b,c,d,e){t.drawElementsInstanced(a,b,c,d,e)},bc:function(a,b,c,d,e,f,g){t.Xd.drawElementsInstancedBaseVertexBaseInstanceWEBGL(a,
b,c,d,e,f,g)},Xb:function(a,b,c,d,e,f){t.drawElements(a,d,e,f)},oa:function(a){t.enable(a)},na:function(a){t.enableVertexAttribArray(a)},Bb:function(a,b){return(a=t.fenceSync(a,b))?(b=ea(qc),a.name=b,qc[b]=a,b):0},ma:function(){t.finish()},la:function(){t.flush()},Nb:function(a,b,c,d){t.framebufferRenderbuffer(a,b,c,mc[d])},Mb:function(a,b,c,d,e){t.framebufferTexture2D(a,b,c,nc[d],e)},ka:function(a){t.frontFace(a)},ja:function(a,b){wc(a,b,"createBuffer",kc)},Lb:function(a,b){wc(a,b,"createFramebuffer",
lc)},Kb:function(a,b){wc(a,b,"createRenderbuffer",mc)},xb:function(a,b){wc(a,b,"createSampler",pc)},ia:function(a,b){wc(a,b,"createTexture",nc)},jc:function(a,b){wc(a,b,"createVertexArray",oc)},fc:function(a,b){wc(a,b,"createVertexArray",oc)},Jb:function(a){t.generateMipmap(a)},ha:function(a,b,c){c?A[c>>2]=t.getBufferParameter(a,b):T(1281)},ga:function(){var a=t.getError()||uc;uc=0;return a},Ib:function(a,b,c,d){a=t.getFramebufferAttachmentParameter(a,b,c);if(a instanceof WebGLRenderbuffer||a instanceof
WebGLTexture)a=a.name|0;A[d>>2]=a},Ta:function(a,b){xc(a,b)},fa:function(a,b,c,d){a=t.getProgramInfoLog(R[a]);null===a&&(a="(unknown error)");b=0<b&&d?xa(a,y,d,b):0;c&&(A[c>>2]=b)},ea:function(a,b,c){if(c)if(a>=jc)T(1281);else if(a=R[a],35716==b)a=t.getProgramInfoLog(a),null===a&&(a="(unknown error)"),A[c>>2]=a.length+1;else if(35719==b){if(!a.Jd)for(b=0;b<t.getProgramParameter(a,35718);++b)a.Jd=Math.max(a.Jd,t.getActiveUniform(a,b).name.length+1);A[c>>2]=a.Jd}else if(35722==b){if(!a.Hd)for(b=0;b<
t.getProgramParameter(a,35721);++b)a.Hd=Math.max(a.Hd,t.getActiveAttrib(a,b).name.length+1);A[c>>2]=a.Hd}else if(35381==b){if(!a.Id)for(b=0;b<t.getProgramParameter(a,35382);++b)a.Id=Math.max(a.Id,t.getActiveUniformBlockName(a,b).length+1);A[c>>2]=a.Id}else A[c>>2]=t.getProgramParameter(a,b);else T(1281)},Hb:function(a,b,c){c?A[c>>2]=t.getRenderbufferParameter(a,b):T(1281)},da:function(a,b,c,d){a=t.getShaderInfoLog(S[a]);null===a&&(a="(unknown error)");b=0<b&&d?xa(a,y,d,b):0;c&&(A[c>>2]=b)},rb:function(a,
b,c,d){a=t.getShaderPrecisionFormat(a,b);A[c>>2]=a.rangeMin;A[c+4>>2]=a.rangeMax;A[d>>2]=a.precision},ca:function(a,b,c){c?35716==b?(a=t.getShaderInfoLog(S[a]),null===a&&(a="(unknown error)"),A[c>>2]=a?a.length+1:0):35720==b?(a=t.getShaderSource(S[a]),A[c>>2]=a?a.length+1:0):A[c>>2]=t.getShaderParameter(S[a],b):T(1281)},u:function(a){var b=rc[a];if(!b){switch(a){case 7939:b=t.getSupportedExtensions()||[];b=b.concat(b.map(function(d){return"GL_"+d}));b=yc(b.join(" "));break;case 7936:case 7937:case 37445:case 37446:(b=
t.getParameter(a))||T(1280);b=b&&yc(b);break;case 7938:b=t.getParameter(7938);b=2<=m.version?"OpenGL ES 3.0 ("+b+")":"OpenGL ES 2.0 ("+b+")";b=yc(b);break;case 35724:b=t.getParameter(35724);var c=b.match(/^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/);null!==c&&(3==c[1].length&&(c[1]+="0"),b="OpenGL ES GLSL ES "+c[1]+" ("+b+")");b=yc(b);break;default:T(1280)}rc[a]=b}return b},Ua:function(a,b){if(2>m.version)return T(1282),0;var c=sc[a];if(c)return 0>b||b>=c.length?(T(1281),0):c[b];switch(a){case 7939:return c=
t.getSupportedExtensions()||[],c=c.concat(c.map(function(d){return"GL_"+d})),c=c.map(function(d){return yc(d)}),c=sc[a]=c,0>b||b>=c.length?(T(1281),0):c[b];default:return T(1280),0}},ba:function(a,b){b=wa(b);if(a=R[a]){var c=a,d=c.Ad,e=c.de,f;if(!d)for(c.Ad=d={},c.ce={},f=0;f<t.getProgramParameter(c,35718);++f){var g=t.getActiveUniform(c,f);var k=g.name;g=g.size;var n=Ac(k);n=0<n?k.slice(0,n):k;var q=c.Td;c.Td+=g;e[n]=[g,q];for(k=0;k<g;++k)d[q]=k,c.ce[q++]=n}c=a.Ad;d=0;e=b;f=Ac(b);0<f&&(d=parseInt(b.slice(f+
1))>>>0,e=b.slice(0,f));if((e=a.de[e])&&d<e[0]&&(d+=e[1],c[d]=c[d]||t.getUniformLocation(a,b)))return d}else T(1281);return-1},ub:function(a,b,c){for(var d=vc[b],e=0;e<b;e++)d[e]=A[c+4*e>>2];t.invalidateFramebuffer(a,d)},tb:function(a,b,c,d,e,f,g){for(var k=vc[b],n=0;n<b;n++)k[n]=A[c+4*n>>2];t.invalidateSubFramebuffer(a,k,d,e,f,g)},Ab:function(a){return t.isSync(qc[a])},aa:function(a){return(a=nc[a])?t.isTexture(a):0},$:function(a){t.lineWidth(a)},_:function(a){a=R[a];t.linkProgram(a);a.Ad=0;a.de=
{}},_b:function(a,b,c,d,e,f){t.$d.multiDrawArraysInstancedBaseInstanceWEBGL(a,A,b>>2,A,c>>2,A,d>>2,B,e>>2,f)},Yb:function(a,b,c,d,e,f,g,k){t.$d.multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL(a,A,b>>2,c,A,d>>2,A,e>>2,A,f>>2,B,g>>2,k)},Z:function(a,b){3317==a&&(tc=b);t.pixelStorei(a,b)},$b:function(a){t.readBuffer(a)},Y:function(a,b,c,d,e,f,g){if(2<=m.version)if(t.Od)t.readPixels(a,b,c,d,e,f,g);else{var k=Bc(f);t.readPixels(a,b,c,d,e,f,k,g>>31-Math.clz32(k.BYTES_PER_ELEMENT))}else(g=Cc(f,e,c,
d,g))?t.readPixels(a,b,c,d,e,f,g):T(1280)},Gb:function(a,b,c,d){t.renderbufferStorage(a,b,c,d)},Eb:function(a,b,c,d,e){t.renderbufferStorageMultisample(a,b,c,d,e)},wb:function(a,b,c){t.samplerParameteri(pc[a],b,c)},vb:function(a,b,c){t.samplerParameteri(pc[a],b,A[c>>2])},X:function(a,b,c,d){t.scissor(a,b,c,d)},W:function(a,b,c,d){for(var e="",f=0;f<b;++f){var g=d?A[d+4*f>>2]:-1;e+=wa(A[c+4*f>>2],0>g?void 0:g)}t.shaderSource(S[a],e)},V:function(a,b,c){t.stencilFunc(a,b,c)},U:function(a,b,c,d){t.stencilFuncSeparate(a,
b,c,d)},T:function(a){t.stencilMask(a)},S:function(a,b){t.stencilMaskSeparate(a,b)},R:function(a,b,c){t.stencilOp(a,b,c)},Q:function(a,b,c,d){t.stencilOpSeparate(a,b,c,d)},P:function(a,b,c,d,e,f,g,k,n){if(2<=m.version)if(t.wd)t.texImage2D(a,b,c,d,e,f,g,k,n);else if(n){var q=Bc(k);t.texImage2D(a,b,c,d,e,f,g,k,q,n>>31-Math.clz32(q.BYTES_PER_ELEMENT))}else t.texImage2D(a,b,c,d,e,f,g,k,null);else t.texImage2D(a,b,c,d,e,f,g,k,n?Cc(k,g,d,e,n):null)},O:function(a,b,c){t.texParameterf(a,b,c)},N:function(a,
b,c){t.texParameterf(a,b,F[c>>2])},M:function(a,b,c){t.texParameteri(a,b,c)},L:function(a,b,c){t.texParameteri(a,b,A[c>>2])},Wb:function(a,b,c,d,e){t.texStorage2D(a,b,c,d,e)},K:function(a,b,c,d,e,f,g,k,n){if(2<=m.version)if(t.wd)t.texSubImage2D(a,b,c,d,e,f,g,k,n);else if(n){var q=Bc(k);t.texSubImage2D(a,b,c,d,e,f,g,k,q,n>>31-Math.clz32(q.BYTES_PER_ELEMENT))}else t.texSubImage2D(a,b,c,d,e,f,g,k,null);else q=null,n&&(q=Cc(k,g,e,f,n)),t.texSubImage2D(a,b,c,d,e,f,g,k,q)},J:function(a,b){t.uniform1f(U(a),
b)},I:function(a,b,c){if(2<=m.version)b&&t.uniform1fv(U(a),F,c>>2,b);else{if(288>=b)for(var d=Dc[b-1],e=0;e<b;++e)d[e]=F[c+4*e>>2];else d=F.subarray(c>>2,c+4*b>>2);t.uniform1fv(U(a),d)}},H:function(a,b){t.uniform1i(U(a),b)},G:function(a,b,c){if(2<=m.version)b&&t.uniform1iv(U(a),A,c>>2,b);else{if(288>=b)for(var d=Ec[b-1],e=0;e<b;++e)d[e]=A[c+4*e>>2];else d=A.subarray(c>>2,c+4*b>>2);t.uniform1iv(U(a),d)}},F:function(a,b,c){t.uniform2f(U(a),b,c)},E:function(a,b,c){if(2<=m.version)b&&t.uniform2fv(U(a),
F,c>>2,2*b);else{if(144>=b)for(var d=Dc[2*b-1],e=0;e<2*b;e+=2)d[e]=F[c+4*e>>2],d[e+1]=F[c+(4*e+4)>>2];else d=F.subarray(c>>2,c+8*b>>2);t.uniform2fv(U(a),d)}},D:function(a,b,c){t.uniform2i(U(a),b,c)},C:function(a,b,c){if(2<=m.version)b&&t.uniform2iv(U(a),A,c>>2,2*b);else{if(144>=b)for(var d=Ec[2*b-1],e=0;e<2*b;e+=2)d[e]=A[c+4*e>>2],d[e+1]=A[c+(4*e+4)>>2];else d=A.subarray(c>>2,c+8*b>>2);t.uniform2iv(U(a),d)}},B:function(a,b,c,d){t.uniform3f(U(a),b,c,d)},Dc:function(a,b,c){if(2<=m.version)b&&t.uniform3fv(U(a),
F,c>>2,3*b);else{if(96>=b)for(var d=Dc[3*b-1],e=0;e<3*b;e+=3)d[e]=F[c+4*e>>2],d[e+1]=F[c+(4*e+4)>>2],d[e+2]=F[c+(4*e+8)>>2];else d=F.subarray(c>>2,c+12*b>>2);t.uniform3fv(U(a),d)}},Cc:function(a,b,c,d){t.uniform3i(U(a),b,c,d)},Bc:function(a,b,c){if(2<=m.version)b&&t.uniform3iv(U(a),A,c>>2,3*b);else{if(96>=b)for(var d=Ec[3*b-1],e=0;e<3*b;e+=3)d[e]=A[c+4*e>>2],d[e+1]=A[c+(4*e+4)>>2],d[e+2]=A[c+(4*e+8)>>2];else d=A.subarray(c>>2,c+12*b>>2);t.uniform3iv(U(a),d)}},Ac:function(a,b,c,d,e){t.uniform4f(U(a),
b,c,d,e)},zc:function(a,b,c){if(2<=m.version)b&&t.uniform4fv(U(a),F,c>>2,4*b);else{if(72>=b){var d=Dc[4*b-1],e=F;c>>=2;for(var f=0;f<4*b;f+=4){var g=c+f;d[f]=e[g];d[f+1]=e[g+1];d[f+2]=e[g+2];d[f+3]=e[g+3]}}else d=F.subarray(c>>2,c+16*b>>2);t.uniform4fv(U(a),d)}},yc:function(a,b,c,d,e){t.uniform4i(U(a),b,c,d,e)},xc:function(a,b,c){if(2<=m.version)b&&t.uniform4iv(U(a),A,c>>2,4*b);else{if(72>=b)for(var d=Ec[4*b-1],e=0;e<4*b;e+=4)d[e]=A[c+4*e>>2],d[e+1]=A[c+(4*e+4)>>2],d[e+2]=A[c+(4*e+8)>>2],d[e+3]=A[c+
(4*e+12)>>2];else d=A.subarray(c>>2,c+16*b>>2);t.uniform4iv(U(a),d)}},wc:function(a,b,c,d){if(2<=m.version)b&&t.uniformMatrix2fv(U(a),!!c,F,d>>2,4*b);else{if(72>=b)for(var e=Dc[4*b-1],f=0;f<4*b;f+=4)e[f]=F[d+4*f>>2],e[f+1]=F[d+(4*f+4)>>2],e[f+2]=F[d+(4*f+8)>>2],e[f+3]=F[d+(4*f+12)>>2];else e=F.subarray(d>>2,d+16*b>>2);t.uniformMatrix2fv(U(a),!!c,e)}},vc:function(a,b,c,d){if(2<=m.version)b&&t.uniformMatrix3fv(U(a),!!c,F,d>>2,9*b);else{if(32>=b)for(var e=Dc[9*b-1],f=0;f<9*b;f+=9)e[f]=F[d+4*f>>2],e[f+
1]=F[d+(4*f+4)>>2],e[f+2]=F[d+(4*f+8)>>2],e[f+3]=F[d+(4*f+12)>>2],e[f+4]=F[d+(4*f+16)>>2],e[f+5]=F[d+(4*f+20)>>2],e[f+6]=F[d+(4*f+24)>>2],e[f+7]=F[d+(4*f+28)>>2],e[f+8]=F[d+(4*f+32)>>2];else e=F.subarray(d>>2,d+36*b>>2);t.uniformMatrix3fv(U(a),!!c,e)}},uc:function(a,b,c,d){if(2<=m.version)b&&t.uniformMatrix4fv(U(a),!!c,F,d>>2,16*b);else{if(18>=b){var e=Dc[16*b-1],f=F;d>>=2;for(var g=0;g<16*b;g+=16){var k=d+g;e[g]=f[k];e[g+1]=f[k+1];e[g+2]=f[k+2];e[g+3]=f[k+3];e[g+4]=f[k+4];e[g+5]=f[k+5];e[g+6]=f[k+
6];e[g+7]=f[k+7];e[g+8]=f[k+8];e[g+9]=f[k+9];e[g+10]=f[k+10];e[g+11]=f[k+11];e[g+12]=f[k+12];e[g+13]=f[k+13];e[g+14]=f[k+14];e[g+15]=f[k+15]}}else e=F.subarray(d>>2,d+64*b>>2);t.uniformMatrix4fv(U(a),!!c,e)}},sc:function(a){a=R[a];t.useProgram(a);t.le=a},rc:function(a,b){t.vertexAttrib1f(a,b)},qc:function(a,b){t.vertexAttrib2f(a,F[b>>2],F[b+4>>2])},pc:function(a,b){t.vertexAttrib3f(a,F[b>>2],F[b+4>>2],F[b+8>>2])},oc:function(a,b){t.vertexAttrib4f(a,F[b>>2],F[b+4>>2],F[b+8>>2],F[b+12>>2])},Vb:function(a,
b){t.vertexAttribDivisor(a,b)},Ub:function(a,b,c,d,e){t.vertexAttribIPointer(a,b,c,d,e)},nc:function(a,b,c,d,e,f){t.vertexAttribPointer(a,b,c,!!d,e,f)},mc:function(a,b,c,d){t.viewport(a,b,c,d)},Wa:function(a,b,c,d){t.waitSync(qc[a],b,(c>>>0)+4294967296*d)},gb:function(a){var b=y.length;a>>>=0;if(2147483648<a)return!1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);var e=Math;d=Math.max(a,d);e=e.min.call(e,2147483648,d+(65536-d%65536)%65536);a:{try{sa.grow(e-za.byteLength+65535>>>
16);Ea();var f=1;break a}catch(g){}f=void 0}if(f)return!0}return!1},hb:function(a,b){var c=0;Gc().forEach(function(d,e){var f=b+c;e=B[a+4*e>>2]=f;for(f=0;f<d.length;++f)Aa[e++>>0]=d.charCodeAt(f);Aa[e>>0]=0;c+=d.length+1});return 0},ib:function(a,b){var c=Gc();B[a>>2]=c.length;var d=0;c.forEach(function(e){d+=e.length+1});B[b>>2]=d;return 0},nb:function(){return 52},Za:function(){return 70},lb:function(a,b,c,d){for(var e=0,f=0;f<c;f++){var g=B[b>>2],k=B[b+4>>2];b+=8;for(var n=0;n<k;n++){var q=y[g+
n],r=Ic[a];0===q||10===q?((1===a?oa:pa)(va(r,0)),r.length=0):r.push(q)}e+=k}B[d>>2]=e;return 0},Xa:function(a,b){t.bindFramebuffer(a,lc[b])},x:function(a,b){xc(a,b)},n:Sc,h:Tc,l:Uc,r:Vc,ab:Wc,bb:Xc,q:Yc,k:Zc,b:$c,d:ad,e:bd,y:cd,cb:dd,fb:function(a,b,c,d){return Nc(a,b,c,d)}};
(function(){function a(e){h.asm=e.exports;sa=h.asm.Fc;Ea();Fa=h.asm.Lc;Ha.unshift(h.asm.Gc);Ka--;h.monitorRunDependencies&&h.monitorRunDependencies(Ka);0==Ka&&(null!==La&&(clearInterval(La),La=null),Ma&&(e=Ma,Ma=null,e()))}function b(e){a(e.instance)}function c(e){return Qa().then(function(f){return WebAssembly.instantiate(f,d)}).then(function(f){return f}).then(e,function(f){pa("failed to asynchronously prepare wasm: "+f);ra(f)})}var d={a:ed};Ka++;h.monitorRunDependencies&&h.monitorRunDependencies(Ka);
if(h.instantiateWasm)try{return h.instantiateWasm(d,a)}catch(e){pa("Module.instantiateWasm callback failed with error: "+e),ba(e)}(function(){return qa||"function"!=typeof WebAssembly.instantiateStreaming||Na()||H.startsWith("file://")||"function"!=typeof fetch?c(b):fetch(H,{credentials:"same-origin"}).then(function(e){return WebAssembly.instantiateStreaming(e,d).then(b,function(f){pa("wasm streaming compile failed: "+f);pa("falling back to ArrayBuffer instantiation");return c(b)})})})().catch(ba);
return{}})();h.___wasm_call_ctors=function(){return(h.___wasm_call_ctors=h.asm.Gc).apply(null,arguments)};var zc=h._malloc=function(){return(zc=h._malloc=h.asm.Hc).apply(null,arguments)},Ib=h._free=function(){return(Ib=h._free=h.asm.Ic).apply(null,arguments)},Hb=h.___getTypeName=function(){return(Hb=h.___getTypeName=h.asm.Jc).apply(null,arguments)};h.__embind_initialize_bindings=function(){return(h.__embind_initialize_bindings=h.asm.Kc).apply(null,arguments)};
var W=h._setThrew=function(){return(W=h._setThrew=h.asm.Mc).apply(null,arguments)},X=h.stackSave=function(){return(X=h.stackSave=h.asm.Nc).apply(null,arguments)},Z=h.stackRestore=function(){return(Z=h.stackRestore=h.asm.Oc).apply(null,arguments)};h.dynCall_iiiij=function(){return(h.dynCall_iiiij=h.asm.Pc).apply(null,arguments)};h.dynCall_viiij=function(){return(h.dynCall_viiij=h.asm.Qc).apply(null,arguments)};h.dynCall_iiij=function(){return(h.dynCall_iiij=h.asm.Rc).apply(null,arguments)};
h.dynCall_viij=function(){return(h.dynCall_viij=h.asm.Sc).apply(null,arguments)};h.dynCall_viiiiij=function(){return(h.dynCall_viiiiij=h.asm.Tc).apply(null,arguments)};h.dynCall_jii=function(){return(h.dynCall_jii=h.asm.Uc).apply(null,arguments)};h.dynCall_viji=function(){return(h.dynCall_viji=h.asm.Vc).apply(null,arguments)};h.dynCall_ji=function(){return(h.dynCall_ji=h.asm.Wc).apply(null,arguments)};h.dynCall_iij=function(){return(h.dynCall_iij=h.asm.Xc).apply(null,arguments)};
h.dynCall_vij=function(){return(h.dynCall_vij=h.asm.Yc).apply(null,arguments)};h.dynCall_jiji=function(){return(h.dynCall_jiji=h.asm.Zc).apply(null,arguments)};h.dynCall_viijii=function(){return(h.dynCall_viijii=h.asm._c).apply(null,arguments)};h.dynCall_iiiiij=function(){return(h.dynCall_iiiiij=h.asm.$c).apply(null,arguments)};h.dynCall_iiiiijj=function(){return(h.dynCall_iiiiijj=h.asm.ad).apply(null,arguments)};h.dynCall_iiiiiijj=function(){return(h.dynCall_iiiiiijj=h.asm.bd).apply(null,arguments)};
function $c(a,b,c){var d=X();try{O(a)(b,c)}catch(e){Z(d);if(e!==e+0)throw e;W(1,0)}}function Uc(a,b,c,d){var e=X();try{return O(a)(b,c,d)}catch(f){Z(e);if(f!==f+0)throw f;W(1,0)}}function bd(a,b,c,d,e){var f=X();try{O(a)(b,c,d,e)}catch(g){Z(f);if(g!==g+0)throw g;W(1,0)}}function Zc(a,b){var c=X();try{O(a)(b)}catch(d){Z(c);if(d!==d+0)throw d;W(1,0)}}function Tc(a,b,c){var d=X();try{return O(a)(b,c)}catch(e){Z(d);if(e!==e+0)throw e;W(1,0)}}
function Vc(a,b,c,d,e){var f=X();try{return O(a)(b,c,d,e)}catch(g){Z(f);if(g!==g+0)throw g;W(1,0)}}function ad(a,b,c,d){var e=X();try{O(a)(b,c,d)}catch(f){Z(e);if(f!==f+0)throw f;W(1,0)}}function Sc(a,b){var c=X();try{return O(a)(b)}catch(d){Z(c);if(d!==d+0)throw d;W(1,0)}}function Yc(a){var b=X();try{O(a)()}catch(c){Z(b);if(c!==c+0)throw c;W(1,0)}}function dd(a,b,c,d,e,f,g,k,n){var q=X();try{O(a)(b,c,d,e,f,g,k,n)}catch(r){Z(q);if(r!==r+0)throw r;W(1,0)}}
function Xc(a,b,c,d,e,f,g){var k=X();try{return O(a)(b,c,d,e,f,g)}catch(n){Z(k);if(n!==n+0)throw n;W(1,0)}}function Wc(a,b,c,d,e,f){var g=X();try{return O(a)(b,c,d,e,f)}catch(k){Z(g);if(k!==k+0)throw k;W(1,0)}}function cd(a,b,c,d,e,f,g){var k=X();try{O(a)(b,c,d,e,f,g)}catch(n){Z(k);if(n!==n+0)throw n;W(1,0)}}var fd;Ma=function gd(){fd||hd();fd||(Ma=gd)};
function hd(){function a(){if(!fd&&(fd=!0,h.calledRun=!0,!ta)){Ra(Ha);aa(h);if(h.onRuntimeInitialized)h.onRuntimeInitialized();if(h.postRun)for("function"==typeof h.postRun&&(h.postRun=[h.postRun]);h.postRun.length;){var b=h.postRun.shift();Ia.unshift(b)}Ra(Ia)}}if(!(0<Ka)){if(h.preRun)for("function"==typeof h.preRun&&(h.preRun=[h.preRun]);h.preRun.length;)Ja();Ra(Ga);0<Ka||(h.setStatus?(h.setStatus("Running..."),setTimeout(function(){setTimeout(function(){h.setStatus("")},1);a()},1)):a())}}
if(h.preInit)for("function"==typeof h.preInit&&(h.preInit=[h.preInit]);0<h.preInit.length;)h.preInit.pop()();hd();


  return Rive.ready
}
);
})();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Rive);

/***/ }),
/* 2 */
/***/ ((module) => {

module.exports = JSON.parse('{"name":"@rive-app/webgl","version":"1.1.9","description":"Rive\'s webgl based web api.","main":"rive.js","homepage":"https://rive.app","repository":{"type":"git","url":"https://github.com/rive-app/rive-wasm/tree/master/js"},"keywords":["rive","animation"],"author":"Rive","contributors":["Luigi Rosso <luigi@rive.app> (https://rive.app)","Maxwell Talbot <max@rive.app> (https://rive.app)","Arthur Vivian <arthur@rive.app> (https://rive.app)","Umberto Sonnino <umberto@rive.app> (https://rive.app)","Matthew Sullivan <matt.j.sullivan@gmail.com> (mailto:matt.j.sullivan@gmail.com)"],"license":"MIT","files":["rive.js","rive.wasm","rive.js.map","rive.d.ts","rive_advanced.mjs.d.ts"],"typings":"rive.d.ts","dependencies":{},"browser":{"fs":false,"path":false}}');

/***/ }),
/* 3 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "registerTouchInteractions": () => (/* reexport safe */ _registerTouchInteractions__WEBPACK_IMPORTED_MODULE_0__.registerTouchInteractions)
/* harmony export */ });
/* harmony import */ var _registerTouchInteractions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);



/***/ }),
/* 4 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "registerTouchInteractions": () => (/* binding */ registerTouchInteractions)
/* harmony export */ });
var _this = undefined;
/**
 * Returns the clientX and clientY properties from touch or mouse events. Also
 * calls preventDefault() on the event if it is a touchstart or touchmove to prevent
 * scrolling the page on mobile devices
 * @param event - Either a TouchEvent or a MouseEvent
 * @returns - Coordinates of the clientX and clientY properties from the touch/mouse event
 */
var getClientCoordinates = function (event) {
    var _a, _b;
    if (["touchstart", "touchmove"].indexOf(event.type) > -1 &&
        ((_a = event.touches) === null || _a === void 0 ? void 0 : _a.length)) {
        event.preventDefault();
        return {
            clientX: event.touches[0].clientX,
            clientY: event.touches[0].clientY,
        };
    }
    else if (event.type === "touchend" &&
        ((_b = event.changedTouches) === null || _b === void 0 ? void 0 : _b.length)) {
        return {
            clientX: event.changedTouches[0].clientX,
            clientY: event.changedTouches[0].clientY,
        };
    }
    else {
        return {
            clientX: event.clientX,
            clientY: event.clientY,
        };
    }
};
/**
 * Registers mouse move/up/down callback handlers on the canvas to send meaningful coordinates to
 * the state machine pointer move/up/down functions based on cursor interaction
 */
var registerTouchInteractions = function (_a) {
    var canvas = _a.canvas, artboard = _a.artboard, _b = _a.stateMachines, stateMachines = _b === void 0 ? [] : _b, renderer = _a.renderer, rive = _a.rive, fit = _a.fit, alignment = _a.alignment;
    if (!canvas ||
        !stateMachines.length ||
        !renderer ||
        !rive ||
        !artboard ||
        typeof window === "undefined") {
        return null;
    }
    var processEventCallback = function (event) {
        var boundingRect = event.currentTarget.getBoundingClientRect();
        var _a = getClientCoordinates(event), clientX = _a.clientX, clientY = _a.clientY;
        if (!clientX && !clientY) {
            return;
        }
        var canvasX = clientX - boundingRect.left;
        var canvasY = clientY - boundingRect.top;
        var forwardMatrix = rive.computeAlignment(fit, alignment, {
            minX: 0,
            minY: 0,
            maxX: boundingRect.width,
            maxY: boundingRect.height,
        }, artboard.bounds);
        var invertedMatrix = new rive.Mat2D();
        forwardMatrix.invert(invertedMatrix);
        var canvasCoordinatesVector = new rive.Vec2D(canvasX, canvasY);
        var transformedVector = rive.mapXY(invertedMatrix, canvasCoordinatesVector);
        var transformedX = transformedVector.x();
        var transformedY = transformedVector.y();
        transformedVector.delete();
        invertedMatrix.delete();
        canvasCoordinatesVector.delete();
        forwardMatrix.delete();
        switch (event.type) {
            // Pointer moving/hovering on the canvas
            case "touchmove":
            case "mouseover":
            case "mouseout":
            case "mousemove": {
                for (var _i = 0, stateMachines_1 = stateMachines; _i < stateMachines_1.length; _i++) {
                    var stateMachine = stateMachines_1[_i];
                    stateMachine.pointerMove(transformedX, transformedY);
                }
                break;
            }
            // Pointer click initiated but not released yet on the canvas
            case "touchstart":
            case "mousedown": {
                for (var _b = 0, stateMachines_2 = stateMachines; _b < stateMachines_2.length; _b++) {
                    var stateMachine = stateMachines_2[_b];
                    stateMachine.pointerDown(transformedX, transformedY);
                }
                break;
            }
            // Pointer click released on the canvas
            case "touchend":
            case "mouseup": {
                for (var _c = 0, stateMachines_3 = stateMachines; _c < stateMachines_3.length; _c++) {
                    var stateMachine = stateMachines_3[_c];
                    stateMachine.pointerUp(transformedX, transformedY);
                }
                break;
            }
            default:
        }
    };
    var callback = processEventCallback.bind(_this);
    canvas.addEventListener("mouseover", callback);
    canvas.addEventListener("mouseout", callback);
    canvas.addEventListener("mousemove", callback);
    canvas.addEventListener("mousedown", callback);
    canvas.addEventListener("mouseup", callback);
    canvas.addEventListener("touchmove", callback);
    canvas.addEventListener("touchstart", callback);
    canvas.addEventListener("touchend", callback);
    return function () {
        canvas.removeEventListener("mouseover", callback);
        canvas.removeEventListener("mouseout", callback);
        canvas.removeEventListener("mousemove", callback);
        canvas.removeEventListener("mousedown", callback);
        canvas.removeEventListener("mouseup", callback);
        canvas.removeEventListener("touchmove", callback);
        canvas.removeEventListener("touchstart", callback);
        canvas.removeEventListener("touchend", callback);
    };
};


/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Fit": () => (/* binding */ Fit),
/* harmony export */   "Alignment": () => (/* binding */ Alignment),
/* harmony export */   "Layout": () => (/* binding */ Layout),
/* harmony export */   "RuntimeLoader": () => (/* binding */ RuntimeLoader),
/* harmony export */   "StateMachineInputType": () => (/* binding */ StateMachineInputType),
/* harmony export */   "StateMachineInput": () => (/* binding */ StateMachineInput),
/* harmony export */   "EventType": () => (/* binding */ EventType),
/* harmony export */   "LoopType": () => (/* binding */ LoopType),
/* harmony export */   "Rive": () => (/* binding */ Rive),
/* harmony export */   "Testing": () => (/* binding */ Testing)
/* harmony export */ });
/* harmony import */ var _rive_advanced_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var package_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};



// #region layout
// Fit options for the canvas
var Fit;
(function (Fit) {
    Fit["Cover"] = "cover";
    Fit["Contain"] = "contain";
    Fit["Fill"] = "fill";
    Fit["FitWidth"] = "fitWidth";
    Fit["FitHeight"] = "fitHeight";
    Fit["None"] = "none";
    Fit["ScaleDown"] = "scaleDown";
})(Fit || (Fit = {}));
// Alignment options for the canvas
var Alignment;
(function (Alignment) {
    Alignment["Center"] = "center";
    Alignment["TopLeft"] = "topLeft";
    Alignment["TopCenter"] = "topCenter";
    Alignment["TopRight"] = "topRight";
    Alignment["CenterLeft"] = "centerLeft";
    Alignment["CenterRight"] = "centerRight";
    Alignment["BottomLeft"] = "bottomLeft";
    Alignment["BottomCenter"] = "bottomCenter";
    Alignment["BottomRight"] = "bottomRight";
})(Alignment || (Alignment = {}));
// Alignment options for Rive animations in a HTML canvas
var Layout = /** @class */ (function () {
    function Layout(params) {
        var _a, _b, _c, _d, _e, _f;
        this.fit = (_a = params === null || params === void 0 ? void 0 : params.fit) !== null && _a !== void 0 ? _a : Fit.Contain;
        this.alignment = (_b = params === null || params === void 0 ? void 0 : params.alignment) !== null && _b !== void 0 ? _b : Alignment.Center;
        this.minX = (_c = params === null || params === void 0 ? void 0 : params.minX) !== null && _c !== void 0 ? _c : 0;
        this.minY = (_d = params === null || params === void 0 ? void 0 : params.minY) !== null && _d !== void 0 ? _d : 0;
        this.maxX = (_e = params === null || params === void 0 ? void 0 : params.maxX) !== null && _e !== void 0 ? _e : 0;
        this.maxY = (_f = params === null || params === void 0 ? void 0 : params.maxY) !== null && _f !== void 0 ? _f : 0;
    }
    // Alternative constructor to build a Layout from an interface/object
    Layout.new = function (_a) {
        var fit = _a.fit, alignment = _a.alignment, minX = _a.minX, minY = _a.minY, maxX = _a.maxX, maxY = _a.maxY;
        console.warn("This function is deprecated: please use `new Layout({})` instead");
        return new Layout({ fit: fit, alignment: alignment, minX: minX, minY: minY, maxX: maxX, maxY: maxY });
    };
    /**
     * Makes a copy of the layout, replacing any specified parameters
     */
    Layout.prototype.copyWith = function (_a) {
        var fit = _a.fit, alignment = _a.alignment, minX = _a.minX, minY = _a.minY, maxX = _a.maxX, maxY = _a.maxY;
        return new Layout({
            fit: fit !== null && fit !== void 0 ? fit : this.fit,
            alignment: alignment !== null && alignment !== void 0 ? alignment : this.alignment,
            minX: minX !== null && minX !== void 0 ? minX : this.minX,
            minY: minY !== null && minY !== void 0 ? minY : this.minY,
            maxX: maxX !== null && maxX !== void 0 ? maxX : this.maxX,
            maxY: maxY !== null && maxY !== void 0 ? maxY : this.maxY,
        });
    };
    // Returns fit for the Wasm runtime format
    Layout.prototype.runtimeFit = function (rive) {
        if (this.cachedRuntimeFit)
            return this.cachedRuntimeFit;
        var fit;
        if (this.fit === Fit.Cover)
            fit = rive.Fit.cover;
        else if (this.fit === Fit.Contain)
            fit = rive.Fit.contain;
        else if (this.fit === Fit.Fill)
            fit = rive.Fit.fill;
        else if (this.fit === Fit.FitWidth)
            fit = rive.Fit.fitWidth;
        else if (this.fit === Fit.FitHeight)
            fit = rive.Fit.fitHeight;
        else if (this.fit === Fit.ScaleDown)
            fit = rive.Fit.scaleDown;
        else
            fit = rive.Fit.none;
        this.cachedRuntimeFit = fit;
        return fit;
    };
    // Returns alignment for the Wasm runtime format
    Layout.prototype.runtimeAlignment = function (rive) {
        if (this.cachedRuntimeAlignment)
            return this.cachedRuntimeAlignment;
        var alignment;
        if (this.alignment === Alignment.TopLeft)
            alignment = rive.Alignment.topLeft;
        else if (this.alignment === Alignment.TopCenter)
            alignment = rive.Alignment.topCenter;
        else if (this.alignment === Alignment.TopRight)
            alignment = rive.Alignment.topRight;
        else if (this.alignment === Alignment.CenterLeft)
            alignment = rive.Alignment.centerLeft;
        else if (this.alignment === Alignment.CenterRight)
            alignment = rive.Alignment.centerRight;
        else if (this.alignment === Alignment.BottomLeft)
            alignment = rive.Alignment.bottomLeft;
        else if (this.alignment === Alignment.BottomCenter)
            alignment = rive.Alignment.bottomCenter;
        else if (this.alignment === Alignment.BottomRight)
            alignment = rive.Alignment.bottomRight;
        else
            alignment = rive.Alignment.center;
        this.cachedRuntimeAlignment = alignment;
        return alignment;
    };
    return Layout;
}());

// Runtime singleton; use getInstance to provide a callback that returns the
// Rive runtime
var RuntimeLoader = /** @class */ (function () {
    // Class is never instantiated
    function RuntimeLoader() {
    }
    // Loads the runtime
    RuntimeLoader.loadRuntime = function () {
        _rive_advanced_mjs__WEBPACK_IMPORTED_MODULE_0__.default({
            // Loads Wasm bundle
            locateFile: function () { return RuntimeLoader.wasmURL; },
        }).then(function (rive) {
            var _a;
            RuntimeLoader.runtime = rive;
            // Fire all the callbacks
            while (RuntimeLoader.callBackQueue.length > 0) {
                (_a = RuntimeLoader.callBackQueue.shift()) === null || _a === void 0 ? void 0 : _a(RuntimeLoader.runtime);
            }
        });
    };
    // Provides a runtime instance via a callback
    RuntimeLoader.getInstance = function (callback) {
        // If it's not loading, start loading runtime
        if (!RuntimeLoader.isLoading) {
            RuntimeLoader.isLoading = true;
            RuntimeLoader.loadRuntime();
        }
        if (!RuntimeLoader.runtime) {
            RuntimeLoader.callBackQueue.push(callback);
        }
        else {
            callback(RuntimeLoader.runtime);
        }
    };
    // Provides a runtime instance via a promise
    RuntimeLoader.awaitInstance = function () {
        return new Promise(function (resolve) {
            return RuntimeLoader.getInstance(function (rive) { return resolve(rive); });
        });
    };
    // Manually sets the wasm url
    RuntimeLoader.setWasmUrl = function (url) {
        RuntimeLoader.wasmURL = url;
    };
    // Flag to indicate that loading has started/completed
    RuntimeLoader.isLoading = false;
    // List of callbacks for the runtime that come in while loading
    RuntimeLoader.callBackQueue = [];
    // Path to the Wasm file; default path works for testing only;
    // if embedded wasm is used then this is never used.
    RuntimeLoader.wasmURL = "https://unpkg.com/" + package_json__WEBPACK_IMPORTED_MODULE_1__.name + "@" + package_json__WEBPACK_IMPORTED_MODULE_1__.version + "/rive.wasm";
    return RuntimeLoader;
}());

// #endregion
// #region animations
// Wraps animations and instances from the runtime and keeps track of playback
// state
var Animation = /** @class */ (function () {
    /**
     * Constructs a new animation
     * @constructor
     * @param {any} animation: runtime animation object
     * @param {any} instance: runtime animation instance object
     */
    function Animation(animation, artboard, runtime, playing) {
        this.animation = animation;
        this.artboard = artboard;
        this.playing = playing;
        this.loopCount = 0;
        // Time to which the animation should move to on the next render
        this.scrubTo = null;
        this.instance = new runtime.LinearAnimationInstance(animation, artboard);
    }
    Object.defineProperty(Animation.prototype, "name", {
        // Returns the animation's name
        get: function () {
            return this.animation.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Animation.prototype, "time", {
        // Returns the animation's current time
        get: function () {
            return this.instance.time;
        },
        // Sets the animation's current time
        set: function (value) {
            this.instance.time = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Animation.prototype, "loopValue", {
        // Returns the animation's loop type
        get: function () {
            return this.animation.loopValue;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Advances the animation by the give time. If the animation needs scrubbing,
     * time is ignored and the stored scrub value is used.
     * @param time the time to advance the animation by if no scrubbing required
     */
    Animation.prototype.advance = function (time) {
        if (this.scrubTo === null) {
            this.instance.advance(time);
        }
        else {
            this.instance.time = 0;
            this.instance.advance(this.scrubTo);
            this.scrubTo = null;
        }
    };
    /**
     * Apply interpolated keyframe values to the artboard. This should be called after calling
     * .advance() on an animation instance so that new values are applied to properties.
     *
     * Note: This does not advance the artboard, which updates all objects on the artboard
     * @param mix - Mix value for the animation from 0 to 1
     */
    Animation.prototype.apply = function (mix) {
        this.instance.apply(mix);
    };
    Object.defineProperty(Animation.prototype, "needsScrub", {
        get: function () {
            return this.scrubTo !== null;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Deletes the backing Wasm animation instance; once this is called, this
     * animation is no more.
     */
    Animation.prototype.cleanup = function () {
        this.instance.delete();
    };
    return Animation;
}());
// #endregion
// #region state machines
var StateMachineInputType;
(function (StateMachineInputType) {
    StateMachineInputType[StateMachineInputType["Number"] = 56] = "Number";
    StateMachineInputType[StateMachineInputType["Trigger"] = 58] = "Trigger";
    StateMachineInputType[StateMachineInputType["Boolean"] = 59] = "Boolean";
})(StateMachineInputType || (StateMachineInputType = {}));
/**
 * An input for a state machine
 */
var StateMachineInput = /** @class */ (function () {
    function StateMachineInput(type, runtimeInput) {
        this.type = type;
        this.runtimeInput = runtimeInput;
    }
    Object.defineProperty(StateMachineInput.prototype, "name", {
        /**
         * Returns the name of the input
         */
        get: function () {
            return this.runtimeInput.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StateMachineInput.prototype, "value", {
        /**
         * Returns the current value of the input
         */
        get: function () {
            return this.runtimeInput.value;
        },
        /**
         * Sets the value of the input
         */
        set: function (value) {
            this.runtimeInput.value = value;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Fires a trigger; does nothing on Number or Boolean input types
     */
    StateMachineInput.prototype.fire = function () {
        if (this.type === StateMachineInputType.Trigger) {
            this.runtimeInput.fire();
        }
    };
    return StateMachineInput;
}());

var StateMachine = /** @class */ (function () {
    /**
     * @constructor
     * @param stateMachine runtime state machine object
     * @param instance runtime state machine instance object
     */
    function StateMachine(stateMachine, runtime, playing, artboard) {
        this.stateMachine = stateMachine;
        this.playing = playing;
        this.artboard = artboard;
        /**
         * Caches the inputs from the runtime
         */
        this.inputs = [];
        this.instance = new runtime.StateMachineInstance(stateMachine, artboard);
        this.initInputs(runtime);
    }
    Object.defineProperty(StateMachine.prototype, "name", {
        get: function () {
            return this.stateMachine.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(StateMachine.prototype, "statesChanged", {
        /**
         * Returns a list of state names that have changed on this frame
         */
        get: function () {
            var names = [];
            for (var i = 0; i < this.instance.stateChangedCount(); i++) {
                names.push(this.instance.stateChangedNameByIndex(i));
            }
            return names;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Advances the state machine instance by a given time.
     * @param time - the time to advance the animation by in seconds
     */
    StateMachine.prototype.advance = function (time) {
        this.instance.advance(time);
    };
    /**
     * Fetches references to the state machine's inputs and caches them
     * @param runtime an instance of the runtime; needed for the SMIInput types
     */
    StateMachine.prototype.initInputs = function (runtime) {
        // Fetch the inputs from the runtime if we don't have them
        for (var i = 0; i < this.instance.inputCount(); i++) {
            var input = this.instance.input(i);
            this.inputs.push(this.mapRuntimeInput(input, runtime));
        }
    };
    /**
     * Maps a runtime input to it's appropriate type
     * @param input
     */
    StateMachine.prototype.mapRuntimeInput = function (input, runtime) {
        if (input.type === runtime.SMIInput.bool) {
            return new StateMachineInput(StateMachineInputType.Boolean, input.asBool());
        }
        else if (input.type === runtime.SMIInput.number) {
            return new StateMachineInput(StateMachineInputType.Number, input.asNumber());
        }
        else if (input.type === runtime.SMIInput.trigger) {
            return new StateMachineInput(StateMachineInputType.Trigger, input.asTrigger());
        }
    };
    /**
     * Deletes the backing Wasm state machine instance; once this is called, this
     * state machine is no more.
     */
    StateMachine.prototype.cleanup = function () {
        this.instance.delete();
    };
    return StateMachine;
}());
// #endregion
// #region animator
/**
 * Manages animation
 */
var Animator = /** @class */ (function () {
    /**
     * Constructs a new animator
     * @constructor
     * @param runtime Rive runtime; needed to instance animations & state machines
     * @param artboard the artboard that holds all animations and state machines
     * @param animations optional list of animations
     * @param stateMachines optional list of state machines
     */
    function Animator(runtime, artboard, eventManager, animations, stateMachines) {
        if (animations === void 0) { animations = []; }
        if (stateMachines === void 0) { stateMachines = []; }
        this.runtime = runtime;
        this.artboard = artboard;
        this.eventManager = eventManager;
        this.animations = animations;
        this.stateMachines = stateMachines;
    }
    /**
     * Adds animations and state machines by their names. If names are shared
     * between animations & state machines, then the first one found will be
     * created. Best not to use the same names for these in your Rive file.
     * @param animatable the name(s) of animations and state machines to add
     * @returns a list of names of the playing animations and state machines
     */
    Animator.prototype.add = function (animatables, playing, fireEvent) {
        if (fireEvent === void 0) { fireEvent = true; }
        animatables = mapToStringArray(animatables);
        // If animatables is empty, play or pause everything
        if (animatables.length === 0) {
            this.animations.forEach(function (a) { return (a.playing = playing); });
            this.stateMachines.forEach(function (m) { return (m.playing = playing); });
        }
        else {
            // Play/pause already instanced items, or create new instances
            var instancedAnimationNames = this.animations.map(function (a) { return a.name; });
            var instancedMachineNames = this.stateMachines.map(function (m) { return m.name; });
            for (var i in animatables) {
                var aIndex = instancedAnimationNames.indexOf(animatables[i]);
                var mIndex = instancedMachineNames.indexOf(animatables[i]);
                if (aIndex >= 0 || mIndex >= 0) {
                    if (aIndex >= 0) {
                        // Animation is instanced, play/pause it
                        this.animations[aIndex].playing = playing;
                    }
                    else {
                        // State machine is instanced, play/pause it
                        this.stateMachines[mIndex].playing = playing;
                    }
                }
                else {
                    // Try to create a new animation instance
                    var anim = this.artboard.animationByName(animatables[i]);
                    if (anim) {
                        var newAnimation = new Animation(anim, this.artboard, this.runtime, playing);
                        // Display the first frame of the specified animation
                        newAnimation.advance(0);
                        newAnimation.apply(1.0);
                        this.animations.push(newAnimation);
                    }
                    else {
                        // Try to create a new state machine instance
                        var sm = this.artboard.stateMachineByName(animatables[i]);
                        if (sm) {
                            var newStateMachine = new StateMachine(sm, this.runtime, playing, this.artboard);
                            this.stateMachines.push(newStateMachine);
                        }
                    }
                }
            }
        }
        // Fire play/paused events for animations
        if (fireEvent) {
            if (playing) {
                this.eventManager.fire({
                    type: EventType.Play,
                    data: this.playing,
                });
            }
            else {
                this.eventManager.fire({
                    type: EventType.Pause,
                    data: this.paused,
                });
            }
        }
        return playing ? this.playing : this.paused;
    };
    /**
     * Play the named animations/state machines
     * @param animatables the names of the animations/machines to play; plays all if empty
     * @returns a list of the playing items
     */
    Animator.prototype.play = function (animatables) {
        return this.add(animatables, true);
    };
    /**
     * Pauses named animations and state machines, or everything if nothing is
     * specified
     * @param animatables names of the animations and state machines to pause
     * @returns a list of names of the animations and state machines paused
     */
    Animator.prototype.pause = function (animatables) {
        return this.add(animatables, false);
    };
    /**
     * Set time of named animations
     * @param animations names of the animations to scrub
     * @param value time scrub value, a floating point number to which the playhead is jumped
     * @returns a list of names of the animations that were scrubbed
     */
    Animator.prototype.scrub = function (animatables, value) {
        var forScrubbing = this.animations.filter(function (a) {
            return animatables.includes(a.name);
        });
        forScrubbing.forEach(function (a) { return (a.scrubTo = value); });
        return forScrubbing.map(function (a) { return a.name; });
    };
    Object.defineProperty(Animator.prototype, "playing", {
        /**
         * Returns a list of names of all animations and state machines currently
         * playing
         */
        get: function () {
            return this.animations
                .filter(function (a) { return a.playing; })
                .map(function (a) { return a.name; })
                .concat(this.stateMachines.filter(function (m) { return m.playing; }).map(function (m) { return m.name; }));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Animator.prototype, "paused", {
        /**
         * Returns a list of names of all animations and state machines currently
         * paused
         */
        get: function () {
            return this.animations
                .filter(function (a) { return !a.playing; })
                .map(function (a) { return a.name; })
                .concat(this.stateMachines.filter(function (m) { return !m.playing; }).map(function (m) { return m.name; }));
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Stops and removes all named animations and state machines
     * @param animatables animations and state machines to remove
     * @returns a list of names of removed items
     */
    Animator.prototype.stop = function (animatables) {
        var _this = this;
        animatables = mapToStringArray(animatables);
        // If nothing's specified, wipe them out, all of them
        var removedNames = [];
        // Stop everything
        if (animatables.length === 0) {
            removedNames = this.animations
                .map(function (a) { return a.name; })
                .concat(this.stateMachines.map(function (m) { return m.name; }));
            // Clean up before emptying the arrays
            this.animations.forEach(function (a) { return a.cleanup(); });
            this.stateMachines.forEach(function (m) { return m.cleanup(); });
            // Empty out the arrays
            this.animations.splice(0, this.animations.length);
            this.stateMachines.splice(0, this.stateMachines.length);
        }
        else {
            // Remove only the named animations/state machines
            var animationsToRemove = this.animations.filter(function (a) {
                return animatables.includes(a.name);
            });
            animationsToRemove.forEach(function (a) {
                a.cleanup();
                _this.animations.splice(_this.animations.indexOf(a), 1);
            });
            var machinesToRemove = this.stateMachines.filter(function (m) {
                return animatables.includes(m.name);
            });
            machinesToRemove.forEach(function (m) {
                m.cleanup();
                _this.stateMachines.splice(_this.stateMachines.indexOf(m), 1);
            });
            removedNames = animationsToRemove
                .map(function (a) { return a.name; })
                .concat(machinesToRemove.map(function (m) { return m.name; }));
        }
        this.eventManager.fire({
            type: EventType.Stop,
            data: removedNames,
        });
        // Return the list of animations removed
        return removedNames;
    };
    Object.defineProperty(Animator.prototype, "isPlaying", {
        /**
         * Returns true if at least one animation is active
         */
        get: function () {
            return (this.animations.reduce(function (acc, curr) { return acc || curr.playing; }, false) ||
                this.stateMachines.reduce(function (acc, curr) { return acc || curr.playing; }, false));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Animator.prototype, "isPaused", {
        /**
         * Returns true if all animations are paused and there's at least one animation
         */
        get: function () {
            return (!this.isPlaying &&
                (this.animations.length > 0 || this.stateMachines.length > 0));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Animator.prototype, "isStopped", {
        /**
         * Returns true if there are no playing or paused animations/state machines
         */
        get: function () {
            return this.animations.length === 0 && this.stateMachines.length === 0;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * If there are no animations or state machines, add the first one found
     * @returns the name of the animation or state machine instanced
     */
    Animator.prototype.atLeastOne = function (playing, fireEvent) {
        if (fireEvent === void 0) { fireEvent = true; }
        var instancedName;
        if (this.animations.length === 0 && this.stateMachines.length === 0) {
            if (this.artboard.animationCount() > 0) {
                // Add the first animation
                this.add([(instancedName = this.artboard.animationByIndex(0).name)], playing, fireEvent);
            }
            else if (this.artboard.stateMachineCount() > 0) {
                // Add the first state machine
                this.add([(instancedName = this.artboard.stateMachineByIndex(0).name)], playing, fireEvent);
            }
        }
        return instancedName;
    };
    /**
     * Checks if any animations have looped and if so, fire the appropriate event
     */
    Animator.prototype.handleLooping = function () {
        for (var _i = 0, _a = this.animations.filter(function (a) { return a.playing; }); _i < _a.length; _i++) {
            var animation = _a[_i];
            // Emit if the animation looped
            if (animation.loopValue === 0 && animation.loopCount) {
                animation.loopCount = 0;
                // This is a one-shot; if it has ended, delete the instance
                this.stop(animation.name);
            }
            else if (animation.loopValue === 1 && animation.loopCount) {
                this.eventManager.fire({
                    type: EventType.Loop,
                    data: { animation: animation.name, type: LoopType.Loop },
                });
                animation.loopCount = 0;
            }
            // Wasm indicates a loop at each time the animation
            // changes direction, so a full loop/lap occurs every
            // two loop counts
            else if (animation.loopValue === 2 && animation.loopCount > 1) {
                this.eventManager.fire({
                    type: EventType.Loop,
                    data: { animation: animation.name, type: LoopType.PingPong },
                });
                animation.loopCount = 0;
            }
        }
    };
    /**
     * Checks if states have changed in state machines and fires a statechange
     * event
     */
    Animator.prototype.handleStateChanges = function () {
        var statesChanged = [];
        for (var _i = 0, _a = this.stateMachines.filter(function (sm) { return sm.playing; }); _i < _a.length; _i++) {
            var stateMachine = _a[_i];
            statesChanged.push.apply(statesChanged, stateMachine.statesChanged);
        }
        if (statesChanged.length > 0) {
            this.eventManager.fire({
                type: EventType.StateChange,
                data: statesChanged,
            });
        }
    };
    return Animator;
}());
// #endregion
// #region events
/**
 * Supported event types triggered in Rive
 */
var EventType;
(function (EventType) {
    EventType["Load"] = "load";
    EventType["LoadError"] = "loaderror";
    EventType["Play"] = "play";
    EventType["Pause"] = "pause";
    EventType["Stop"] = "stop";
    EventType["Loop"] = "loop";
    EventType["Draw"] = "draw";
    EventType["StateChange"] = "statechange";
})(EventType || (EventType = {}));
/**
 * Looping types: one-shot, loop, and ping-pong
 */
var LoopType;
(function (LoopType) {
    LoopType["OneShot"] = "oneshot";
    LoopType["Loop"] = "loop";
    LoopType["PingPong"] = "pingpong";
})(LoopType || (LoopType = {}));
// Manages Rive events and listeners
var EventManager = /** @class */ (function () {
    function EventManager(listeners) {
        if (listeners === void 0) { listeners = []; }
        this.listeners = listeners;
    }
    // Gets listeners of specified type
    EventManager.prototype.getListeners = function (type) {
        return this.listeners.filter(function (e) { return e.type === type; });
    };
    // Adds a listener
    EventManager.prototype.add = function (listener) {
        if (!this.listeners.includes(listener)) {
            this.listeners.push(listener);
        }
    };
    /**
     * Removes a listener
     * @param listener the listener with the callback to be removed
     */
    EventManager.prototype.remove = function (listener) {
        // We can't simply look for the listener as it'll be a different instance to
        // one originally subscribed. Find all the listeners of the right type and
        // then check their callbacks which should match.
        for (var i = 0; i < this.listeners.length; i++) {
            var currentListener = this.listeners[i];
            if (currentListener.type === listener.type) {
                if (currentListener.callback === listener.callback) {
                    this.listeners.splice(i, 1);
                    break;
                }
            }
        }
    };
    /**
     * Clears all listeners of specified type, or every listener if no type is
     * specified
     * @param type the type of listeners to clear, or all listeners if not
     * specified
     */
    EventManager.prototype.removeAll = function (type) {
        var _this = this;
        if (!type) {
            this.listeners.splice(0, this.listeners.length);
        }
        else {
            this.listeners
                .filter(function (l) { return l.type === type; })
                .forEach(function (l) { return _this.remove(l); });
        }
    };
    // Fires an event
    EventManager.prototype.fire = function (event) {
        var eventListeners = this.getListeners(event.type);
        eventListeners.forEach(function (listener) { return listener.callback(event); });
    };
    return EventManager;
}());
// Manages a queue of tasks
var TaskQueueManager = /** @class */ (function () {
    function TaskQueueManager(eventManager) {
        this.eventManager = eventManager;
        this.queue = [];
    }
    // Adds a task top the queue
    TaskQueueManager.prototype.add = function (task) {
        this.queue.push(task);
    };
    // Processes all tasks in the queue
    TaskQueueManager.prototype.process = function () {
        while (this.queue.length > 0) {
            var task = this.queue.shift();
            if (task === null || task === void 0 ? void 0 : task.action) {
                task.action();
            }
            if (task === null || task === void 0 ? void 0 : task.event) {
                this.eventManager.fire(task.event);
            }
        }
    };
    return TaskQueueManager;
}());
var Rive = /** @class */ (function () {
    function Rive(params) {
        var _a;
        // Flag to indicate if the layout has changed; used by the renderer to know
        // when to align
        this._updateLayout = true;
        /**
         * Flag to active/deactivate renderer
         */
        this.isRendererActive = true;
        // Tracks if a Rive file is loaded
        this.loaded = false;
        /**
         * Tracks if a Rive file is loaded; we need this in addition to loaded as some
         * commands (e.g. contents) can be called as soon as the file is loaded.
         * However, playback commands need to be queued and run in order once initial
         * animations and autoplay has been sorted out. This applies to play, pause,
         * and start.
         */
        this.readyForPlaying = false;
        // Runtime artboard
        this.artboard = null;
        // place to clear up event listeners
        this.eventCleanup = null;
        this.shouldDisableRiveListeners = false;
        // Durations to generate a frame for the last second. Used for performance profiling.
        this.durations = [];
        this.frameTimes = [];
        this.frameCount = 0;
        /**
         * Used be draw to track when a second of active rendering time has passed.
         * Used for debugging purposes
         */
        this.renderSecondTimer = 0;
        this.canvas = params.canvas;
        this.src = params.src;
        this.buffer = params.buffer;
        this.layout = (_a = params.layout) !== null && _a !== void 0 ? _a : new Layout();
        this.shouldDisableRiveListeners = !!params.shouldDisableRiveListeners;
        // New event management system
        this.eventManager = new EventManager();
        if (params.onLoad)
            this.on(EventType.Load, params.onLoad);
        if (params.onLoadError)
            this.on(EventType.LoadError, params.onLoadError);
        if (params.onPlay)
            this.on(EventType.Play, params.onPlay);
        if (params.onPause)
            this.on(EventType.Pause, params.onPause);
        if (params.onStop)
            this.on(EventType.Stop, params.onStop);
        if (params.onLoop)
            this.on(EventType.Loop, params.onLoop);
        if (params.onStateChange)
            this.on(EventType.StateChange, params.onStateChange);
        /**
         * @deprecated Use camelCase'd versions instead.
         */
        if (params.onload && !params.onLoad)
            this.on(EventType.Load, params.onload);
        if (params.onloaderror && !params.onLoadError)
            this.on(EventType.LoadError, params.onloaderror);
        if (params.onplay && !params.onPlay)
            this.on(EventType.Play, params.onplay);
        if (params.onpause && !params.onPause)
            this.on(EventType.Pause, params.onpause);
        if (params.onstop && !params.onStop)
            this.on(EventType.Stop, params.onstop);
        if (params.onloop && !params.onLoop)
            this.on(EventType.Loop, params.onloop);
        if (params.onstatechange && !params.onStateChange)
            this.on(EventType.StateChange, params.onstatechange);
        // Hook up the task queue
        this.taskQueue = new TaskQueueManager(this.eventManager);
        this.init({
            src: this.src,
            buffer: this.buffer,
            autoplay: params.autoplay,
            animations: params.animations,
            stateMachines: params.stateMachines,
            artboard: params.artboard,
            useOffscreenRenderer: params.useOffscreenRenderer,
        });
    }
    // Alternative constructor to build a Rive instance from an interface/object
    Rive.new = function (params) {
        console.warn("This function is deprecated: please use `new Rive({})` instead");
        return new Rive(params);
    };
    // Initializes the Rive object either from constructor or load()
    Rive.prototype.init = function (_a) {
        var _this = this;
        var src = _a.src, buffer = _a.buffer, animations = _a.animations, stateMachines = _a.stateMachines, artboard = _a.artboard, _b = _a.autoplay, autoplay = _b === void 0 ? false : _b, _c = _a.useOffscreenRenderer, useOffscreenRenderer = _c === void 0 ? false : _c;
        this.src = src;
        this.buffer = buffer;
        // If no source file url specified, it's a bust
        if (!this.src && !this.buffer) {
            throw new Error(Rive.missingErrorMessage);
        }
        // List of animations that should be initialized.
        var startingAnimationNames = mapToStringArray(animations);
        // List of state machines that should be initialized
        var startingStateMachineNames = mapToStringArray(stateMachines);
        // Ensure loaded is marked as false if loading new file
        this.loaded = false;
        this.readyForPlaying = false;
        // Ensure the runtime is loaded
        RuntimeLoader.awaitInstance()
            .then(function (runtime) {
            _this.runtime = runtime;
            // Get the canvas where you want to render the animation and create a renderer
            _this.renderer = _this.runtime.makeRenderer(_this.canvas, useOffscreenRenderer);
            // Initial size adjustment based on devicePixelRatio if no width/height are
            // specified explicitly
            if (!(_this.canvas.width || _this.canvas.height)) {
                _this.resizeDrawingSurfaceToCanvas();
            }
            // Load Rive data from a source uri or a data buffer
            _this.initData(artboard, startingAnimationNames, startingStateMachineNames, autoplay)
                .then(function () { return _this.setupRiveListeners(); })
                .catch(function (e) {
                console.error(e);
            });
        })
            .catch(function (e) {
            console.error(e);
        });
    };
    Rive.prototype.setupRiveListeners = function () {
        var _this = this;
        if (!this.shouldDisableRiveListeners) {
            var activeStateMachines = (this.animator.stateMachines || [])
                .filter(function (sm) { return sm.playing && _this.runtime.hasListeners(sm.instance); })
                .map(function (sm) { return sm.instance; });
            this.eventCleanup = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.registerTouchInteractions)({
                canvas: this.canvas,
                artboard: this.artboard,
                stateMachines: activeStateMachines,
                renderer: this.renderer,
                rive: this.runtime,
                fit: this._layout.runtimeFit(this.runtime),
                alignment: this._layout.runtimeAlignment(this.runtime),
            });
        }
    };
    // Initializes runtime with Rive data and preps for playing
    Rive.prototype.initData = function (artboardName, animationNames, stateMachineNames, autoplay) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var _b, _c, msg;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (!this.src) return [3 /*break*/, 2];
                        _b = this;
                        return [4 /*yield*/, loadRiveFile(this.src)];
                    case 1:
                        _b.buffer = _d.sent();
                        _d.label = 2;
                    case 2:
                        // Load the Rive file
                        _c = this;
                        return [4 /*yield*/, this.runtime.load(new Uint8Array(this.buffer))];
                    case 3:
                        // Load the Rive file
                        _c.file = _d.sent();
                        if (this.file) {
                            // Initialize and draw frame
                            this.initArtboard(artboardName, animationNames, stateMachineNames, autoplay);
                            // Everything's set up, emit a load event
                            this.loaded = true;
                            this.eventManager.fire({
                                type: EventType.Load,
                                data: (_a = this.src) !== null && _a !== void 0 ? _a : "buffer",
                            });
                            // Flag ready for playback commands and clear the task queue; this order
                            // is important or it may infinitely recurse
                            this.readyForPlaying = true;
                            this.taskQueue.process();
                            this.drawFrame();
                            return [2 /*return*/, Promise.resolve()];
                        }
                        else {
                            msg = "Problem loading file; may be corrupt!";
                            console.warn(msg);
                            this.eventManager.fire({ type: EventType.LoadError, data: msg });
                            return [2 /*return*/, Promise.reject(msg)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    // Initialize for playback
    Rive.prototype.initArtboard = function (artboardName, animationNames, stateMachineNames, autoplay) {
        // Fetch the artboard
        var rootArtboard = artboardName
            ? this.file.artboardByName(artboardName)
            : this.file.defaultArtboard();
        // Check we have a working artboard
        if (!rootArtboard) {
            var msg = "Invalid artboard name or no default artboard";
            console.warn(msg);
            this.eventManager.fire({ type: EventType.LoadError, data: msg });
            return;
        }
        this.artboard = rootArtboard;
        // Check that the artboard has at least 1 animation
        if (this.artboard.animationCount() < 1) {
            var msg = "Artboard has no animations";
            this.eventManager.fire({ type: EventType.LoadError, data: msg });
            throw msg;
        }
        // Initialize the animator
        this.animator = new Animator(this.runtime, this.artboard, this.eventManager);
        // Initialize the animations; as loaded hasn't happened yet, we need to
        // suppress firing the play/pause events until the load event has fired. To
        // do this we tell the animator to suppress firing events, and add event
        // firing to the task queue.
        var instanceNames;
        if (animationNames.length > 0 || stateMachineNames.length > 0) {
            instanceNames = animationNames.concat(stateMachineNames);
            this.animator.add(instanceNames, autoplay, false);
        }
        else {
            instanceNames = [this.animator.atLeastOne(autoplay, false)];
        }
        // Queue up firing the playback events
        this.taskQueue.add({
            event: {
                type: autoplay ? EventType.Play : EventType.Pause,
                data: instanceNames,
            },
        });
    };
    // Draws the current artboard frame
    Rive.prototype.drawFrame = function () {
        this.startRendering();
    };
    /**
     * Draw rendering loop; renders animation frames at the correct time interval.
     * @param time the time at which to render a frame
     */
    Rive.prototype.draw = function (time, onSecond) {
        var before = performance.now();
        // Clear the frameRequestId, as we're now rendering a fresh frame
        this.frameRequestId = null;
        // On the first pass, make sure lastTime has a valid value
        if (!this.lastRenderTime) {
            this.lastRenderTime = time;
        }
        // Handle the onSecond callback
        this.renderSecondTimer += time - this.lastRenderTime;
        if (this.renderSecondTimer > 5000) {
            this.renderSecondTimer = 0;
            onSecond === null || onSecond === void 0 ? void 0 : onSecond();
        }
        // Calculate the elapsed time between frames in seconds
        var elapsedTime = (time - this.lastRenderTime) / 1000;
        this.lastRenderTime = time;
        // - Advance non-paused animations by the elapsed number of seconds
        // - Advance any animations that require scrubbing
        // - Advance to the first frame even when autoplay is false
        var activeAnimations = this.animator.animations
            .filter(function (a) { return a.playing || a.needsScrub; })
            // The scrubbed animations must be applied first to prevent weird artifacts
            // if the playing animations conflict with the scrubbed animating attribuates.
            .sort(function (first) { return (first.needsScrub ? -1 : 1); });
        for (var _i = 0, activeAnimations_1 = activeAnimations; _i < activeAnimations_1.length; _i++) {
            var animation = activeAnimations_1[_i];
            animation.advance(elapsedTime);
            if (animation.instance.didLoop) {
                animation.loopCount += 1;
            }
            animation.apply(1.0);
        }
        // - Advance non-paused state machines by the elapsed number of seconds
        // - Advance to the first frame even when autoplay is false
        var activeStateMachines = this.animator.stateMachines.filter(function (a) { return a.playing; });
        for (var _a = 0, activeStateMachines_1 = activeStateMachines; _a < activeStateMachines_1.length; _a++) {
            var stateMachine = activeStateMachines_1[_a];
            stateMachine.advance(elapsedTime);
            // stateMachine.instance.apply(this.artboard);
        }
        // Once the animations have been applied to the artboard, advance it
        // by the elapsed time.
        this.artboard.advance(elapsedTime);
        var renderer = this.renderer;
        // Canvas must be wiped to prevent artifacts
        renderer.clear();
        renderer.save();
        // Update the renderer alignment if necessary
        this.alignRenderer();
        this.artboard.draw(renderer);
        renderer.restore();
        renderer.flush();
        // Check for any animations that looped
        this.animator.handleLooping();
        // Check for any state machines that had a state change
        this.animator.handleStateChanges();
        // Add duration to create frame to durations array
        this.frameCount++;
        var after = performance.now();
        this.frameTimes.push(after);
        this.durations.push(after - before);
        while (this.frameTimes[0] <= after - 1000) {
            this.frameTimes.shift();
            this.durations.shift();
        }
        // Calling requestAnimationFrame will rerun draw() at the correct rate:
        // https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_animations
        if (this.animator.isPlaying) {
            // Request a new rendering frame
            this.startRendering();
        }
        else if (this.animator.isPaused) {
            // Reset the end time so on playback it starts at the correct frame
            this.lastRenderTime = 0;
        }
        else if (this.animator.isStopped) {
            // Reset animation instances, artboard and time
            // TODO: implement this properly when we have instancing
            // this.initArtboard();
            // this.drawFrame();
            this.lastRenderTime = 0;
        }
    };
    /**
     * Align the renderer
     */
    Rive.prototype.alignRenderer = function () {
        var _a = this, renderer = _a.renderer, runtime = _a.runtime, _layout = _a._layout, artboard = _a.artboard;
        // Align things up safe in the knowledge we can restore if changed
        renderer.align(_layout.runtimeFit(runtime), _layout.runtimeAlignment(runtime), {
            minX: _layout.minX,
            minY: _layout.minY,
            maxX: _layout.maxX,
            maxY: _layout.maxY,
        }, artboard.bounds);
    };
    Object.defineProperty(Rive.prototype, "fps", {
        get: function () {
            return this.durations.length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rive.prototype, "frameTime", {
        get: function () {
            if (this.durations.length === 0) {
                return 0;
            }
            return (this.durations.reduce(function (a, b) { return a + b; }, 0) / this.durations.length).toFixed(4);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Cleans up all Wasm-generated objects that need to be manually destroyed:
     * artboard instances, animation instances, state machine instances,
     * renderer instance, file and runtime.
     *
     * Once this is called, you will need to initialise a new instance of the
     * Rive class
     */
    Rive.prototype.cleanup = function () {
        var _a, _b;
        // Stop the renderer if it hasn't already been stopped.
        this.stopRendering();
        // Clean up any artboard, animation or state machine instances.
        this.cleanupInstances();
        // Delete the renderer
        (_a = this.renderer) === null || _a === void 0 ? void 0 : _a.delete();
        this.renderer = null;
        // Delete the rive file
        (_b = this.file) === null || _b === void 0 ? void 0 : _b.delete();
        this.file = null;
    };
    /**
     * Cleans up any Wasm-generated objects that need to be manually destroyed:
     * artboard instances, animation instances, state machine instances.
     *
     * Once this is called, things will need to be reinitialized or bad things
     * might happen.
     */
    Rive.prototype.cleanupInstances = function () {
        if (this.eventCleanup !== null) {
            this.eventCleanup();
        }
        // Delete all animation and state machine instances
        this.stop();
        if (this.artboard) {
            this.artboard.delete();
            this.artboard = null;
        }
    };
    // Plays specified animations; if none specified, it unpauses everything.
    Rive.prototype.play = function (animationNames, autoplay) {
        var _this = this;
        animationNames = mapToStringArray(animationNames);
        // If the file's not loaded, queue up the play
        if (!this.readyForPlaying) {
            this.taskQueue.add({
                action: function () { return _this.play(animationNames, autoplay); },
            });
            return;
        }
        this.animator.play(animationNames);
        if (this.eventCleanup) {
            this.eventCleanup();
        }
        this.setupRiveListeners();
        this.startRendering();
    };
    // Pauses specified animations; if none specified, pauses all.
    Rive.prototype.pause = function (animationNames) {
        var _this = this;
        animationNames = mapToStringArray(animationNames);
        // If the file's not loaded, early out, nothing to pause
        if (!this.readyForPlaying) {
            this.taskQueue.add({
                action: function () { return _this.pause(animationNames); },
            });
            return;
        }
        this.animator.pause(animationNames);
    };
    Rive.prototype.scrub = function (animationNames, value) {
        var _this = this;
        animationNames = mapToStringArray(animationNames);
        // If the file's not loaded, early out, nothing to pause
        if (!this.readyForPlaying) {
            this.taskQueue.add({
                action: function () { return _this.scrub(animationNames, value); },
            });
            return;
        }
        // Scrub the animation time; we draw a single frame here so that if
        // nothing's currently playing, the scrubbed animation is still rendered/
        this.animator.scrub(animationNames, value || 0);
        this.drawFrame();
    };
    // Stops specified animations; if none specifies, stops them all.
    Rive.prototype.stop = function (animationNames) {
        var _this = this;
        animationNames = mapToStringArray(animationNames);
        // If the file's not loaded, early out, nothing to pause
        if (!this.readyForPlaying) {
            this.taskQueue.add({
                action: function () { return _this.stop(animationNames); },
            });
            return;
        }
        this.animator.stop(animationNames);
        if (this.eventCleanup) {
            this.eventCleanup();
        }
    };
    /**
     * Resets the animation
     * @param artboard the name of the artboard, or default if none given
     * @param animations the names of animations for playback
     * @param stateMachines the names of state machines for playback
     * @param autoplay whether to autoplay when reset, defaults to false
     *
     */
    Rive.prototype.reset = function (params) {
        var _a;
        // Get the current artboard, animations, state machines, and playback states
        var artBoardName = params === null || params === void 0 ? void 0 : params.artboard;
        var animationNames = mapToStringArray(params === null || params === void 0 ? void 0 : params.animations);
        var stateMachineNames = mapToStringArray(params === null || params === void 0 ? void 0 : params.stateMachines);
        var autoplay = (_a = params === null || params === void 0 ? void 0 : params.autoplay) !== null && _a !== void 0 ? _a : false;
        // Stop everything and clean up
        this.cleanupInstances();
        // Reinitialize an artboard instance with the state
        this.initArtboard(artBoardName, animationNames, stateMachineNames, autoplay);
        this.taskQueue.process();
    };
    // Loads a new Rive file, keeping listeners in place
    Rive.prototype.load = function (params) {
        // Stop all animations
        this.stop();
        // Reinitialize
        this.init(params);
    };
    Object.defineProperty(Rive.prototype, "layout", {
        /**
         * Returns the current layout. Note that layout should be treated as
         * immutable. If you want to change the layout, create a new one use the
         * layout setter
         */
        get: function () {
            return this._layout;
        },
        // Sets a new layout
        set: function (layout) {
            this._layout = layout;
            // If the maxX or maxY are 0, then set them to the canvas width and height
            if (!layout.maxX || !layout.maxY) {
                this.resizeToCanvas();
            }
            if (this.loaded && !this.animator.isPlaying) {
                this.drawFrame();
            }
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets the layout bounds to the current canvas size; this is typically called
     * when the canvas is resized
     */
    Rive.prototype.resizeToCanvas = function () {
        this._layout = this.layout.copyWith({
            minX: 0,
            minY: 0,
            maxX: this.canvas.width,
            maxY: this.canvas.height,
        });
    };
    /**
     * Accounts for devicePixelRatio as a multiplier to render the size of the canvas drawing surface.
     * Uses the size of the backing canvas to set new width/height attributes. Need to re-render
     * and resize the layout to match the new drawing surface afterwards.
     * Useful function for consumers to include in a window resize listener
     */
    Rive.prototype.resizeDrawingSurfaceToCanvas = function () {
        if (this.canvas instanceof HTMLCanvasElement && !!window) {
            var _a = this.canvas.getBoundingClientRect(), width = _a.width, height = _a.height;
            var dpr = window.devicePixelRatio || 1;
            this.canvas.width = dpr * width;
            this.canvas.height = dpr * height;
            this.startRendering();
            this.resizeToCanvas();
        }
    };
    Object.defineProperty(Rive.prototype, "source", {
        // Returns the animation source, which may be undefined
        get: function () {
            return this.src;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rive.prototype, "activeArtboard", {
        /**
         * Returns the name of the active artboard
         */
        get: function () {
            return this.artboard ? this.artboard.name : "";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rive.prototype, "animationNames", {
        // Returns a list of animation names on the chosen artboard
        get: function () {
            // If the file's not loaded, we got nothing to return
            if (!this.loaded) {
                return [];
            }
            var animationNames = [];
            for (var i = 0; i < this.artboard.animationCount(); i++) {
                animationNames.push(this.artboard.animationByIndex(i).name);
            }
            return animationNames;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rive.prototype, "stateMachineNames", {
        /**
         * Returns a list of state machine names from the current artboard
         */
        get: function () {
            // If the file's not loaded, we got nothing to return
            if (!this.loaded) {
                return [];
            }
            var stateMachineNames = [];
            for (var i = 0; i < this.artboard.stateMachineCount(); i++) {
                stateMachineNames.push(this.artboard.stateMachineByIndex(i).name);
            }
            return stateMachineNames;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns the inputs for the specified instanced state machine, or an empty
     * list if the name is invalid or the state machine is not instanced
     * @param name the state machine name
     * @returns the inputs for the named state machine
     */
    Rive.prototype.stateMachineInputs = function (name) {
        // If the file's not loaded, early out, nothing to pause
        if (!this.loaded) {
            return;
        }
        var stateMachine = this.animator.stateMachines.find(function (m) { return m.name === name; });
        return stateMachine === null || stateMachine === void 0 ? void 0 : stateMachine.inputs;
    };
    Object.defineProperty(Rive.prototype, "playingStateMachineNames", {
        // Returns a list of playing machine names
        get: function () {
            // If the file's not loaded, we got nothing to return
            if (!this.loaded) {
                return [];
            }
            return this.animator.stateMachines
                .filter(function (m) { return m.playing; })
                .map(function (m) { return m.name; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rive.prototype, "playingAnimationNames", {
        // Returns a list of playing animation names
        get: function () {
            // If the file's not loaded, we got nothing to return
            if (!this.loaded) {
                return [];
            }
            return this.animator.animations.filter(function (a) { return a.playing; }).map(function (a) { return a.name; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rive.prototype, "pausedAnimationNames", {
        // Returns a list of paused animation names
        get: function () {
            // If the file's not loaded, we got nothing to return
            if (!this.loaded) {
                return [];
            }
            return this.animator.animations
                .filter(function (a) { return !a.playing; })
                .map(function (a) { return a.name; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rive.prototype, "pausedStateMachineNames", {
        /**
         *  Returns a list of paused machine names
         * @returns a list of state machine names that are paused
         */
        get: function () {
            // If the file's not loaded, we got nothing to return
            if (!this.loaded) {
                return [];
            }
            return this.animator.stateMachines
                .filter(function (m) { return !m.playing; })
                .map(function (m) { return m.name; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rive.prototype, "isPlaying", {
        /**
         * @returns true if any animation is playing
         */
        get: function () {
            return this.animator.isPlaying;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rive.prototype, "isPaused", {
        /**
         * @returns true if all instanced animations are paused
         */
        get: function () {
            return this.animator.isPaused;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rive.prototype, "isStopped", {
        /**
         * @returns true if no animations are playing or paused
         */
        get: function () {
            return this.animator.isStopped;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rive.prototype, "bounds", {
        /**
         * @returns the bounds of the current artboard, or undefined if the artboard
         * isn't loaded yet.
         */
        get: function () {
            return this.artboard ? this.artboard.bounds : undefined;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Subscribe to Rive-generated events
     * @param type the type of event to subscribe to
     * @param callback callback to fire when the event occurs
     */
    Rive.prototype.on = function (type, callback) {
        this.eventManager.add({
            type: type,
            callback: callback,
        });
    };
    /**
     * Unsubscribes from a Rive-generated event
     * @param callback the callback to unsubscribe from
     */
    Rive.prototype.unsubscribe = function (type, callback) {
        this.eventManager.remove({
            type: type,
            callback: callback,
        });
    };
    /**
     * Unsubscribes all listeners from an event type, or everything if no type is
     * given
     * @param type the type of event to unsubscribe from, or all types if
     * undefined
     */
    Rive.prototype.unsubscribeAll = function (type) {
        this.eventManager.removeAll(type);
    };
    /**
     * Stops the rendering loop; this is different from pausing in that it doesn't
     * change the state of any animation. It stops rendering from occurring. This
     * is designed for situations such as when Rive isn't visible.
     *
     * The only way to start rendering again is to call `startRendering`.
     * Animations that are marked as playing will start from the position that
     * they would have been at if rendering had not been stopped.
     */
    Rive.prototype.stopRendering = function () {
        if (this.loaded && this.frameRequestId) {
            if (this.runtime.cancelAnimationFrame) {
                this.runtime.cancelAnimationFrame(this.frameRequestId);
            }
            else {
                cancelAnimationFrame(this.frameRequestId);
            }
            this.frameRequestId = null;
        }
    };
    /**
     * Starts the rendering loop if it has been previously stopped. If the
     * renderer is already active, then this will have zero effect.
     */
    Rive.prototype.startRendering = function () {
        if (this.loaded && this.artboard && !this.frameRequestId) {
            if (this.runtime.requestAnimationFrame) {
                this.frameRequestId = this.runtime.requestAnimationFrame(this.draw.bind(this));
            }
            else {
                this.frameRequestId = requestAnimationFrame(this.draw.bind(this));
            }
        }
    };
    /**
     * Enables frames-per-second (FPS) reporting for the runtime
     * If no callback is provided, Rive will append a fixed-position div at the top-right corner of
     * the page with the FPS reading
     * @param fpsCallback - Callback from the runtime during the RAF loop that supplies the FPS value
     */
    Rive.prototype.enableFPSCounter = function (fpsCallback) {
        this.runtime.enableFPSCounter(fpsCallback);
    };
    /**
     * Disables frames-per-second (FPS) reporting for the runtime
     */
    Rive.prototype.disableFPSCounter = function () {
        this.runtime.disableFPSCounter();
    };
    Object.defineProperty(Rive.prototype, "contents", {
        /**
         * Returns the contents of a Rive file: the artboards, animations, and state machines
         */
        get: function () {
            if (!this.loaded) {
                return undefined;
            }
            var riveContents = {
                artboards: [],
            };
            for (var i = 0; i < this.file.artboardCount(); i++) {
                var artboard = this.file.artboardByIndex(i);
                var artboardContents = {
                    name: artboard.name,
                    animations: [],
                    stateMachines: [],
                };
                for (var j = 0; j < artboard.animationCount(); j++) {
                    var animation = artboard.animationByIndex(j);
                    artboardContents.animations.push(animation.name);
                }
                for (var k = 0; k < artboard.stateMachineCount(); k++) {
                    var stateMachine = artboard.stateMachineByIndex(k);
                    var name_1 = stateMachine.name;
                    var instance = new this.runtime.StateMachineInstance(stateMachine, artboard);
                    var inputContents = [];
                    for (var l = 0; l < instance.inputCount(); l++) {
                        var input = instance.input(l);
                        inputContents.push({ name: input.name, type: input.type });
                    }
                    artboardContents.stateMachines.push({
                        name: name_1,
                        inputs: inputContents,
                    });
                }
                riveContents.artboards.push(artboardContents);
            }
            return riveContents;
        },
        enumerable: false,
        configurable: true
    });
    // Error message for missing source or buffer
    Rive.missingErrorMessage = "Rive source file or data buffer required";
    return Rive;
}());

// Loads Rive data from a URI via fetch.
var loadRiveFile = function (src) { return __awaiter(void 0, void 0, void 0, function () {
    var req, res, buffer;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                req = new Request(src);
                return [4 /*yield*/, fetch(req)];
            case 1:
                res = _a.sent();
                return [4 /*yield*/, res.arrayBuffer()];
            case 2:
                buffer = _a.sent();
                return [2 /*return*/, buffer];
        }
    });
}); };
// #endregion
// #region utility functions
/*
 * Utility function to ensure an object is a string array
 */
var mapToStringArray = function (obj) {
    if (typeof obj === "string") {
        return [obj];
    }
    else if (obj instanceof Array) {
        return obj;
    }
    // If obj is undefined, return empty array
    return [];
};
// #endregion
// #region testing utilities
// Exports to only be used for tests
var Testing = {
    EventManager: EventManager,
    TaskQueueManager: TaskQueueManager,
};
// #endregion

})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=rive.js.map