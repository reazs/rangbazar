import {
  require_rive
} from "./chunk-P2SQPAHF.js";
import {
  require_react
} from "./chunk-JFTBQ7A7.js";
import {
  __commonJS
} from "./chunk-AC2VUBZ6.js";

// node_modules/@rive-app/react-canvas/dist/index.js
var require_dist = __commonJS({
  "node_modules/@rive-app/react-canvas/dist/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    var e = require_react();
    var n = require_rive();
    function t(e2) {
      return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
    }
    var r = t(e);
    var i = function() {
      return i = Object.assign || function(e2) {
        for (var n2, t2 = 1, r2 = arguments.length; t2 < r2; t2++)
          for (var i2 in n2 = arguments[t2])
            Object.prototype.hasOwnProperty.call(n2, i2) && (e2[i2] = n2[i2]);
        return e2;
      }, i.apply(this, arguments);
    };
    function a(e2, n2) {
      var t2 = {};
      for (var r2 in e2)
        Object.prototype.hasOwnProperty.call(e2, r2) && n2.indexOf(r2) < 0 && (t2[r2] = e2[r2]);
      if (null != e2 && "function" == typeof Object.getOwnPropertySymbols) {
        var i2 = 0;
        for (r2 = Object.getOwnPropertySymbols(e2); i2 < r2.length; i2++)
          n2.indexOf(r2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(e2, r2[i2]) && (t2[r2[i2]] = e2[r2[i2]]);
      }
      return t2;
    }
    function o() {
      var e2 = "undefined" != typeof window && "number" == typeof window.devicePixelRatio ? window.devicePixelRatio : 1;
      return Math.min(Math.max(1, e2), 3);
    }
    var s = function() {
      function e2() {
      }
      return e2.prototype.observe = function() {
      }, e2.prototype.unobserve = function() {
      }, e2.prototype.disconnect = function() {
      }, e2;
    }();
    var u = globalThis.ResizeObserver || s;
    var c = void 0 !== globalThis.ResizeObserver;
    var f = !c;
    function d(n2, t2) {
      void 0 === t2 && (t2 = true);
      var r2 = e.useState({ width: 0, height: 0 }), i2 = r2[0], a2 = r2[1];
      e.useEffect(function() {
        if ("undefined" != typeof window && t2) {
          var e2 = function() {
            a2({ width: window.innerWidth, height: window.innerHeight });
          };
          return f && (e2(), window.addEventListener("resize", e2)), function() {
            return window.removeEventListener("resize", e2);
          };
        }
      }, []);
      var o2, s2, d2, l2 = e.useRef(new u((o2 = function(e2) {
        c && a2({ width: e2[e2.length - 1].contentRect.width, height: e2[e2.length - 1].contentRect.height });
      }, s2 = 0, d2 = 0, function() {
        for (var e2 = this, n3 = [], t3 = 0; t3 < arguments.length; t3++)
          n3[t3] = arguments[t3];
        clearTimeout(d2), d2 = window.setTimeout(function() {
          return o2.apply(e2, n3);
        }, s2);
      })));
      return e.useEffect(function() {
        var e2 = l2.current;
        if (t2) {
          var r3 = n2.current;
          return n2.current && c && e2.observe(n2.current), function() {
            e2.disconnect(), r3 && c && e2.unobserve(r3);
          };
        }
        e2.disconnect();
      }, [n2, l2]), i2;
    }
    var l = { useDevicePixelRatio: true, fitCanvasToArtboardHeight: false, useOffscreenRenderer: true, shouldResizeCanvasToContainer: true };
    function v(e2) {
      return Object.assign({}, l, e2);
    }
    function h(n2) {
      var t2 = n2.riveLoaded, r2 = void 0 !== t2 && t2, i2 = n2.canvasRef, a2 = n2.containerRef, s2 = n2.options, u2 = void 0 === s2 ? {} : s2, c2 = n2.onCanvasHasResized, f2 = n2.artboardBounds, l2 = v(u2), h2 = e.useState({ height: 0, width: 0 }), p2 = h2[0], w2 = p2.height, R = p2.width, g = h2[1], b = e.useState({ height: 0, width: 0 }), y = b[0], m = y.height, C = y.width, O = b[1], x = e.useState(true), E = x[0], P = x[1], T = l2.fitCanvasToArtboardHeight, L = l2.shouldResizeCanvasToContainer, z = l2.useDevicePixelRatio, j = d(a2, L), M = function() {
        var n3 = o(), t3 = e.useState(n3), r3 = t3[0], i3 = t3[1];
        return e.useEffect(function() {
          if ("undefined" != typeof window && "matchMedia" in window) {
            var e2 = function() {
              var e3 = o();
              i3(e3);
            }, n4 = window.matchMedia("screen and (resolution: ".concat(r3, "dppx)"));
            return n4.hasOwnProperty("addEventListener") ? n4.addEventListener("change", e2) : n4.addListener(e2), function() {
              n4.hasOwnProperty("removeEventListener") ? n4.removeEventListener("change", e2) : n4.removeListener(e2);
            };
          }
        }, [r3]), r3;
      }(), S = null != f2 ? f2 : {}, H = S.maxX, k = S.maxY, D = e.useCallback(function() {
        var e2, n3, t3, r3, i3 = null !== (n3 = null === (e2 = a2.current) || void 0 === e2 ? void 0 : e2.clientWidth) && void 0 !== n3 ? n3 : 0, o2 = null !== (r3 = null === (t3 = a2.current) || void 0 === t3 ? void 0 : t3.clientHeight) && void 0 !== r3 ? r3 : 0;
        return T && f2 ? { width: i3, height: i3 * (f2.maxY / f2.maxX) } : { width: i3, height: o2 };
      }, [a2, T, H, k]);
      e.useEffect(function() {
        if (L && a2.current && r2) {
          var e2 = D(), n3 = e2.width, t3 = e2.height, o2 = false;
          if (i2.current) {
            var s3 = n3 !== R || t3 !== w2;
            if (l2.fitCanvasToArtboardHeight && s3 && (a2.current.style.height = t3 + "px", o2 = true), l2.useDevicePixelRatio) {
              if (s3 || (n3 * M !== C || t3 * M !== m)) {
                var u3 = M * n3, f3 = M * t3;
                i2.current.width = u3, i2.current.height = f3, i2.current.style.width = n3 + "px", i2.current.style.height = t3 + "px", O({ width: u3, height: f3 }), o2 = true;
              }
            } else
              s3 && (i2.current.width = n3, i2.current.height = t3, O({ width: n3, height: t3 }), o2 = true);
            g({ width: n3, height: t3 });
          }
          c2 && (E || o2) && c2 && c2(), E && P(false);
        }
      }, [i2, a2, j, M, D, E, P, m, C, w2, R, c2, L, T, z, r2]);
    }
    function p(e2) {
      var n2 = e2.setContainerRef, t2 = e2.setCanvasRef, o2 = e2.className, s2 = void 0 === o2 ? "" : o2, u2 = e2.style, c2 = e2.children, f2 = a(e2, ["setContainerRef", "setCanvasRef", "className", "style", "children"]), d2 = i({ width: "100%", height: "100%" }, u2);
      return r.default.createElement("div", i({ ref: n2, className: s2 }, !s2 && { style: d2 }), r.default.createElement("canvas", i({ ref: t2, style: { verticalAlign: "top", width: 0, height: 0 } }, f2), c2));
    }
    function w(t2, a2) {
      void 0 === a2 && (a2 = {});
      var o2 = e.useRef(null), s2 = e.useRef(null), u2 = e.useState(null), c2 = u2[0], f2 = u2[1], d2 = Boolean(t2), l2 = v(a2), w2 = e.useCallback(function() {
        c2 && (c2.startRendering(), c2.resizeToCanvas());
      }, [c2]);
      h({ riveLoaded: !!c2, canvasRef: o2, containerRef: s2, options: l2, onCanvasHasResized: w2, artboardBounds: null == c2 ? void 0 : c2.bounds });
      var R = e.useCallback(function(e2) {
        if (e2 && t2 && d2) {
          var r2 = l2.useOffscreenRenderer, a3 = new n.Rive(i(i({ useOffscreenRenderer: r2 }, t2), { canvas: e2 }));
          a3.on(n.EventType.Load, function() {
            o2.current ? f2(a3) : a3.cleanup();
          });
        } else
          null === e2 && o2.current && (o2.current.height = 0, o2.current.width = 0);
        o2.current = e2;
      }, [d2]), g = e.useCallback(function(e2) {
        s2.current = e2;
      }, []);
      e.useEffect(function() {
        var e2 = new IntersectionObserver(function(e3) {
          e3[0].isIntersecting ? c2 && c2.startRendering() : c2 && c2.stopRendering();
        });
        return o2.current && e2.observe(o2.current), function() {
          e2.disconnect();
        };
      }, [c2]), e.useEffect(function() {
        return function() {
          c2 && (c2.cleanup(), f2(null));
        };
      }, [c2]);
      var b = null == t2 ? void 0 : t2.animations;
      e.useEffect(function() {
        c2 && b && (c2.isPlaying ? (c2.stop(c2.animationNames), c2.play(b)) : c2.isPaused && (c2.stop(c2.animationNames), c2.pause(b)));
      }, [b, c2]);
      var y = e.useCallback(function(e2) {
        return r.default.createElement(p, i({ setContainerRef: g, setCanvasRef: R }, e2));
      }, [R, g]);
      return { canvas: o2.current, container: s2.current, setCanvasRef: R, setContainerRef: g, rive: c2, RiveComponent: y };
    }
    exports.default = function(e2) {
      var n2 = e2.src, t2 = e2.artboard, o2 = e2.animations, s2 = e2.stateMachines, u2 = e2.layout, c2 = e2.useOffscreenRenderer, f2 = void 0 === c2 || c2, d2 = e2.shouldDisableRiveListeners, l2 = void 0 !== d2 && d2, v2 = e2.shouldResizeCanvasToContainer, h2 = void 0 === v2 || v2, p2 = e2.children, R = a(e2, ["src", "artboard", "animations", "stateMachines", "layout", "useOffscreenRenderer", "shouldDisableRiveListeners", "shouldResizeCanvasToContainer", "children"]), g = w({ src: n2, artboard: t2, animations: o2, layout: u2, stateMachines: s2, autoplay: true, shouldDisableRiveListeners: l2 }, { useOffscreenRenderer: f2, shouldResizeCanvasToContainer: h2 }).RiveComponent;
      return r.default.createElement(g, i({}, R), p2);
    }, exports.useResizeCanvas = h, exports.useRive = w, exports.useStateMachineInput = function(t2, r2, i2, a2) {
      var o2 = e.useState(null), s2 = o2[0], u2 = o2[1];
      return e.useEffect(function() {
        function e2() {
          if (t2 && r2 && i2 || u2(null), t2 && r2 && i2) {
            var e3 = t2.stateMachineInputs(r2);
            if (e3) {
              var n2 = e3.find(function(e4) {
                return e4.name === i2;
              });
              void 0 !== a2 && n2 && (n2.value = a2), u2(n2 || null);
            }
          } else
            u2(null);
        }
        e2(), t2 && t2.on(n.EventType.Play, function() {
          e2();
        });
      }, [t2]), s2;
    }, Object.keys(n).forEach(function(e2) {
      "default" === e2 || exports.hasOwnProperty(e2) || Object.defineProperty(exports, e2, { enumerable: true, get: function() {
        return n[e2];
      } });
    });
  }
});
export default require_dist();
//# sourceMappingURL=@rive-app_react-canvas.js.map
